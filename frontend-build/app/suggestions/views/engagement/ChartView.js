define(["underscore","app/highcharts","app/core/View","app/data/colorFactory","app/reports/util/formatTooltipHeader","app/reports/util/formatXAxis","../../EngagementReport"],function(t,e,i,s,a,o,r){"use strict";return i.extend({initialize:function(){this.chart=null,this.isLoading=!1,this.listenTo(this.model,"request",this.onModelLoading),this.listenTo(this.model,"sync",this.onModelLoaded),this.listenTo(this.model,"error",this.onModelError),this.listenTo(this.model,"change:groups",this.render)},destroy:function(){null!==this.chart&&(this.chart.destroy(),this.chart=null)},afterRender:function(){this.timers.createOrUpdate&&clearTimeout(this.timers.createOrUpdate),this.timers.createOrUpdate=setTimeout(this.createOrUpdate.bind(this),1)},createOrUpdate:function(){this.timers.createOrUpdate=null,this.chart?this.updateChart():(this.createChart(),this.isLoading&&this.chart.showLoading())},createChart:function(){const t=this.serializeXAxis(),i=this.serializeChartSeries();this.chart=new e.Chart({chart:{renderTo:this.el,plotBorderWidth:1,spacing:[10,1,1,1]},exporting:{filename:this.t(`engagement:export:filename:${this.options.totals}`),chartOptions:{title:{text:this.t(`engagement:title:${this.options.totals}`)},legend:{enabled:!0}},noDataLabels:i.length&&i.length*i[0].data.length>30},title:!1,noData:{},xAxis:t,yAxis:{title:!1,min:0,allowDecimals:!1},tooltip:{shared:!0,valueDecimals:0,headerFormatter:"datetime"===t.type?a.bind(this):void 0},legend:{enabled:"datetime"===t.type},plotOptions:{column:{borderWidth:0,dataLabels:{enabled:i.length&&i.length*i[0].data.length<=70}}},series:i})},updateChart:function(){this.chart.destroy(),this.createChart()},serializeXAxis:function(){return 1===this.model.get("groups").length?{type:"category",categories:r.COUNTERS.filter(t=>"total"!==t).map(t=>this.t(`engagement:series:${t}`))}:{type:"datetime",labels:o.labels(this)}},serializeChartSeries:function(){const t=[],e=this.model.get("groups"),i="users"===this.options.totals;return 1===e.length?(t.push({type:"column",name:this.t(`engagement:series:${this.options.totals}`),data:r.COUNTERS.filter(t=>"total"!==t).map(t=>({color:s.getColor("suggestions/engagement",t),y:i?e[0].totals.users[t]:e[0].totals[t]}))}),t):(r.COUNTERS.forEach(a=>{if("total"===a)return;const o={id:a,name:this.t(`engagement:series:${a}`),type:"column",color:s.getColor("suggestions/engagement",a),data:e.map(t=>({x:t.key,y:i?t.totals.users[a]:t.totals[a]}))};t.push(o)}),t)},onModelLoading:function(){this.isLoading=!0,this.chart&&this.chart.showLoading()},onModelLoaded:function(){this.isLoading=!1,this.chart&&this.chart.hideLoading()},onModelError:function(){this.isLoading=!1,this.chart&&this.chart.hideLoading()}})});