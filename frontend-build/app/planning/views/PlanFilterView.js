define(["underscore","jquery","app/i18n","app/time","app/viewport","app/core/View","app/core/util/pageActions","app/data/clipboard","app/mrpControllers/util/setUpMrpSelect2","./ExportStatsDialogView","./ExportTransportDialogView","app/planning/templates/planFilter"],function(t,e,i,n,a,s,o,r,p,l,d,h){"use strict";return s.extend({template:h,events:{"input #-date":"changeFilter","change #-date":"changeFilter","change #-mrps":"changeFilter","click #-lineOrdersList":function(){this.plan.displayOptions.toggleLineOrdersList()},"click #-useDarkerTheme":function(){this.plan.displayOptions.toggleDarkerThemeUse()},'click a[role="copyOrderList"]':function(t){this.copyOrderList(+t.currentTarget.dataset.shift)},"click #-exportStats":function(){a.showDialog(new l({model:this.plan}),this.t("stats:export:title"))},"click #-exportTransport":function(){a.showDialog(new d({model:this.plan}),this.t("transport:export:title"))}},modelProperty:"plan",initialize:function(){var t=this.plan,e=t.displayOptions;this.listenTo(t,"change:loading",this.onLoadingChanged),this.listenTo(t,"change:_id",this.onDateChanged),this.listenTo(e,"change:minDate change:maxDate",this.onMinMaxDateChanged),this.listenTo(e,"change:lineOrdersList change:useDarkerTheme",this.updateToggles)},getTemplateData:function(){var t=this.plan,e=t.displayOptions;return{date:t.id,mrps:e.get("mrps"),minDate:e.get("minDate"),maxDate:e.get("maxDate"),lineOrdersList:e.isLineOrdersListEnabled(),useDarkerTheme:e.isDarkerThemeUsed(),showToggles:!1!==this.options.toggles,showStats:!1!==this.options.stats}},afterRender:function(){p(this.$id("mrps"),{width:"400px",placeholder:this.t("filter:mrps:placeholder"),sortable:!0,own:!0,view:this})},copyOrderList:function(t){var i=this,n={};e(".planning-mrp[data-id]").each(function(){n[this.dataset.id]=!0});var a=i.plan.getOrderList(n,t);r.copy(function(t){if(t){t.setData("text/plain",a.join("\r\n")),t.setData("text/html","<ul><li>"+a.join("</li><li>")+"</li></ul>");var e=i.$id("copyOrderList").tooltip({container:i.el,trigger:"manual",placement:"bottom",title:i.t("toolbar:copyOrderList:success")});e.tooltip("show").data("bs.tooltip").tip().addClass("result success"),i.timers.hideTooltip&&clearTimeout(i.timers.hideTooltip),i.timers.hideTooltip=setTimeout(function(){e.tooltip("destroy")},1337)}})},getStats:function(){var t={manHours:{todo:0,late:0,plan:0,remaining:0},quantity:{todo:0,late:0,plan:0,remaining:0},execution:{plan:0,done:0,percent:0,1:{plan:0,done:0,percent:0},2:{plan:0,done:0,percent:0},3:{plan:0,done:0,percent:0}},orders:{todo:0,late:0,plan:0,remaining:0}};e(".planning-mrp-stats-bd").each(function(){e(this).find("td").each(function(){var e=this.dataset;if(e.plan){var i=e.shiftNo;i?(t.execution[i].plan+=parseInt(e.plan,10),t.execution[i].done+=parseInt(e.done,10)):(t.execution.plan+=parseInt(e.plan,10),t.execution.done+=parseInt(e.done,10))}else{var n=e.value;n>0&&(t[e.group][e.subgroup]+=parseFloat(n))}})}),t.execution.percent=t.execution.plan?Math.round(t.execution.done/t.execution.plan*100):0;for(var i=1;i<=3;++i){var n=t.execution[i];n.percent=n.plan?Math.round(n.done/n.plan*100):100}return t},recountStats:function(){var t=this.getStats();this.$("td[data-group]").each(function(){var e=this.dataset.group.split("."),i=t[e[0]];e.length>1&&(i=i[e[1]]),this.textContent=i[this.dataset.subgroup].toLocaleString()})},updateToggles:function(){if(!1!==this.options.toggles){var t=this.plan.displayOptions;this.$id("lineOrdersList").toggleClass("active",t.isLineOrdersListEnabled()),this.$id("useDarkerTheme").toggleClass("active",t.isDarkerThemeUsed())}},changeFilter:function(){var e=this.$id("date")[0],i=e.value,n={mrps:this.$id("mrps").val().split(",").filter(function(t){return t.length>0})};e.checkValidity()&&/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(i)&&(n.date=i),t.isEqual(n.mrps,this.plan.displayOptions.get("mrps"))||this.plan.displayOptions.set("mrps",n.mrps),n.date&&n.date!==this.plan.id&&this.plan.set("_id",n.date)},onLoadingChanged:function(){var t=this.plan.get("loading");this.$id("date").prop("disabled",t),this.$id("mrps").select2("enable",!t)},onDateChanged:function(){this.$id("date").val(this.plan.id)},onMinMaxDateChanged:function(){this.$id("date").prop("min",this.plan.displayOptions.get("minDate")).prop("max",this.plan.displayOptions.get("maxDate"))}})});