// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

define(["underscore","jquery","app/core/View","app/data/downtimeReasons","app/planning/util/shift","app/planning/templates/lineOrders","app/planning/templates/lineOrderPopover","app/planning/templates/lineOrderDowntimePopover","app/planning/templates/lineOrderShiftPopover","app/planning/templates/lineOrderLinePopover"],function(e,t,r,i,n,o,s,a,d,l){"use strict";return r.extend({template:o,events:{"mouseenter .is-lineOrder":function(e){this.mrp.orders.trigger("highlight",{source:"lineOrders",state:!0,orderNo:this.line.orders.get(e.currentTarget.dataset.id).get("orderNo")})},"mouseleave .is-lineOrder":function(e){this.mrp.orders.trigger("highlight",{source:"lineOrders",state:!1,orderNo:this.line.orders.get(e.currentTarget.dataset.id).get("orderNo")})},"click .is-lineOrder":function(e){if(0===e.button){var t=this.line.orders.get(e.currentTarget.dataset.id).get("orderNo");if(e.ctrlKey)return void window.open("#orders/"+t);if(this.mrp.orders.get(t))this.mrp.orders.trigger("preview",{orderNo:t});else{var r=this.plan.mrps.get(this.plan.orders.get(t).get("mrp"));r&&r.orders.trigger("preview",{orderNo:t,scrollIntoView:!0})}}},"contextmenu .is-lineOrder":function(e){e.preventDefault()},"contextmenu .is-downtime":function(e){e.preventDefault()}},initialize:function(){this.listenTo(this.line.orders,"reset",this.render),this.listenTo(this.mrp.orders,"highlight",this.onOrderHighlight),this.listenTo(this.mrp.orders,"change:incomplete",this.onIncompleteChange)},destroy:function(){this.$el.popover("destroy")},serialize:function(){return{idPrefix:this.idPrefix,line:this.line.id,shifts:this.serializeShifts()}},afterRender:function(){var e=this;e.$el.popover({container:e.el,selector:"div[data-popover-content]",trigger:"hover",html:!0,placement:function(){return this.$element.attr("data-popover-placement")||"top"},content:function(){switch(this.dataset.popoverContent){case"lineOrder":return e.serializeOrderPopover(this.dataset.id);case"downtime":return e.serializeDowntimePopover(this.dataset.id);case"shift":return e.serializeShiftPopover(this.dataset.shift-1);case"line":return e.serializeLinePopover()}},template:'<div class="popover planning-mrp-popover"><div class="arrow"></div><div class="popover-content"></div></div>'})},$item:function(e){return e?this.$('.planning-mrp-list-item[data-id="'+e+'"]'):this.$(".planning-mrp-list-item")},serializeShifts:function(){var e=this.plan,t=this.mrp,r=this.line,i=[];if(0===r.orders.length)return i;i.push(null,{no:1,startTime:0,orders:[],downtimes:[]},{no:2,startTime:0,orders:[],downtimes:[]},{no:3,startTime:0,orders:[],downtimes:[]});var o=!1;return r.orders.forEach(function(r){if(!o){var s=e.orders.get(r.get("orderNo"));if(!s)return void(o=!0);var a=s.get("mrp"),d=Date.parse(r.get("startAt")),l=Date.parse(r.get("finishAt")),p=l-d,h=i[n.getShiftNo(d)];0===h.startTime&&(h.startTime=n.getShiftStartTime(d));var u=h.orders[h.orders.length-1],g=u?u.finishAt:h.startTime;h.orders.push({_id:r.id,orderNo:r.get("orderNo"),quantity:r.get("quantity"),incomplete:s.get("incomplete")>0,finishAt:l,margin:100*(d-g)/n.SHIFT_DURATION,width:100*p/n.SHIFT_DURATION,mrp:a,external:a!==t.id})}}),r.get("downtimes").forEach(function(e,t){var r=Date.parse(e.startAt),o=i[n.getShiftNo(r)];o.downtimes.push({_id:t,reason:e.reason,left:100*(r-o.startTime)/n.SHIFT_DURATION,width:100*e.duration/n.SHIFT_DURATION})}),i.filter(function(e){return!o&&e&&e.orders.length>0})},serializeLinePopover:function(){var e=this.line.get("hourlyPlan"),t=0,r=0,i=0;return(this.line.get("shiftData")||[]).forEach(function(e){t+=e.orderCount,r+=e.quantity,i+=e.manHours}),l({stats:{orderCount:t,quantity:r,manHours:i,hourlyPlan:e}})},serializeShiftPopover:function(e){var t=this.line.get("hourlyPlan").slice(8*e,8*e+8),r=(this.line.get("shiftData")||[])[e]||{};return d({stats:{orderCount:r.orderCount||0,quantity:r.quantity||0,manHours:r.manHours||0,hourlyPlan:t}})},serializeOrderPopover:function(e){var t=this.line.orders.get(e),r=this.plan.orders.get(t.get("orderNo")),i=Date.parse(t.get("startAt")),n=Date.parse(t.get("finishAt"));return s({lineOrder:{_id:t.id,orderNo:r.id,quantityPlanned:t.get("quantity"),quantityRemaining:r.get("quantityTodo")-r.get("quantityDone"),quantityTotal:r.get("quantityTodo"),pceTime:t.get("pceTime")/1e3,manHours:t.get("manHours")||0,startAt:i,finishAt:n,duration:(n-i)/1e3}})},serializeDowntimePopover:function(e){var t=this.line.get("downtimes")[e],r=Date.parse(t.startAt),n=r+t.duration,o=i.get(t.reason);return a({lineDowntime:{reason:o?o.getLabel():t.reason,startAt:r,finishAt:n,duration:t.duration/1e3}})},onOrderHighlight:function(e){this.$('.is-lineOrder[data-id^="'+e.orderNo+'"]').toggleClass("is-highlighted",e.state)},onIncompleteChange:function(e){this.$('.is-lineOrder[data-id^="'+e.id+'"]').toggleClass("is-incomplete",e.get("incomplete")>0)}})});