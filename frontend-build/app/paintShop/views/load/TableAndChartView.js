define(["underscore","app/i18n","app/time","app/highcharts","app/core/View","app/reports/util/formatTooltipHeader","app/reports/util/formatXAxis","app/paintShop/templates/load/reportTable","app/paintShop/templates/load/tableAndChart"],function(t,e,i,s,o,r,a,n,h){"use strict";return o.extend({template:h,initialize:function(){this.chart=null,this.isLoading=!1,this.listenTo(this.model,"request",this.onModelLoading),this.listenTo(this.model,"sync",this.onModelLoaded),this.listenTo(this.model,"error",this.onModelError),this.listenTo(this.model,"change:"+this.options.metric,this.render)},destroy:function(){null!==this.chart&&(this.chart.destroy(),this.chart=null)},afterRender:function(){this.timers.createOrUpdate&&clearTimeout(this.timers.createOrUpdate),this.timers.createOrUpdate=setTimeout(this.createOrUpdate.bind(this),1)},createOrUpdate:function(){this.timers.createOrUpdate=null,this.chart?this.updateChart():(this.createChart(),this.isLoading&&this.chart.showLoading()),this.updateTable(),this.$el.toggleClass("has-many-series",this.chart.series.length>10)},createChart:function(){const t=this.options.metric,e=this.serializeChartSeries(),o={};"min"===this.model.get("interval")?(o.type="category",o.categories=this.serializeCategories()):(o.type="datetime",o.labels=a.labels(this)),this.chart=new s.Chart({chart:{renderTo:this.$id("chart")[0],plotBorderWidth:1,spacing:[10,1,1,0]},exporting:{filename:this.t("load:report:"+t+":filename",{counter:this.options.counter}),chartOptions:{title:{text:this.t("load:report:"+t+":title",{counter:this.t("load:counters:"+this.options.counter)})},legend:{enabled:!0}},buttons:{contextButton:{align:"left"}},noDataLabels:!!e.length&&e.length*e[0].data.length>30},title:!1,noData:{},xAxis:o,yAxis:{title:!1,min:0,allowDecimals:!1,opposite:!0},tooltip:{shared:!0,valueDecimals:"losses"===this.options.metric?1:0,headerFormatter:"datetime"===o.type?r.bind(this):void 0,valueFormatter:function(t){return t.options.seconds?i.toString(t.options.seconds,!1,!1):t.y}},legend:{enabled:!1},plotOptions:{column:{borderWidth:0,dataLabels:{enabled:!1}}},series:e})},updateChart:function(){this.chart.destroy(),this.createChart()},updateTable:function(){this.$id("table").html(n({rows:this.model.get(this.options.metric)[this.options.counter].rows}))},serializeCategories:function(){const t=this.model.get(this.options.metric)[this.options.counter].rows,e=[];for(let i=0,s=Math.min(15,t.length);i<s;++i){const s=t[i];"total"!==s.id&&e.push(s.label||this.t(`report:series:${s.id}`))}return e},serializeChartSeries:function(){const{rows:e,series:i}=this.model.get(this.options.metric)[this.options.counter];if("min"===this.model.get("interval")){const t={id:this.options.metric,type:"column",name:this.t(`load:report:series:${this.options.metric}`),data:[]};for(let i=0,s=Math.min(15,e.length);i<s;++i){const s=e[i];"total"!==s.id&&t.data.push({y:s.abs,color:s.color})}return[t]}return Object.keys(i).map(e=>{var s=i[e];return t.defaults(s,{id:e,type:"column",name:s.name||this.t(`report:series:${e}`),data:[]})})},onModelLoading:function(){this.isLoading=!0,this.chart&&this.chart.showLoading()},onModelLoaded:function(){this.isLoading=!1,this.chart&&this.chart.hideLoading()},onModelError:function(){this.isLoading=!1,this.chart&&this.chart.hideLoading()}})});