// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

define(["underscore","app/i18n","app/core/View","app/core/util/bindLoadingMessage","app/reports/util/formatTooltipHeader","app/data/createSettings","app/factoryLayout/FactoryLayoutSettingCollection","../dictionaries","../QiCountReport","../views/QiCountReportFilterView","../views/QiTotalNokCountChartView","../views/QiNokCountPerDivisionChartView","../views/QiNokQtyPerFamilyChartView","app/qiResults/templates/countReportPage"],function(t,e,i,o,s,n,r,a,l,u,d,c,h,p){"use strict";return i.extend({layoutName:"page",template:p,breadcrumbs:[e.bound("qiResults","BREADCRUMBS:base"),e.bound("qiResults","BREADCRUMBS:reports:count")],actions:function(){return[{label:e.bound("qiResults","PAGE_ACTION:settings"),icon:"cogs",privileges:"QI:DICTIONARIES:MANAGE",href:"#qi/settings?tab=reports"}]},initialize:function(){var t=o(this.model,this);this.factoryLayoutSettings=n(r),this.setView(".filter-container",new u({model:t})),this.setView("#"+this.idPrefix+"-totalNokCount",new d({model:t})),this.setView("#"+this.idPrefix+"-nokCountPerDivision",new c({model:t,factoryLayoutSettings:this.factoryLayoutSettings.acquire()})),this.setView("#"+this.idPrefix+"-nokQtyPerFamily",new h({model:t})),this.listenTo(t,"filtered",this.onFiltered),this.listenTo(t,"change:selectedGroupKey",this.updateSelectedGroup),this.listenTo(t,"change:ignoredDivisions",this.updateSelectedDivisions)},destroy:function(){a.unload(),this.factoryLayoutSettings.release(),this.factoryLayoutSettings=null},load:function(t){return a.loaded?t(this.model.fetch(),this.factoryLayoutSettings.acquire().fetchIfEmpty()):a.load().then(this.model.fetch.bind(this.model),this.factoryLayoutSettings.acquire().fetchIfEmpty())},afterRender:function(){a.load(),this.factoryLayoutSettings.acquire(),this.updateSelectedGroup()},onFiltered:function(){this.promised(this.model.fetch()),this.broker.publish("router.navigate",{url:this.model.genClientUrl(),trigger:!1,replace:!0})},updateSelectedGroup:function(){var t=this.model.get("selectedGroupKey");if(!t){var e=this.model.getSelectedGroup();e&&(t=e.key)}this.$id("selectedGroup").text(t?s.call({model:this.model},t):"?")},updateSelectedDivisions:function(){var t=this.model,e=Object.keys(t.get("divisions")),i=e.filter(function(e){return!t.isIgnoredDivision(e)});this.$id("selectedDivisions").text(i.length===e.length?"":"; "+i.join(", "))}})});