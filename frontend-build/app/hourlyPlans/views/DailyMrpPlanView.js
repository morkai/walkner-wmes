// Part of <http://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

define(["underscore","app/core/View","../util/scrollIntoView","./DailyMrpPlanToolbarView","./DailyMrpPlanLinesView","./DailyMrpPlanOrdersView","./DailyMrpPlanLineOrdersView","app/hourlyPlans/templates/dailyMrpPlans/plan","app/hourlyPlans/templates/dailyMrpPlans/_overlappingLineMessage"],function(e,i,n,r,t,s,l,o,d){"use strict";return i.extend({template:o,events:{"mouseleave #-lineOrders":function(){this.$crosshair.addClass("hidden")},"mouseenter #-lineOrders":function(){this.$crosshair.removeClass("hidden")},"mousemove .dailyMrpPlan-lineOrders-list":function(e){this.$crosshair[0].style.height=this.$lineOrders.outerHeight()+6+"px",this.$crosshair[0].style.top=this.$lineOrders.position().top+"px",this.$crosshair[0].style.left=e.pageX+"px"}},initialize:function(){var i=this,n=this.model,l=n.lines,o=n.orders;i.onLineOrdersReset=e.debounce(i.toggleTimeline.bind(i),1,!1),i.listenTo(n,"reset",i.render),i.listenTo(n,"itemEntered",i.onItemEntered),i.listenTo(n,"itemLeft",i.onItemLeft),i.listenTo(n,"scrollIntoView",i.scrollIntoView),i.listenTo(n,"overlappingLine",i.addOverlappingLineMessage),i.listenTo(n.collection,"checkingOverlappingLines",i.removeOverlappingLinesMessages),i.listenTo(o,"reset",i.generatePlan),i.listenTo(o,"change:operation change:qtyPlan",i.generatePlan),i.listenTo(l,"reset",i.renderLineOrders),i.listenTo(l,"reset",i.generatePlan),i.listenTo(l,"reset change:activeFrom change:activeTo",i.onLinesChanged),i.listenTo(l,"change:activeFrom change:activeTo change:workerCount",i.generatePlan),i.listenTo(l,"lineOrderClicked",i.onLineOrderClicked),i.toolbarView=new r({model:i.model}),i.linesView=new t({model:i.model.lines}),i.ordersView=new s({model:i.model.orders}),i.setView("#"+i.idPrefix+"-toolbar",i.toolbarView),i.setView("#"+i.idPrefix+"-lines",i.linesView),i.setView("#"+i.idPrefix+"-orders",i.ordersView)},generatePlan:function(e,i){i&&i.skipGenerate||(this.timers.generatePlan&&clearTimeout(this.timers.generatePlan),this.timers.generatePlan=setTimeout(this.model.generate.bind(this.model),10))},serialize:function(){return{idPrefix:this.idPrefix,mrp:{_id:this.model.mrp.id,name:this.model.mrp.get("description")}}},afterRender:function(){this.renderLineOrders(),this.$lineOrders=this.$id("lineOrders"),this.$crosshair=this.$id("crosshair"),this.model.lines.length&&this.model.orders.length&&!this.el.querySelector(".is-lineOrder")&&this.model.generate()},renderLineOrders:function(){var e=this,i="#"+e.idPrefix+"-lineOrders";e.removeView(i),e.model.lines.forEach(function(n){var r=new l({model:n});e.listenTo(n.orders,"reset",e.onLineOrdersReset),e.insertView(i,r),r.render()}),this.toggleTimeline()},toggleTimeline:function(){this.$id("timeline").toggleClass("hidden",!this.el.querySelector(".is-lineOrder"))},onLinesChanged:function(){this.model.collection.trigger("checkOverlappingLinesRequested")},onLineOrderClicked:function(e){var i=e.lineOrder.get("orderNo");this.ordersView.selected===i?this.ordersView.unselect():this.ordersView.select(i,!0)},onItemEntered:function(e){var i=this.findItemEl(e);i.length&&(i.addClass("is-highlighted"),n(i[0]))},onItemLeft:function(e){this.findItemEl(e).removeClass("is-highlighted")},findItemEl:function(e){return"order"===e.type?this.$('.is-lineOrder[data-id^="'+e.item.id+'"]'):"lineOrder"===e.type?this.$('.is-order[data-id="'+e.item.get("orderNo")+'"]'):this.$("#NULL")},scrollIntoView:function(){this.el.scrollIntoView()},addOverlappingLineMessage:function(e){this.$id("messages").append(d({line:e.line,mrp:e.mrp,time1:e.from1+"-"+e.to1,time2:e.from2+"-"+e.to2}))},removeOverlappingLinesMessages:function(){this.$('.message[data-message="overlappingLine"]').remove()}})});