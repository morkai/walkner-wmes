// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

define(["underscore","../data/divisions","../data/downtimeReasons","../core/Model"],function(e,t,o,s){"use strict";function r(e){return e?Math.round(100*e):0}function n(e){return e?Math.round(100*e)/100:0}return s.extend({urlRoot:"/reports/4",defaults:function(){return{lossReasons:{},effAndProd:{efficiency:[],productivity:[],byDivision:{}},workTimes:{total:0,sap:0,otherWorks:0,downtimes:[],downtimeCategories:[]},machineTimes:{categories:[],machineMedian:[],work:[],operatorMedian:[]},quantities:{good:0,bad:0,losses:{}},notes:{count:0,worksheets:[]}}},initialize:function(e,t){if(!t.query)throw new Error("query option is required!");this.query=t.query},fetch:function(t){return e.isObject(t)||(t={}),t.data=e.extend(t.data||{},this.query.serializeToObject()),s.prototype.fetch.call(this,t)},parse:function(e){return this.query.updateUsers(this.resolveUsers(e.options)),{lossReasons:e.options.lossReasons,effAndProd:this.parseEffAndProd(e.results.effAndProd),workTimes:this.parseWorkTimes(e.results.workTimes),machineTimes:this.parseMachineTimes(e.results.machineTimes),quantities:this.parseQuantities(e.options.lossReasons,e.results.quantities),notes:e.results.notes}},resolveUsers:function(e){return"masters"===e.mode?e.masters:"operators"===e.mode?e.operators:[]},parseEffAndProd:function(e){var o=t.filter(function(e){return"prod"===e.get("type")}).map(function(e){return e.id}).sort(function(e,t){return e.localeCompare(t)}),s={efficiency:[],productivity:[],byDivision:{}};return o.forEach(function(e){s.byDivision[e]=[]}),Object.keys(e).forEach(function(t){var n=e[t],i=+t;s.efficiency.push({x:i,y:r(n.eff)}),s.productivity.push({x:i,y:r(n.prod)}),o.forEach(function(e){s.byDivision[e].push({x:i,y:r(n[e])})})}),s},parseWorkTimes:function(e){var t={total:[n(e.total)],sap:[n(e.sap)],otherWorks:[n(e.otherWorks)],downtimes:[],downtimeCategories:[]},s=[];return Object.keys(e.downtimes).forEach(function(t){var r=o.get(t);s.push({shortText:t,longText:r?r.getLabel():t,value:n(e.downtimes[t])})}),s.sort(function(e,t){return t.value-e.value}).forEach(function(e){t.downtimeCategories.push(e.shortText),t.downtimes.push({name:e.longText,y:e.value})}),t},parseMachineTimes:function(e){var t={categories:[],machineMedian:[],work:[],operatorMedian:[]},o=Object.keys(e),s=o.length>10;return o.forEach(function(o,r){var i=e[o];t.categories.push(s?r.toString(36).toUpperCase():o),s?(t.machineMedian.push({y:n(i.machineAdjustingMedian),name:o}),t.work.push({y:n(i.work),name:o}),t.operatorMedian.push({y:n(i.operatorAdjustingMedian),name:o})):(t.machineMedian.push(n(i.machineAdjustingMedian)),t.work.push(n(i.work)),t.operatorMedian.push(n(i.operatorAdjustingMedian)))}),t},parseQuantities:function(e,t){var o={total:[n(t.good+t.bad)],good:[n(t.good)],bad:[n(t.bad)],losses:[],lossCategories:[]},s=[];return Object.keys(t.losses).forEach(function(o){s.push({shortText:o,longText:e[o]||o,value:n(t.losses[o])})}),s.sort(function(e,t){return t.value-e.value}).forEach(function(e){o.lossCategories.push(e.shortText),o.losses.push({name:e.longText,y:n(e.value)})}),o}})});