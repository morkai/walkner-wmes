// Copyright (c) 2014, ≈Åukasz Walukiewicz <lukasz@walukiewicz.eu>. Some Rights Reserved.
// Licensed under CC BY-NC-SA 4.0 <http://creativecommons.org/licenses/by-nc-sa/4.0/>.
// Part of the walkner-wmes project <http://lukasz.walukiewicz.eu/p/walkner-wmes>

define(["js2form","app/core/View","app/core/templates/colorPicker","bootstrap-colorpicker"],function(t,e,i){"use strict";return e.extend({clientUrl:"#settings",defaultTab:"default",updateSettingField:function(){},events:{"click a[data-tab]":function(t){var e=t.target.dataset.tab;return this.broker.publish("router.navigate",{url:this.clientUrl+"?tab="+e,trigger:!1,replace:!0}),this.changeTab(e),!1},"change .colorpicker-component > .form-control":function(t){t.originalEvent&&this.$(t.target).closest(".colorpicker-component").colorpicker("setValue",t.target.value)},"keyup .form-control":function(t){var e=t.target,i=e.dataset.value;e.dataset.value=e.value,e.value!==i&&this.scheduleUpdateSetting(e,1200)},'change .form-control, input[type="checkbox"], input[type="radio"]':function(t){this.scheduleUpdateSetting(t.target,300)}},initialize:function(){this.currentTab=this.options.initialTab,this.inProgress={},this.listenTo(this.settings,"add change",this.onSettingsChange)},destroy:function(){var t=this.$(".colorpicker-component");t.length&&t.colorpicker("destroy")},serialize:function(){return{idPrefix:this.idPrefix,renderColorPicker:i}},afterRender:function(){this.$(".colorpicker-component").colorpicker();var e=this,i={};this.settings.forEach(function(t){var a=t.get("value");if(Array.isArray(a)){var n=e.el.querySelector('input[name="'+t.id+'"]');"SELECT"!==n.tagName&&"checkbox"!==n.type&&(a=String(a))}else a=String(a);i[t.id]=a}),t(this.el,i),this.$("[name]").each(function(){this.dataset.value=this.value}),this.changeTab(this.currentTab||this.defaultTab)},changeTab:function(t){this.$(".list-group-item.active").removeClass("active"),this.$(".list-group-item[data-tab="+t+"]").addClass("active"),this.$(".panel-body.active").removeClass("active"),this.$(".panel-body[data-tab="+t+"]").addClass("active"),this.currentTab=t},onSettingsChange:function(t){if(t&&!this.inProgress[t.id]){var e=this.$('.form-control[name="'+t.id+'"]');e.length&&e.val(t.get("value")||"");var i=e.parent();if(i.hasClass("colorpicker-component")&&i.colorpicker("setValue",t.get("value")),!e.length){var a=this.$('input[name="'+t.id+'"]');if(a.length){if("checkbox"===a[0].type)return void this.updateCheckboxSetting(t,a);if("radio"===a[0].type)return void this.updateRadioSetting(t,a)}this.updateSettingField(t)}}},updateCheckboxSetting:function(t,e){var i=t.get("value");if(1===e.length)e[0].checked=!!i;else{Array.isArray(i)||(i=i?[i]:[]);for(var a=0;a<e.length;++a){var n=e[0];n.checked=-1!==i.indexOf(n.value)}}},updateRadioSetting:function(t,e){e.val(t.get("value"))},getValueFromSettingField:function(t){return"checkbox"===t.type?this.getValueFromCheckboxSetting(t):"radio"===t.type?this.getValueFromRadioSetting(t):t.value},getValueFromCheckboxSetting:function(t){var e=this.$('input[name="'+t.name+'"]');if(0===e.length)return null;if(1===e.length)return this.getCheckboxValue(e[0]);for(var i=[],a=0;a<e.length;++a){var n=this.getCheckboxValue(e[a]);n&&i.push(n)}return i},getCheckboxValue:function(t){return"true"===t.value?t.checked:"1"===t.value?t.checked?1:0:t.checked?t.value:null},getValueFromRadioSetting:function(t){return this.$('input[name="'+t.name+'"]:checked').val()},scheduleUpdateSetting:function(t,e){var i=t.name,a=this.getValueFromSettingField(t);this.timers[i]&&clearTimeout(this.timers[i]),this.timers[i]=setTimeout(this.updateSetting.bind(this,i,a),e)},updateSetting:function(t,e){clearTimeout(this.timers[t]),this.inProgress[t]||(this.inProgress[t]=0),++this.inProgress[t];var i=this;this.promised(this.settings.update(t,e)).always(function(){--i.inProgress[t],i.onSettingsChange(i.settings.get(t))})}})});