// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

define(["underscore","app/viewport","app/core/views/FilterView","app/core/util/uuid","app/kanban/layouts","app/kanban/KanbanEntryCollection","app/kanbanComponents/KanbanComponentCollection","app/kanbanSupplyAreas/KanbanSupplyAreaCollection","app/kanbanPrintQueues/templates/filter","app/core/util/ExpandableSelect"],function(t,n,i,e,a,o,r,s,u){"use strict";return i.extend({template:u,defaultFormData:{todo:""},termToForm:{todo:function(t,n,i){i[t]=n.args[1].toString()}},events:t.assign({"click #-groupByWorkstations":function(t){t.currentTarget.classList.toggle("active"),this.model.setGroupByWorkstations(t.currentTarget.classList.contains("active"))},"click #-quickPrint-submit":function(){var t=this.$id("quickPrint-kanbanIds").val().split(/[^0-9]/).filter(function(t){return!!t.length}).map(function(t){return+t}),n=this.$id("quickPrint-layouts").val()||[];t.length&&n.length&&this.quickPrint(n,t)}},i.prototype.events),destroy:function(){i.prototype.destroy.apply(this,arguments),this.$(".is-expandable").expandableSelect("destroy")},afterRender:function(){i.prototype.afterRender.apply(this,arguments),this.toggleButtonGroup("todo"),this.$id("groupByWorkstations").toggleClass("active",this.model.getGroupByWorkstations()),this.$(".is-expandable").expandableSelect()},serializeFormToQuery:function(t,n){var i=this,e=i.getButtonGroupValue("todo");e||(e="true",i.$id("todo").find('input[value="true"]').prop("checked",!0),i.toggleButtonGroup("todo")),t.push({name:"eq",args:["todo","true"===e]}),n.sort="true"===e?{todo:1,createdAt:1}:{todo:1,createdAt:-1},n.limit=10},serialize:function(){return t.assign(i.prototype.serialize.apply(this,arguments),{layouts:a})},failQuickPrint:function(){n.msg.show({type:"error",time:2500,text:this.t("quickPrint:msg:failure")}),this.finishQuickPrint()},finishQuickPrint:function(){this.$id("quickPrint").find("input, select, button").prop("disabled",!1),this.$id("quickPrint-submit").find(".fa").removeClass("fa-spinner fa-spin").addClass("fa-print"),this.$id("quickPrint-kanbanIds").val("")},quickPrint:function(i,e){function a(t){var n=c.ajax({url:"/kanban/components?exclude(updates,changes)&_id=in=("+t+")"});n.fail(c.failQuickPrint.bind(c)),n.done(function(t){t.collection.forEach(function(t){p[t._id]=t}),u(Object.keys(d))})}function u(n){var e=c.ajax({url:"/kanban/supplyAreas?_id=in=("+n+")"});e.fail(c.failQuickPrint.bind(c)),e.done(function(n){n.collection.forEach(function(t){d[t._id]=t}),c.doQuickPrint(i,l,new o(t.values(l),{supplyAreas:new s(t.values(d)),components:new r(t.values(p))}))})}var c=this,l={},p={},d={};c.$id("quickPrint").find("input, select, button").prop("disabled",!0),c.$id("quickPrint-submit").find(".fa").removeClass("fa-print").addClass("fa-spinner fa-spin"),function(t){var i=c.ajax({url:"/kanban/entries?exclude(updates,changes)&kanbanId=in=("+t+")"});i.fail(c.failQuickPrint.bind(c)),i.done(function(i){if(!i.totalCount)return n.msg.show({type:"error",time:2500,text:c.t("quickPrint:msg:empty")}),c.finishQuickPrint();var e={};i.collection.forEach(function(n){n.kanbanId.forEach(function(i){-1!==t.indexOf(i)&&(l[i]=n,e[n.nc12]=1,d[n.supplyArea]=1)})}),a(Object.keys(e))})}(e)},doQuickPrint:function(t,n,i){var a=this,o=[];Object.keys(n).forEach(function(a){var r=n[a]._id,s=i.get(r).serialize(i),u=t.filter(function(t){return"kk"===s.kind&&"kk"===t||"kk"!==s.kind&&"kk"!==t});a=+a,s.lines.forEach(function(t,n){var i=n*s.kanbanQtyUser,r=n*s.kanbanQtyUser+s.kanbanQtyUser,c=s.newStorageBin||s.storageBin;-1!==s.kanbanId.slice(i,r).indexOf(a)&&o.push({_id:e(),line:t,kanbans:[a],layouts:u,data:{ccn:s._id,nc12:s.nc12,description:s.description,supplyArea:s.supplyArea,family:s.family,componentQty:s.componentQty,storageBin:c,minBinQty:s.minBinQty,maxBinQty:s.maxBinQty,replenQty:s.replenQty,workstations:s.workstations,locations:s.locations}})})});var r=a.ajax({method:"POST",url:"/kanban/printQueues",data:JSON.stringify({_id:e(),jobs:o})});r.fail(a.failQuickPrint.bind(a)),r.done(function(t){a.model.get(t._id)||a.model.add(t),t=a.model.get(t._id),a.model.trigger("print:specific",t,t.get("jobs"),!1),a.finishQuickPrint()})}})});