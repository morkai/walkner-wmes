// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const countReport = require('./countReport');

module.exports = (app, module) =>
{
  const {
    user,
    reports,
    express,
    OshTalk,
    KaizenSection,
    KaizenTopic
  } = module;

  const canView = user.auth('LOCAL', 'USER');
  const canManage = user.auth('USER');

  express.get(
    '/oshTalks',
    canView,
    prepareForBrowse,
    express.crud.browseRoute.bind(null, app, OshTalk)
  );

  express.get(
    '/oshTalks;export.:format?',
    canView,
    prepareForBrowse,
    prepareForExport,
    express.crud.exportRoute.bind(null, app, {
      filename: 'WMES-OSH_TALKS',
      freezeRows: 1,
      freezeColumns: 1,
      columns: {
        rid: 10,
        date: 'date',
        auditor: 30,
        section: 20,
        topics: 40,
        participants: 40
      },
      serializeRow: exportOshTalk,
      model: OshTalk
    })
  );

  express.get('/oshTalks;rid', canView, findByRidRoute);

  express.post(
    '/oshTalks',
    canManage,
    canAdd,
    prepareForAdd,
    express.crud.addRoute.bind(null, app, OshTalk)
  );

  express.get('/oshTalks/:id', canView, express.crud.readRoute.bind(null, app, {
    model: OshTalk,
    idProperty: req => /^[0-9]+$/.test(req.params.id) ? 'rid' : '_id'
  }));

  express.put(
    '/oshTalks/:id',
    canManage,
    canEdit,
    prepareForEdit,
    express.crud.editRoute.bind(null, app, OshTalk)
  );

  express.delete(
    '/oshTalks/:id',
    canManage,
    canDelete,
    express.crud.deleteRoute.bind(null, app, OshTalk)
  );

  express.get(
    '/oshTalks/reports/count',
    canView,
    reports.helpers.sendCachedReport.bind(null, 'wmes-oshTalks/count'),
    countReportRoute
  );

  function prepareForBrowse(req, res, next)
  {
    if (!req.session || !req.session.user)
    {
      return next();
    }

    req.rql.selector.args.forEach(term =>
    {
      if (term.name === 'eq' && term.args[0] === 'users' && term.args[1] === 'mine')
      {
        term.args[1] = req.session.user._id;
      }
    });

    next();
  }

  async function prepareForExport(req, res, next)
  {
    req.dictionaries = {
      sections: {},
      topics: {}
    };

    const [sections, topics] = await Promise.all([
      KaizenSection
        .find({})
        .select({name: 1})
        .lean()
        .exec(),
      KaizenTopic
        .find({})
        .select({fullName: 1})
        .lean()
        .exec()
    ]);

    sections.forEach(section =>
    {
      req.dictionaries.sections[section._id] = section.name;
    });

    topics.forEach(topic =>
    {
      req.dictionaries.topics[topic._id] = topic.fullName;
    });

    next();
  }

  async function canAdd(req, res, next)
  {
    const sessionUser = req.session.user;

    if (user.isAllowedTo(sessionUser, ['OSH_TOPICS:MANAGE']))
    {
      return next();
    }

    const section = await KaizenSection
      .findOne({'auditors.id': sessionUser._id})
      .select({_id: 1})
      .lean()
      .exec();

    if (section)
    {
      return next();
    }

    next(app.createError('Not allowed.', 'AUTH', 403));
  }

  async function canEdit(req, res, next)
  {
    const sessionUser = req.session.user;

    if (user.isAllowedTo(sessionUser, ['OSH_TOPICS:MANAGE']))
    {
      return next();
    }

    req.model = await OshTalk.findById(req.params.id).exec();

    if (req.model.auditor.id === sessionUser._id)
    {
      return next();
    }

    next(app.createError('Not allowed.', 'AUTH', 403));
  }

  async function canDelete(req, res, next)
  {
    const sessionUser = req.session.user;

    if (user.isAllowedTo(sessionUser, 'OSH_TOPICS:MANAGE'))
    {
      return next();
    }

    req.model = await OshTalk.findById(req.params.id).exec();

    if (req.model.creator.id === sessionUser._id
      && Date.now() - req.model.updatedAt < 8 * 3600 * 1000)
    {
      return next();
    }

    next(app.createError('Not allowed.', 'AUTH', 403));
  }

  function prepareForAdd(req, res, next)
  {
    const {body} = req;

    body.creator = user.createUserInfo(req.session.user, req);
    body.updater = body.creator;

    return next();
  }

  function prepareForEdit(req, res, next)
  {
    const {body} = req;

    body.updater = user.createUserInfo(req.session.user, req);

    return next();
  }

  function findByRidRoute(req, res, next)
  {
    const rid = parseInt(req.query.rid, 10);

    if (isNaN(rid) || rid <= 0)
    {
      return res.sendStatus(400);
    }

    OshTalk.findOne({rid: rid}).select({_id: 1}).lean().exec((err, doc) =>
    {
      if (err)
      {
        return next(err);
      }

      if (!doc)
      {
        return res.sendStatus(404);
      }

      res.json(doc._id);
    });
  }

  function exportOshTalk(doc, req)
  {
    return {
      rid: doc.rid,
      date: doc.date,
      auditor: doc.auditor.label,
      section: req.dictionaries.sections[doc.section] || doc.section,
      status: doc.status,
      topics: doc.topics.map(t => req.dictionaries.topics[t] || t).join('; '),
      participants: doc.participants.map(p => p.label).join('; ')
    };
  }

  function countReportRoute(req, res, next)
  {
    const query = req.query;
    const options = {
      fromTime: reports.helpers.getTime(query.from) || null,
      toTime: reports.helpers.getTime(query.to) || null,
      interval: reports.helpers.getInterval(query.interval, 'month'),
      sections: _.isEmpty(query.sections) ? [] : query.sections.split(','),
      auditor: query.auditor || null
    };

    reports.helpers.generateReport(
      app,
      reports,
      countReport,
      'wmes-oshTalks/count',
      req.reportHash,
      options,
      (err, reportJson) =>
      {
        if (err)
        {
          return next(err);
        }

        res.type('json');
        res.send(reportJson);
      }
    );
  }
};
