// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const resolveBestOperation = require('util/resolveBestOperation');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    orgUnits,
    Order,
    ProdShiftOrder,
    CtBalancingPce
  } = module;

  const balancingPce = new CtBalancingPce({
    createdBy: user.createUserInfo(req.session.user, req),
    createdAt: new Date(),
    line: req.body.line,
    station: req.body.station,
    startedAt: req.body.startedAt,
    finishedAt: req.body.finishedAt,
    duration: Date.parse(req.body.finishedAt) - Date.parse(req.body.startedAt)
  });

  const prodLine = orgUnits.getByTypeAndId('prodLine', balancingPce.line);

  if (!prodLine)
  {
    return next(app.createError('Invalid line.', 'INPUT', 400));
  }

  if (!Number.isSafeInteger(balancingPce.station) || balancingPce.station < 0 || balancingPce.station > 10)
  {
    return next(app.createError('Invalid station.', 'INPUT', 400));
  }

  if (!Number.isSafeInteger(balancingPce.duration))
  {
    return next(app.createError('Invalid times.', 'INPUT', 400));
  }

  try
  {
    const order = {
      _id: req.body.order,
      nc12: '',
      name: '',
      description: '',
      mrp: '',
      qty: 0,
      workerCount: 0,
      sapTaktTime: 0,
      pso: null,
      shift: null,
      operation: null
    };

    const conditions = {prodLine: prodLine._id};
    const sort = {};

    if (req.body.order)
    {
      conditions.orderId = req.body.order;
      sort.startedAt = -1;
    }
    else
    {
      sort.prodLine = 1;
      sort.startedAt = -1;
    }

    const pso = await ProdShiftOrder
      .findOne(conditions)
      .select({
        prodShift: 1,
        date: 1,
        shift: 1,
        workerCount: 1,
        sapTaktTime: 1,
        operationNo: 1,
        'orderData.operations': 1,
        'orderData.nc12': 1,
        'orderData.name': 1,
        'orderData.description': 1,
        'orderData.mrp': 1,
        'orderData.qty': 1
      })
      .sort(sort)
      .lean()
      .exec();

    if (pso)
    {
      order.nc12 = pso.orderData.nc12;
      order.name = pso.orderData.name;
      order.description = pso.orderData.description;
      order.mrp = pso.orderData.mrp;
      order.qty = pso.qty;
      order.workerCount = pso.workerCount;
      order.sapTaktTime = pso.sapTaktTime;
      order.pso = pso._id;
      order.shift = {
        _id: pso.prodShift,
        no: pso.shift,
        date: pso.date
      };
      order.operation = pickOperation(pso.orderData.operations[pso.operationNo] || {no: pso.operationNo});
    }
    else
    {
      const sapOrder = await Order
        .findById(req.body.order)
        .select({
          nc12: 1,
          name: 1,
          description: 1,
          mrp: 1,
          qty: 1,
          operations: 1
        })
        .lean()
        .exec();

      if (!sapOrder)
      {
        throw app.createError('Invalid order.', 'INPUT', 400);
      }

      order.nc12 = sapOrder.nc12;
      order.name = sapOrder.name;
      order.description = sapOrder.description;
      order.mrp = sapOrder.mrp;
      order.qty = sapOrder.qty;

      const op = resolveBestOperation(sapOrder.operations);

      if (op)
      {
        order.operation = pickOperation(op);
        order.workerCount = Math.max(Math.round(op.laborTime / op.machineTime), 0) || 0;
        order.sapTaktTime = Math.max(Math.round(op.laborTime / order.workerCount * 3600 / 100), 1) || 0;
      }
    }

    balancingPce.order = order;

    await balancingPce.save();
  }
  catch (err)
  {
    return next(err);
  }

  const leanBalancingPce = balancingPce.toJSON();

  res.json(leanBalancingPce);

  app.broker.publish(`${CtBalancingPce.TOPIC_PREFIX}.updated`, {
    added: [leanBalancingPce]
  });
};

function pickOperation(op)
{
  return {
    no: op.no,
    workCenter: op.workCenter || '',
    name: op.name || '',
    machineSetupTime: op.machineSetupTime || 0,
    laborSetupTime: op.laborSetupTime || 0,
    machineTime: op.machineTime || 0,
    laborTime: op.laborTime || 0
  };
}
