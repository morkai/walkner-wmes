// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const duplicates = new Map();

module.exports = (app, module, req, res, next) =>
{
  const {
    CtCart,
    CtTodo
  } = module;

  const todo = new CtTodo({
    line: req.params.line,
    station: parseInt(req.params.station, 10),
    action: req.query.id ? 'cart' : req.query.in ? 'input' : null
  });

  if (!todo.action)
  {
    return next(app.createError('Invalid action type.', 'INPUT', 400));
  }

  if (isNaN(todo.station) || todo.station < 1 || todo.station > 7)
  {
    return next(app.createError('Invalid station.', 'INPUT', 400));
  }

  const device = req.query.mac || '';

  if (!/^[A-F0-9]{12}$/.test(device))
  {
    return next(app.createError('Invalid device ID.', 'INPUT', 400));
  }

  if (todo.action === 'input')
  {
    todo.data.state = req.query.in === '1';

    return save(todo);
  }

  if (todo.action === 'cart')
  {
    todo.data.cart = req.query.id;

    if (!todo.data.cart)
    {
      return next(app.createError('Invalid card ID.', 'INPUT', 400));
    }

    const cachedCart = module.cartCache.get(todo.data.cart);

    if (cachedCart)
    {
      todo.data.cart = cachedCart;

      checkDup(device, todo);
    }
    else
    {
      CtCart.findOne({cards: todo.data.cart}).lean().exec((err, cart) =>
      {
        if (err)
        {
          return next(err);
        }

        if (cart)
        {
          module.cartCache.set(todo.data.cart, cart.cards[0]);

          todo.data.cart = cart.cards[0];
        }
        else
        {
          module.cartCache.set(todo.data.cart, todo.data.cart);
        }

        checkDup(device, todo);
      });
    }
  }

  function save(todo)
  {
    todo.save(err =>
    {
      if (err)
      {
        return next(err);
      }

      res.sendStatus(204);
    });
  }

  function checkDup(device, todo)
  {
    const dupKey = `${device}:${todo.station}`;

    if (duplicates.get(dupKey) === todo.data.cart)
    {
      return res.sendStatus(204);
    }

    duplicates.set(dupKey, todo.data.cart);

    save(todo);
  }
};
