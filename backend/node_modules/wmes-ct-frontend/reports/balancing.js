// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const median = require('util/median');

exports.id = 'wmes-ct/balancing';

exports.models = [
  require('wmes-ct-frontend/models/ctBalancingPce')
];

exports.report = (app, {CtBalancingPce}, options, done) =>
{
  const results = {
    options,
    stations: {
      0: createEmptyStation(0)
    }
  };

  step(
    function()
    {
      const conditions = {...options.selector};

      if (!conditions.startedAt && !conditions.line && !conditions['order._id'])
      {
        return this.skip();
      }

      const cursor = CtBalancingPce
        .find(conditions)
        .select({
          station: 1,
          d: 1,
          'order.sapTaktTime': 1
        })
        .lean()
        .cursor();

      const next = _.once(this.next());

      cursor.on('error', next);
      cursor.on('end', next);
      cursor.on('data', handlePce);
    },
    function(err)
    {
      if (err)
      {
        return done(err);
      }

      results.stations = Object.values(results.stations);

      results.stations.forEach(s =>
      {
        s.avg = Math.round(s.sum / s.cnt * 1000) / 1000;
        s.med = Math.round(median(s.med, false) * 1000) / 1000;
        s.sum = Math.round(s.sum * 1000) / 1000;
        s.stt = Math.round((s.stt[1] ? (s.stt[0] / s.stt[1]) : 0) * 1000) / 1000;
      });

      results.stations.sort((a, b) => a.no === 0 ? 1 : b.no === 0 ? -1 : (a.no - b.no));

      done(null, results);
    }
  );

  function handlePce(pce)
  {
    if (!results.stations[pce.station])
    {
      results.stations[pce.station] = createEmptyStation(pce.station);
    }

    const stt = pce.order && pce.order.sapTaktTime || 0;
    const d = pce.d;

    [0, pce.station].forEach(station =>
    {
      const s = results.stations[station];

      s.cnt += 1;
      s.sum += d;
      s.min = Math.min(s.min, d);
      s.max = Math.max(s.max, d);
      s.med.push(d);

      if (stt)
      {
        s.stt[0] += stt;
        s.stt[1] += 1;
      }
    });
  }

  function createEmptyStation(station)
  {
    return {
      no: station,
      cnt: 0,
      sum: 0,
      min: Number.MAX_SAFE_INTEGER,
      max: Number.MIN_SAFE_INTEGER,
      avg: 0,
      med: [],
      stt: [0, 0]
    };
  }
};
