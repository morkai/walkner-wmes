// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const {clearCachedReports} = require('reports/routes/helpers');
const axios = require('axios');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  messengerClientId: 'messenger/client',
  reportsId: 'reports',
  settingsId: 'settings',
  orgUnitsId: 'orgUnits',
  clientsId: 'wmes-clients'
};

exports.models = [
  require('./models/ctOrderGroup'),
  require('./models/ctMrpConfig'),
  require('./models/ctUpphQuarterlyConfig'),
  require('./models/ctBalancingPce'),
  require('wmes-ct-backend/models/ctLine'),
  require('wmes-ct-backend/models/ctCart'),
  require('wmes-ct-backend/models/ctPce'),
  require('wmes-ct-backend/models/ctTodo'),
  require('orders/models/order'),
  require('orders/models/component'),
  require('prodShiftOrders/models/prodShiftOrder'),
  require('pings/models/ping')
];

exports.userPrivileges = [
  'CT:MANAGE:ORDER_GROUPS'
];

exports.republishTopics = [
  'ct.lines.added', 'ct.lines.edited', 'ct.lines.deleted',
  'ct.carts.added', 'ct.carts.edited', 'ct.carts.deleted',
  'ct.orderGroups.added', 'ct.orderGroups.edited', 'ct.orderGroups.deleted',
  'ct.mrpConfigs.added', 'ct.mrpConfigs.edited', 'ct.mrpConfigs.deleted',
  'ct.state.updated',
  'ct.pces.saved',
  'ct.todos.saved', 'ct.todos.ignored',
  'ct.balancing.pces.updated'
];

exports.recordTopics = {
  debug: [
    'ct.lines.added', 'ct.lines.edited',
    'ct.carts.added', 'ct.carts.edited',
    'ct.orderGroups.added', 'ct.orderGroups.edited',
    'ct.mrpConfigs.added', 'ct.mrpConfigs.edited'
  ],
  warning: [
    'ct.lines.deleted',
    'ct.carts.deleted',
    'ct.orderGroups.deleted',
    'ct.mrpConfigs.deleted'
  ]
};

exports.requiredModules = 'mongoose';

exports.optionalModules = {
  'user messengerClient express settings orgUnits': require('./routes')
};

exports.start = (app, module) =>
{
  const {
    Ping,
    CtTodo,
    CtLine,
    CtCart,
    CtBalancingPce
  } = module;

  module.cartCache = new Map();

  module.lines = new Map();

  app.broker.subscribe('app.started', reloadLines);
  app.broker.subscribe('production.synced.**', onProductionSynced);
  app.broker.subscribe('production.taktTime.snChecked.**', onSnChecked);
  app.broker.subscribe('downtimeReasons.*', onDowntimeReasonUpdated);
  app.broker.subscribe(`${CtCart.TOPIC_PREFIX}.*`, onCartChanged);
  app.broker.subscribe(`${CtLine.TOPIC_PREFIX}.*`, onLineChanged);
  app.broker.subscribe('settings.updated.ct.reports.results.**', onResultsReportSettingsChanged);
  app.broker.subscribe(`${CtBalancingPce.TOPIC_PREFIX}.updated`, onBalancingPceUpdated);

  function onProductionSynced({prodLine, types})
  {
    if (types.includes('endWork') || types.includes('changeShift'))
    {
      return createTodo(prodLine, 'reset');
    }

    if (types.includes('changeOrder') || types.includes('correctOrder'))
    {
      return createTodo(prodLine, types.includes('changeOrder') ? 'changeOrder' : 'correctOrder');
    }
  }

  function onSnChecked({serialNumber})
  {
    if (!serialNumber.prodShiftOrder || !module.lines.has(serialNumber.prodLine))
    {
      return;
    }

    const todo = new CtTodo({
      time: serialNumber.scannedAt,
      line: serialNumber.prodLine,
      station: serialNumber.station,
      action: 'sn',
      data: {
        prodShiftOrder: serialNumber.prodShiftOrder,
        orderNo: serialNumber.orderNo,
        serialNo: serialNumber._id
      }
    });

    todo.save(err =>
    {
      if (err)
      {
        module.error(err, 'Failed to create SN action.', {todo: todo.toJSON()});
      }
    });
  }

  function onDowntimeReasonUpdated()
  {
    app.broker.publish('ct.downtimeReasonUpdated');
  }

  function createTodo(line, action)
  {
    if (!module.lines.has(line))
    {
      return;
    }

    const todo = new CtTodo({line, action});

    todo.save(err =>
    {
      if (err)
      {
        module.error(err, 'Failed to create order action.', {todo: todo.toJSON()});
      }
    });
  }

  function onCartChanged({model})
  {
    module.cartCache.clear();

    if (model.type === 'balluff')
    {
      scheduleBalluffLinesRestart();
    }
  }

  function onLineChanged({model})
  {
    reloadLines();

    if (model.type === 'balluff')
    {
      restartRemoteBalluff(model._id);
    }
  }

  function reloadLines()
  {
    CtLine.find({active: true}).select({_id: 1, type: 1}).lean().exec((err, lines) =>
    {
      if (err)
      {
        return module.error(err, `Failed to reload lines.`);
      }

      module.lines.clear();

      lines.forEach(line => module.lines.set(line._id, line.type));
    });
  }

  function onResultsReportSettingsChanged()
  {
    clearCachedReports('wmes-ct/results');
  }

  function onBalancingPceUpdated()
  {
    clearCachedReports('wmes-ct/balancing');
  }

  async function restartRemoteBalluff(line)
  {
    const clients = app[module.config.clientsId];

    if (!clients || !clients.config.apiKey)
    {
      return;
    }

    try
    {
      const ping = await Ping
        .findOne({
          path: `/ct/lines/${line}`,
          time: {$gt: new Date(Date.now() - 7 * 24 * 3600 * 1000)},
          'headers.user-agent': /^wmes-client/
        })
        .select({'user.ip': 1})
        .sort({path: 1, time: -1})
        .lean()
        .exec();

      if (ping)
      {
        await axios.get(`https://${ping.user.ip}/restartApp?id=ct-balluff`, {
          headers: {
            'X-Api-Key': clients.config.apiKey
          },
          httpsAgent: clients.httpsAgent
        });

        module.info('Restarted a remote balluff client.', {
          line,
          clientIp: ping.user.ip
        });
      }
    }
    catch (err)
    {
      module.error(err, 'Failed to restart a remote balluff client.');
    }
  }

  function scheduleBalluffLinesRestart()
  {
    clearTimeout(scheduleBalluffLinesRestart.timer);
    scheduleBalluffLinesRestart.timer = setTimeout(restartBalluffLines, 60000);
  }

  function restartBalluffLines()
  {
    module.lines.forEach((lineType, lineId) =>
    {
      if (lineType === 'balluff')
      {
        restartRemoteBalluff(lineId);
      }
    });
  }
};
