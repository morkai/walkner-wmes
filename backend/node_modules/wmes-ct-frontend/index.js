// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  messengerClientId: 'messenger/client',
  reportsId: 'reports',
  settingsId: 'settings',
  orgUnitsId: 'orgUnits'
};

exports.models = [
  require('./models/ctOrderGroup'),
  require('./models/ctMrpConfig'),
  require('wmes-ct-backend/models/ctLine'),
  require('wmes-ct-backend/models/ctCart'),
  require('wmes-ct-backend/models/ctPce'),
  require('wmes-ct-backend/models/ctTodo')
];

exports.republishTopics = [
  'ct.lines.added', 'ct.lines.edited', 'ct.lines.deleted',
  'ct.carts.added', 'ct.carts.edited', 'ct.carts.deleted',
  'ct.orderGroups.added', 'ct.orderGroups.edited', 'ct.orderGroups.deleted',
  'ct.mrpConfigs.added', 'ct.mrpConfigs.edited', 'ct.mrpConfigs.deleted',
  'ct.state.updated',
  'ct.pces.saved',
  'ct.todos.saved', 'ct.todos.ignored'
];

exports.recordTopics = {
  debug: [
    'ct.lines.added', 'ct.lines.edited',
    'ct.carts.added', 'ct.carts.edited',
    'ct.orderGroups.added', 'ct.orderGroups.edited',
    'ct.mrpConfigs.added', 'ct.mrpConfigs.edited'
  ],
  warning: [
    'ct.lines.deleted',
    'ct.carts.deleted',
    'ct.orderGroups.deleted',
    'ct.mrpConfigs.deleted'
  ]
};

exports.requiredModules = 'mongoose';

exports.optionalModules = {
  'user messengerClient express settings orgUnits': require('./routes')
};

exports.start = (app, module) =>
{
  const {CtTodo, CtLine} = module;

  module.cartCache = new Map();

  module.lines = new Set();

  app.broker.subscribe('app.started', reloadLines);
  app.broker.subscribe('production.synced.**', onProductionSynced);
  app.broker.subscribe('production.taktTime.snChecked.**', onSnChecked);
  app.broker.subscribe('downtimeReasons.*', onDowntimeReasonUpdated);
  app.broker.subscribe('ct.carts.*', onCartChanged);
  app.broker.subscribe('ct.lines.*', onLineChanged);
  app.broker.subscribe('settings.updated.ct.reports.results.**', onResultsReportSettingsChanged);

  function onProductionSynced({prodLine, types})
  {
    if (types.includes('endWork') || types.includes('changeShift'))
    {
      return createTodo(prodLine, 'reset');
    }

    if (types.includes('changeOrder') || types.includes('correctOrder'))
    {
      return createTodo(prodLine, types.includes('changeOrder') ? 'changeOrder' : 'correctOrder');
    }
  }

  function onSnChecked({serialNumber})
  {
    if (!module.lines.has(serialNumber.prodLine))
    {
      return;
    }

    const todo = new CtTodo({
      time: serialNumber.scannedAt,
      line: serialNumber.prodLine,
      station: serialNumber.station,
      action: 'sn',
      data: {
        prodShiftOrder: serialNumber.prodShiftOrder,
        orderNo: serialNumber.orderNo,
        serialNo: serialNumber._id
      }
    });

    todo.save(err =>
    {
      if (err)
      {
        module.error(err, 'Failed to create SN action.', {todo: todo.toJSON()});
      }
    });
  }

  function onDowntimeReasonUpdated()
  {
    app.broker.publish('ct.downtimeReasonUpdated');
  }

  function createTodo(line, action)
  {
    if (!module.lines.has(line))
    {
      return;
    }

    const todo = new CtTodo({line, action});

    todo.save(err =>
    {
      if (err)
      {
        module.error(err, 'Failed to create order action.', {todo: todo.toJSON()});
      }
    });
  }

  function onCartChanged()
  {
    module.cartCache.clear();
  }

  function onLineChanged()
  {
    reloadLines();
  }

  function reloadLines()
  {
    CtLine.find({active: true}).select({_id: 1}).lean().exec((err, lines) =>
    {
      if (err)
      {
        return module.error(err, `Failed to reload lines.`);
      }

      module.lines.clear();

      lines.forEach(line => module.lines.add(line._id));
    });
  }

  function onResultsReportSettingsChanged()
  {
    const reports = app[module.config.reportsId];

    if (reports)
    {
      reports.clearCachedReports('wmes-ct/results');
    }
  }
};
