// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  messengerClientId: 'messenger/client'
};

exports.models = [
  require('wmes-ct-backend/models/ctLine'),
  require('wmes-ct-backend/models/ctPce'),
  require('wmes-ct-backend/models/ctTodo')
];

exports.republishTopics = [
  'ct.lines.added', 'ct.lines.edited', 'ct.lines.deleted',
  'ct.state.updated',
  'ct.pces.saved'
];

exports.recordTopics = {
  debug: ['ct.lines.added', 'ct.lines.edited'],
  warning: ['ct.lines.deleted']
};

exports.userPrivileges = [
  'CT:VIEW', 'CT:MANAGE'
];

exports.requiredModules = 'mongoose';

exports.optionalModules = {
  'user messengerClient express': require('./routes')
};

exports.start = (app, module) =>
{
  const {CtTodo} = module;

  app.broker.subscribe('production.synced.**', onProductionSynced);
  app.broker.subscribe('production.taktTime.snChecked.**', onSnChecked);
  app.broker.subscribe('downtimeReasons.*', onDowntimeReasonUpdated);

  function onProductionSynced({prodLine, types})
  {
    if (types.includes('endWork') || types.includes('changeShift'))
    {
      return createTodo(prodLine, 'reset');
    }

    if (types.includes('changeOrder') || types.includes('correctOrder'))
    {
      return createTodo(prodLine, types.includes('changeOrder') ? 'changeOrder' : 'correctOrder');
    }
  }

  function onSnChecked({serialNumber})
  {
    const todo = new CtTodo({
      time: serialNumber.scannedAt,
      line: serialNumber.prodLine,
      station: serialNumber.station,
      action: 'sn',
      data: {
        prodShiftOrder: serialNumber.prodShiftOrder,
        orderNo: serialNumber.orderNo
      }
    });

    todo.save(err =>
    {
      if (err)
      {
        module.error(err, 'Failed to create SN action.', {todo: todo.toJSON()});
      }
    });
  }

  function onDowntimeReasonUpdated()
  {
    app.broker.publish('ct.downtimeReasonUpdated');
  }

  function createTodo(line, action)
  {
    const todo = new CtTodo({line, action});

    todo.save(err =>
    {
      if (err)
      {
        module.error(err, 'Failed to create order action.', {todo: todo.toJSON()});
      }
    });
  }
};
