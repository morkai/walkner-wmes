// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const fs = require('fs').promises;
const locks = require('util/locks');
const wait = require('util/wait');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    html2pdf,
    ComponentLabel,
    ComponentLabelCounter,
    Order,
    ProdLine
  } = module;

  const {prodLine, secretKey, test} = req.body;
  let {labelQty, shiftX, shiftY, orderNo} = req.body;

  if (!labelQty || labelQty < 1)
  {
    return next(app.createError('Invalid label quantity.', 'INPUT', 400));
  }

  if (!orderNo)
  {
    return next(app.createError('Invalid order.', 'INPUT', 400));
  }

  if (typeof shiftX !== 'number' || shiftX < -9999 || shiftX > 9999)
  {
    shiftX = 0;
  }

  if (typeof shiftY !== 'number' || shiftY < -120 || shiftY > 120)
  {
    shiftY = 0;
  }

  let releaseLock = null;

  try
  {
    if (!user.isAllowedTo(req.session.user, 'PROD_DATA:MANAGE'))
    {
      const line = await ProdLine.findOne({_id: prodLine}).select({secretKey: 1}).lean().exec();

      if (!line)
      {
        throw app.createError('Invalid line.', 'INPUT', 400);
      }

      if (secretKey !== line.secretKey)
      {
        throw app.createError('Invalid secret key.', 'INPUT', 400);
      }
    }

    const componentLabel = await ComponentLabel.findById(req.params.id).lean().exec();

    if (!componentLabel)
    {
      throw app.createError('Invalid component label.', 'INPUT', 400);
    }

    const sapOrder = await Order.findById(orderNo).select({_id: 1}).lean().exec();

    if (!sapOrder)
    {
      throw app.createError('Invalid order.', 'INPUT', 400);
    }

    if (test)
    {
      labelQty = 1;
      orderNo = '123456789';

      Object.assign(componentLabel, {
        componentCode: '123456789012',
        global: false
      });
    }

    const tplFile = `componentLabel.${componentLabel.template}.tpl.prn`;
    const tpl = await fs.readFile(`${__dirname}/../templates/${tplFile}`, 'utf8');

    const {componentCode, global} = componentLabel;

    if (global)
    {
      orderNo = '000000000';
    }

    if (!test)
    {
      releaseLock = await locks.createAsync(`${orderNo}:${componentCode}`);
    }

    const conditions = {
      orderNo,
      componentCode
    };
    const update = {
      $inc: {counter: labelQty}
    };
    const options = {
      lean: true,
      new: false,
      upsert: true
    };
    const result = test
      ? null
      : (await ComponentLabelCounter.findOneAndUpdate(conditions, update, options).exec());
    const counter = result ? result.counter : 0;
    const startNo = counter + 1;
    const endNo = startNo + labelQty - 1;
    const remainingZpls = [];

    for (let no = startNo; no <= endNo; ++no)
    {
      remainingZpls.push(html2pdf.compileZpl(tpl, {
        SHIFT_X: shiftX,
        SHIFT_Y: shiftY,
        ORDER: orderNo,
        COMPONENT: componentCode,
        COUNTER: no,
        LABEL_QTY: 1,
        CODE: [
          'PL04',
          orderNo.padStart(9, '0'),
          no.toString().padStart(4, '0'),
          componentCode.padStart(12, '0')
        ].join('.')
      }));
    }

    while (remainingZpls.length)
    {
      const zpls = remainingZpls.splice(0, 10);

      await html2pdf.printZpl(zpls, {
        line: prodLine,
        tag: 'componentLabels'
      });

      await wait(zpls.length * 250);
    }

    res.json({startNo, endNo});
  }
  catch (err)
  {
    next(err);
  }

  if (releaseLock)
  {
    releaseLock();
  }
};

