// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const moment = require('moment');
const step = require('h5.step');
const fs = require('fs-extra');
const jsonDeepEqual = require('util/jsonDeepEqual');
const parseSapTextTable = require('sap/util/parseSapTextTable');
const parseSapNumber = require('sap/util/parseSapNumber');
const parseSapString = require('sap/util/parseSapString');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  filterRe: /^T_COOIS_BOM\.txt$/,
  parsedOutputDir: null,
  xiconfFilePathPattern: './{timestamp}@T_COOIS_XICONF.txt'
};

exports.models = [
  require('../models/order'),
  require('../models/component'),
  require('settings/models/setting'),
  require('xiconf/models/xiconfOrder')
];

exports.recordTopics = {
  info: ['orders.bom.synced'],
  error: ['orders.bom.syncFailed']
};

exports.requiredModules = 'mongoose';

exports.start = (app, module) =>
{
  const {Order, Component, Setting} = module;

  const filePathCache = {};
  const queue = [];
  let locked = false;

  app.broker.subscribe('directoryWatcher.changed', queueFile).setFilter(filterFile);

  function filterFile(fileInfo)
  {
    if (filePathCache[fileInfo.filePath] || !module.config.filterRe.test(fileInfo.fileName))
    {
      return false;
    }

    fileInfo.timeKey = createTimeKey(fileInfo.timestamp);

    return true;
  }

  function createTimeKey(timestamp)
  {
    return moment(timestamp).format('YYMMDDHH');
  }

  function queueFile(fileInfo)
  {
    filePathCache[fileInfo.filePath] = true;

    queue.push(fileInfo);

    module.info('Queued...', {key: fileInfo.timeKey});

    setImmediate(importNext);
  }

  function importNext()
  {
    if (locked)
    {
      return;
    }

    const fileInfo = queue.shift();

    if (!fileInfo)
    {
      return;
    }

    locked = true;

    const startTime = Date.now();

    module.info('Importing...', {key: fileInfo.timeKey});

    importFile(fileInfo, function(err, count)
    {
      cleanUpFileInfoFile(fileInfo);

      if (err)
      {
        module.error(err, 'Failed to import.', {key: fileInfo.timeKey});

        app.broker.publish('orders.bom.syncFailed', {
          timestamp: fileInfo.timestamp,
          error: err.message
        });
      }
      else
      {
        module.info('Imported!', {key: fileInfo.timeKey, count, duration: Date.now() - startTime});

        app.broker.publish('orders.bom.synced', {
          timestamp: fileInfo.timestamp,
          count: count
        });
      }

      locked = false;

      setImmediate(importNext);
    });
  }

  function importFile(fileInfo, done)
  {
    step(
      function readFileStep()
      {
        fs.readFile(fileInfo.filePath, {encoding: 'utf8'}, this.next());
      },
      function parseFileStep(err, fileContents)
      {
        if (err)
        {
          return this.skip(err);
        }

        module.info('Parsing...', {key: fileInfo.timeKey, fileSize: fileContents.length});

        const bom = {};
        const components = {};
        const t = Date.now();

        this.count = parseOrderBomTable(fileContents, bom, components);

        module.info('Parsed!', {
          key: fileInfo.timeKey,
          count: this.count,
          duration: Date.now() - t
        });

        setImmediate(this.parallel(), null, bom);
        setImmediate(this.parallel(), null, components);

        Setting.findById('xiconf.importer.componentPatterns').lean().exec(this.parallel());
      },
      function updateOrdersStep(err, bom, components, componentPatterns)
      {
        if (err)
        {
          return this.skip(err);
        }

        module.info('Updating orders...', {key: fileInfo.timeKey});

        const xiconfItems = {};

        setImmediate(this.parallel(), null, xiconfItems);

        updateNextOrder({
          fileInfo,
          time: new Date(),
          remaining: Object.keys(bom),
          bom,
          xiconfItems,
          xiconfPatterns: parseXiconfPatterns(componentPatterns)
        }, this.parallel());

        updateComponents(components, this.parallel());
      },
      function(err, orderToXiconfItems)
      {
        if (err)
        {
          return this.skip(err);
        }

        buildXiconfItemsDumpFile(fileInfo.timestamp, orderToXiconfItems, this.next());
      },
      function finalizeStep(err)
      {
        return done(err, this.count);
      }
    );
  }

  function updateNextOrder(options, done)
  {
    const orderNo = options.remaining.shift();
    const newBom = options.bom[orderNo];
    let oldBom = null;

    delete options.bom[orderNo];

    step(
      function findOldBomStep()
      {
        Order
          .findById(orderNo)
          .select({
            scheduledStartDate: 1,
            bom: 1
          })
          .lean()
          .exec(this.next());
      },
      function compareBomStep(err, order)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!order)
        {
          return this.skip();
        }

        newBom.forEach(component =>
        {
          matchXiconfComponent(order, component, options.xiconfItems, options.xiconfPatterns);
        });

        oldBom = order.bom || [];

        if (jsonDeepEqual(newBom, oldBom))
        {
          return this.skip();
        }

        setImmediate(this.next());
      },
      function updateOrderStep()
      {
        const changes = {
          time: options.time,
          user: null,
          oldValues: {bom: oldBom},
          newValues: {bom: newBom},
          comment: ''
        };
        const $set = {
          bom: newBom,
          updatedAt: options.time
        };

        Order.updateOne({_id: orderNo}, {$set: $set, $push: {changes: changes}}, this.next());
      },
      function finalizeStep(err)
      {
        if (err)
        {
          module.error(err, 'Failed update BOM.', {key: options.fileInfo.timeKey, orderNo});
        }

        if (options.remaining.length)
        {
          setImmediate(updateNextOrder, options, done);
        }
        else
        {
          setImmediate(done);
        }
      }
    );
  }

  function updateComponents(map, done)
  {
    const list = [];

    Object.keys(map).forEach(nc12 => list.push({
      _id: nc12,
      name: map[nc12]
    }));

    if (!list.length)
    {
      return done();
    }

    Component.insertMany(list, {ordered: false}, (err) =>
    {
      if (err && err.code !== 11000)
      {
        return done(err);
      }

      done();
    });
  }

  function cleanUpFileInfoFile(fileInfo)
  {
    setTimeout(removeFilePathFromCache, 15000, fileInfo.filePath);

    if (module.config.parsedOutputDir)
    {
      moveFileInfoFile(fileInfo.filePath);
    }
    else
    {
      deleteFileInfoFile(fileInfo.filePath);
    }
  }

  function moveFileInfoFile(oldFilePath)
  {
    const newFilePath = path.join(module.config.parsedOutputDir, path.basename(oldFilePath));

    fs.move(oldFilePath, newFilePath, {overwrite: true}, function(err)
    {
      if (err)
      {
        module.error(err, 'Failed to rename file.', {oldFilePath, newFilePath});
      }
    });
  }

  function deleteFileInfoFile(filePath)
  {
    fs.unlink(filePath, function(err)
    {
      if (err)
      {
        module.error(err, 'Failed to delete file.', {filePath});
      }
    });
  }

  function removeFilePathFromCache(filePath)
  {
    delete filePathCache[filePath];
  }

  function parseOrderBomTable(input, bom, components)
  {
    let count = 0;

    parseSapTextTable(input, {
      columnMatchers: {
        orderNo: /^Order$/,
        nc12: /^Material$/,
        item: /^BOM item$/,
        qty: /^Req.*?qty$/,
        unit: /^Unit$/,
        description: /^Material Desc/,
        unloadingPoint: /^Unl.*?Point/,
        supplyArea: /^Sup.*?Area/
      },
      valueParsers: {
        nc12: input => input.replace(/^0+/, ''),
        qty: parseSapNumber,
        description: parseSapString,
        unloadingPoint: parseSapString,
        supplyArea: parseSapString
      },
      itemDecorator: obj =>
      {
        ++count;

        if (obj.nc12.length > 0 && obj.nc12.length < 12)
        {
          obj.nc12 = obj.nc12.padStart(12, '0');
        }

        components[obj.nc12] = obj.description;

        if (!bom[obj.orderNo])
        {
          bom[obj.orderNo] = [];
        }

        bom[obj.orderNo].push({
          nc12: obj.nc12,
          item: obj.item,
          qty: obj.qty,
          unit: obj.unit,
          name: obj.description,
          unloadingPoint: obj.unloadingPoint,
          supplyArea: obj.supplyArea
        });
      }
    });

    return count;
  }

  function parseXiconfPatterns(setting)
  {
    if (!setting || typeof setting.value !== 'string')
    {
      setting.value = '';
    }

    const patterns = {
      nc12: {
        include: {},
        exclude: {}
      },
      name: {
        include: [],
        exclude: []
      }
    };

    setting.value.split('\n').forEach(line =>
    {
      line = line.trim();

      if (!line.length)
      {
        return;
      }

      const type = line.startsWith('-') ? 'exclude' : 'include';

      if (line.startsWith('-') || line.startsWith('+'))
      {
        line = line.substring(1);
      }

      if (/^[0-9]{12}$/.test(line))
      {
        patterns.nc12[type][line] = true;

        return;
      }

      try
      {
        const pattern = line.startsWith('/') && line.endsWith('/')
          ? line.substring(1, -1)
          : `^${line.replace(/\*+/g, '.*?')}$`;

        patterns.name[type].push(new RegExp(pattern, 'i'));
      }
      catch (err) {} // eslint-disable-line no-empty
    });

    return patterns;
  }

  function matchXiconfComponent(order, component, orderNoToComponentMap, patterns)
  {
    if (!component.nc12 || !component.name || component.unit !== 'PCE')
    {
      return;
    }

    if (patterns.nc12.exclude[component.nc12] || patterns.name.exclude.some(p => p.test(component.name)))
    {
      return;
    }

    if (!patterns.nc12.include[component.nc12] && !patterns.name.include.some(p => p.test(component.name)))
    {
      return;
    }

    if (!orderNoToComponentMap[order._id])
    {
      orderNoToComponentMap[order._id] = {
        reqDate: moment(order.scheduledStartDate).format('DD.MM.YYYY'),
        components: []
      };
    }

    orderNoToComponentMap[order._id].components.push(component);
  }

  function buildXiconfItemsDumpFile(timestamp, orderNoToComponentMap, done)
  {
    if (!module.config.xiconfFilePathPattern)
    {
      return done();
    }

    const orderNos = Object.keys(orderNoToComponentMap);

    if (!orderNos.length)
    {
      return done();
    }

    const filePath = module.config.xiconfFilePathPattern.replace('{timestamp}', Math.ceil(timestamp / 1000));
    const fileContents = [
      'BOM',
      '-----------------------------------------------------------------------------------------------------------',
      '|Order    |Material       |Reqmts qty|Material Description                             |Reqmt Date|Deleted|',
      '-----------------------------------------------------------------------------------------------------------'
    ];

    orderNos.forEach(orderNo =>
    {
      const {reqDate, components} = orderNoToComponentMap[orderNo];

      if (reqDate === 'Invalid date')
      {
        return;
      }

      components.forEach(component =>
      {
        const row = [
          '',
          orderNo,
          component.nc12.padStart(15, '0'),
          component.qty.toString().padStart(9, ' ') + ' ',
          component.name.padEnd(49, ' '),
          reqDate,
          '       ',
          ''
        ];

        fileContents.push(row.join('|'));
      });
    });

    fileContents.push(fileContents[0]);

    fs.writeFile(filePath, fileContents.join('\r\n'), done);
  }
};
