// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {
    Order,
    CompRelEntry
  } = module;

  app.broker.subscribe(`${CompRelEntry.TOPIC_PREFIX}.updated.*`, onCompRelEntryUpdated);

  function onCompRelEntryUpdated({_id, change})
  {
    if (change.data.status && change.data.status[0] === 'accepted')
    {
      return handleDeactivatedCompRels(_id);
    }

    if (change.data.status && change.data.status[1] === 'accepted')
    {
      return handleActivatedCompRels(_id);
    }

    if (change.data.orders)
    {
      return handleReleasedOrders(change.data.orders[0], change.data.orders[1]);
    }
  }

  async function handleDeactivatedCompRels(entryId)
  {
    try
    {
      const entry = await CompRelEntry
        .findOne({
          _id: entryId,
          status: {$ne: 'accepted'}
        })
        .select({
          'orders._id': 1
        })
        .lean()
        .exec();

      if (!entry)
      {
        return;
      }

      entry.orders.forEach(order =>
      {
        handleSapOrder(order._id);
      });
    }
    catch (err)
    {
      module.error(err, `Failed to handle deactivated component releases.`, {entryId});
    }
  }

  async function handleActivatedCompRels(entryId)
  {
    try
    {
      const entry = await CompRelEntry
        .findOne({
          _id: entryId,
          status: 'accepted'
        })
        .select({
          'orders._id': 1
        })
        .lean()
        .exec();

      if (!entry)
      {
        return;
      }

      entry.orders.forEach(order =>
      {
        handleSapOrder(order._id);
      });
    }
    catch (err)
    {
      module.error(err, `Failed to handle activated component releases.`, {entryId});
    }
  }

  function handleSapOrder(sapOrderId)
  {
    const sapOrder = {
      _id: sapOrderId
    };

    Order.assignCompRelEntries(sapOrder, err =>
    {
      if (err)
      {
        return module.error(err, `Failed to update order's component releases.`, {sapOrderId});
      }

      const change = {
        time: new Date(),
        user: null,
        oldValues: {
          compRels: []
        },
        newValues: {
          compRels: sapOrder.compRels
        },
        comment: '',
        source: 'system'
      };

      app.broker.publish(`${Order.TOPIC_PREFIX}.updated.${sapOrder._id}`, {
        _id: sapOrder._id,
        change
      });
    });
  }

  function handleReleasedOrders(oldReleasedOrders, newReleasedOrders)
  {
    if (Array.isArray(oldReleasedOrders))
    {
      oldReleasedOrders.forEach(o => handleSapOrder(o._id));
    }

    if (Array.isArray(newReleasedOrders))
    {
      newReleasedOrders.forEach(o => handleSapOrder(o._id));
    }
  }
};
