// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module) =>
{
  const {
    Order,
    CompRelEntry
  } = module;

  app.broker.subscribe(`${CompRelEntry.TOPIC_PREFIX}.updated.*`, onCompRelEntryUpdated);

  function onCompRelEntryUpdated({_id, change})
  {
    if (change.data.status && change.data.status[0] === 'accepted')
    {
      return handleStatusChange(_id);
    }

    if (change.data.status && change.data.status[1] === 'accepted')
    {
      return handleStatusChange(_id);
    }

    if (change.data.orders)
    {
      return handleReleasedOrders(change.data.orders[0], change.data.orders[1]);
    }
  }

  async function handleStatusChange(entryId)
  {
    try
    {
      const entry = await CompRelEntry
        .findOne({
          _id: entryId
        })
        .select({
          orders: 1
        })
        .lean()
        .exec();

      if (!entry)
      {
        return;
      }

      const sapOrderIds = new Set();

      entry.orders.forEach(order =>
      {
        // TODO Handle changes without order number
        if (order._id !== '000000000')
        {
          sapOrderIds.add(order._id);
        }
      });

      if (sapOrderIds.size)
      {
        handleSapOrderById(Array.from(sapOrderIds));
      }
    }
    catch (err)
    {
      module.error(err, `Failed to handle updated component releases.`, {entryId});
    }
  }

  function handleSapOrderById(sapOrderIds)
  {
    step(
      function()
      {
        Order
          .find({_id: {$in: sapOrderIds}})
          .select({
            mrp: 1,
            scheduledStartDate: 1
          })
          .lean()
          .exec(this.next());
      },
      function(err, sapOrders)
      {
        if (err)
        {
          return this.skip(err);
        }

        sapOrders.forEach(sapOrder =>
        {
          Order.assignCompRelEntries(sapOrder, this.group());
        });
      },
      function(err, sapOrders)
      {
        if (err)
        {
          return module.error(err, `Failed to update component releases for orders.`, {sapOrderIds});
        }

        (sapOrders || []).forEach(sapOrder =>
        {
          const change = {
            time: new Date(),
            user: null,
            oldValues: {
              compRels: []
            },
            newValues: {
              compRels: sapOrder.compRels
            },
            comment: '',
            source: 'system'
          };

          app.broker.publish(`${Order.TOPIC_PREFIX}.updated.${sapOrder._id}`, {
            _id: sapOrder._id,
            change
          });
        });
      }
    );
  }

  function handleReleasedOrders(oldReleasedOrders, newReleasedOrders)
  {
    const sapOrderIds = new Set();

    if (Array.isArray(oldReleasedOrders))
    {
      oldReleasedOrders.forEach(o => sapOrderIds.add(o._id));
    }

    if (Array.isArray(newReleasedOrders))
    {
      newReleasedOrders.forEach(o => sapOrderIds.add(o._id));
    }

    if (sapOrderIds.size)
    {
      handleSapOrderById(Array.from(sapOrderIds));
    }
  }
};
