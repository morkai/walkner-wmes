// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module) =>
{
  if (module.config.syncPsStatus.updater)
  {
    app.broker.subscribe('paintShop.events.saved', e => updatePsStatus(e));
  }

  if (module.config.syncPsStatus.generator)
  {
    app.broker.subscribe('paintShop.orders.changed.*', onPaintShopChanged);

    app.broker.subscribe('orders.importer.leadingOrdersChanged', onLeadingOrdersChanged);
  }

  async function updateLeadingOrder(leadingOrderNo, done)
  {
    const {PaintShopOrder, Order} = module;

    if (!done)
    {
      done = () => {};
    }

    try
    {
      const [sapOrder, psOrders] = await Promise.all([
        Order
          .findById(leadingOrderNo)
          .select({psStatus: 1})
          .lean()
          .exec(),
        PaintShopOrder
          .find({order: leadingOrderNo})
          .select({status: 1})
          .lean()
          .exec()
      ]);

      if (!sapOrder)
      {
        return done();
      }

      const psStatuses = {
        new: 0,
        started: 0,
        startedMsp: 0,
        partial: 0,
        finished: 0,
        aside: 0,
        cancelled: 0
      };

      psOrders.forEach(o => psStatuses[o.status] += 1);

      const oldPsStatus = sapOrder.psStatus;
      const newPsStatus = resolvePaintShopStatus(psStatuses, psOrders);

      if (newPsStatus === oldPsStatus)
      {
        return done();
      }

      const change = {
        time: new Date(),
        user: {id: null, label: 'System'},
        oldValues: {psStatus: oldPsStatus},
        newValues: {psStatus: newPsStatus},
        comment: '',
        source: 'ps'
      };
      const update = {
        $push: {changes: change},
        $set: {psStatus: newPsStatus}
      };

      await Order.collection.updateOne({_id: leadingOrderNo}, update);

      app.broker.publish(`orders.updated.${leadingOrderNo}`, {
        _id: leadingOrderNo,
        change
      });

      done();
    }
    catch (err)
    {
      module.error(err, 'Failed to update paint-shop status for a leading order.', {
        leadingOrderNo
      });

      done(err);
    }
  }

  function updatePsStatus(paintShopEvent, done)
  {
    const {PaintShopOrder, Order} = module;

    step(
      function()
      {
        PaintShopOrder
          .findById(paintShopEvent.order)
          .select({status: 1, order: 1, qty: 1, qtyDone: 1, qtyDlv: 1})
          .lean()
          .exec(this.next());
      },
      function(err, paintShopOrder)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!paintShopOrder)
        {
          return this.skip(app.createError(`Paint-shop order not found.`));
        }

        let comment = paintShopEvent.data.comment || '';

        if (_.isEmpty(comment.replace(/[^A-Za-z0-9]+/g, '')))
        {
          comment = '';
        }

        this.defaultComment = resolvePaintShopComment(paintShopOrder);
        this.newStatus = paintShopOrder.status;
        this.orderNo = paintShopOrder.order;
        this.eventChange = {
          time: paintShopEvent.time,
          user: paintShopEvent.user,
          oldValues: {},
          newValues: {},
          comment,
          source: 'ps'
        };

        Order
          .findOne({_id: this.orderNo})
          .select({_id: 1, leadingOrder: 1, psStatus: 1})
          .lean()
          .exec(this.next());
      },
      function(err, eventSapOrder)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!eventSapOrder)
        {
          return this.skip(app.createError(`Event SAP order not found.`));
        }

        if (!eventSapOrder.leadingOrder)
        {
          return setImmediate(this.next(), null, [eventSapOrder]);
        }

        Order
          .find({
            $or: [
              {_id: eventSapOrder.leadingOrder},
              {leadingOrder: eventSapOrder.leadingOrder}
            ]
          })
          .select({
            _id: 1,
            leadingOrder: 1,
            psStatus: 1
          })
          .lean()
          .exec(this.next());
      },
      function(err, sapOrders)
      {
        if (err)
        {
          return this.skip(app.createError(`Failed to find SAP orders: ${err.message}`));
        }

        this.eventSapOrder = sapOrders.find(o => o._id === this.orderNo);

        if (this.newStatus !== this.eventSapOrder.psStatus)
        {
          this.eventChange.oldValues.psStatus = this.eventSapOrder.psStatus;
          this.eventChange.newValues.psStatus = this.newStatus;
        }

        this.leadingSapOrder = sapOrders.find(o => o._id === o.leadingOrder);

        PaintShopOrder
          .find({order: {$in: sapOrders.map(o => o._id)}})
          .select({status: 1})
          .lean()
          .exec(this.next());
      },
      function(err, psOrders)
      {
        if (err)
        {
          return this.skip(app.createError(`Failed to find PS orders: ${err.message}`));
        }

        const eventChange = this.eventChange;

        if (this.eventSapOrder !== this.leadingSapOrder)
        {
          const eventUpdate = {
            $push: {changes: eventChange}
          };

          if (Object.keys(eventChange.newValues).length)
          {
            eventUpdate.$set = eventChange.newValues;
          }
          else if (!eventChange.user.id)
          {
            this.eventChange = null;
          }

          if (this.eventChange)
          {
            Order.collection.updateOne({_id: this.orderNo}, eventUpdate, this.group());
          }
        }
        else
        {
          this.eventSapOrder = null;
          this.eventChange = null;
        }

        if (!psOrders.length || !this.leadingSapOrder)
        {
          return;
        }

        const statuses = {
          new: 0,
          started: 0,
          startedMsp: 0,
          partial: 0,
          finished: 0,
          aside: 0,
          cancelled: 0
        };

        psOrders.forEach(o => statuses[o.status] += 1);

        const oldStatus = this.leadingSapOrder.psStatus;
        const newStatus = resolvePaintShopStatus(statuses, psOrders);

        const oldValues = {};
        const newValues = {};

        if (newStatus !== oldStatus)
        {
          oldValues.psStatus = oldStatus;
          newValues.psStatus = newStatus;
        }

        if (_.isEmpty(newValues) && _.isEmpty(eventChange.comment))
        {
          return;
        }

        if (_.isEmpty(eventChange.comment))
        {
          eventChange.comment = oldStatus === 'unknown' && newStatus === 'new' ? '' : this.defaultComment;
        }

        this.leadingChange = {
          time: paintShopEvent.time,
          user: paintShopEvent.user,
          oldValues,
          newValues,
          comment: eventChange.comment,
          source: 'ps'
        };

        const leadingUpdate = {
          $push: {changes: this.leadingChange},
          $set: {psStatus: newStatus}
        };

        Order.collection.updateOne({_id: this.leadingSapOrder._id}, leadingUpdate, this.group());
      },
      function(err)
      {
        if (err)
        {
          err.paintShopEvent = paintShopEvent;

          module.error(err, `Failed to update paint-shop status.`);
        }
        else
        {
          if (this.eventChange)
          {
            app.broker.publish(`orders.updated.${this.eventSapOrder._id}`, {
              _id: this.eventSapOrder._id,
              change: this.eventChange
            });
          }

          if (this.leadingChange)
          {
            app.broker.publish(`orders.updated.${this.leadingSapOrder._id}`, {
              _id: this.leadingSapOrder._id,
              change: this.leadingChange
            });
          }
        }

        if (done)
        {
          done();
        }
      }
    );
  }

  function resolvePaintShopStatus(statuses, psOrders)
  {
    if (psOrders.length === 0)
    {
      return 'unknown';
    }

    if (statuses.partial)
    {
      return 'partial';
    }

    if (statuses.started)
    {
      return 'started';
    }

    if (statuses.startedMsp)
    {
      return 'startedMsp';
    }

    if (statuses.aside === psOrders.length)
    {
      return 'aside';
    }

    if (statuses.finished)
    {
      return (statuses.finished + statuses.cancelled) === psOrders.length ? 'finished' : 'partial';
    }

    if (statuses.aside)
    {
      return 'aside';
    }

    if (statuses.cancelled === psOrders.length)
    {
      return 'cancelled';
    }

    return 'new';
  }

  function resolvePaintShopComment(pso)
  {
    switch (pso.status)
    {
      case 'new':
        return 'Zresetowano.';

      case 'started':
        return pso.qtyDone ? `Wznowiono. Pozostało ${pso.qty - pso.qtyDone} szt.` : 'Rozpoczęto.';

      case 'startedMsp':
        return 'Rozpoczęto (MSP).';

      case 'partial':
        return `Zakończono ${pso.qtyDone}/${pso.qty} szt.`;

      case 'finished':
      {
        if (pso.qtyDlv === pso.qty)
        {
          return 'Dostarczono.';
        }

        if (pso.qtyDlv > 0)
        {
          return `Dostarczono ${pso.qtyDlv}/${pso.qty} szt.`;
        }

        return 'Zakończono.';
      }

      case 'aside':
        return 'Odstawiono.';

      case 'cancelled':
        return 'Anulowano.';
    }
  }

  function onPaintShopChanged({changes})
  {
    const psEvent = {
      _id: null,
      type: null,
      time: new Date(),
      user: {
        id: null,
        label: 'System'
      },
      order: null,
      data: {}
    };

    updateNextPsStatus(psEvent, (changes.changed || []).concat(changes.added || []));
  }

  function onLeadingOrdersChanged({leadingOrders})
  {
    updateNextLeadingOrder(leadingOrders);
  }

  function updateNextPsStatus(psEvent, psOrderQueue)
  {
    if (!psOrderQueue.length)
    {
      return;
    }

    const psOrder = psOrderQueue.shift();

    psEvent.order = psOrder._id;
    psEvent.data.sapOrder = psOrder.order;

    updatePsStatus(psEvent, () => updateNextPsStatus(psEvent, psOrderQueue));
  }

  function updateNextLeadingOrder(leadingOrders)
  {
    if (!leadingOrders.length)
    {
      return;
    }

    updateLeadingOrder(leadingOrders.shift(), () => updateNextLeadingOrder(leadingOrders));
  }
};
