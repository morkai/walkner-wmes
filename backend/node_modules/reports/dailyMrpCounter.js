// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');
const {formatDate} = require('util/dateFormatter');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  productionId: 'production',
  fteId: 'fte'
};

exports.models = [
  require('./models/dailyMrpCount'),
  require('prodShiftOrders/models/prodShiftOrder')
];

exports.requiredModules = 'mongoose';

exports.start = (app, module) =>
{
  const recountTimers = new Map();

  app.broker.subscribe('orgUnits.rebuilt', onAppStarted).setLimit(1);

  app.broker.subscribe('shiftChanged', newShift => setTimeout(onShiftChanged, 1337, newShift));

  app.broker.subscribe('prodShiftOrders.created.*', onPsoChanged);
  app.broker.subscribe('prodShiftOrders.updated.*', onPsoChanged);
  app.broker.subscribe('prodShiftOrders.deleted.*', onPsoChanged);

  function onAppStarted()
  {
    const localMoment = moment();

    if (localMoment.hours() < 14)
    {
      localMoment.subtract(1, 'days');
    }

    localMoment.startOf('day');

    const utcMoment = moment.utc(localMoment.format('YYYY-MM-DD'), 'YYYY-MM-DD');

    recount(utcMoment.toDate());
  }

  function onShiftChanged(newShift)
  {
    const localMoment = moment(newShift.date).startOf('day');

    if (newShift.no === 1)
    {
      localMoment.subtract(1, 'days');
    }

    const utcMoment = moment.utc(localMoment.format('YYYY-MM-DD'), 'YYYY-MM-DD');

    recount(utcMoment.toDate());
  }

  function onPsoChanged(changedPso)
  {
    const production = app[module.config.productionId];
    const fte = app[module.config.fteId];
    const currentShift = fte.currentShift.date.getTime();

    step(
      function()
      {
        if (changedPso.date && changedPso.date.getTime() === currentShift)
        {
          return this.skip();
        }

        const cachedPso = production.getCachedProdData(changedPso._id);

        if (cachedPso)
        {
          setImmediate(this.next(), null, cachedPso);
        }
        else
        {
          module.ProdShiftOrder.findById(changedPso._id).select({date: 1}).lean().exec(this.next());
        }
      },
      function(err, foundPso)
      {
        if (err)
        {
          return module.error(err, 'Failed to find ProdShiftOrder.', {prodShiftOrder: changedPso._id});
        }

        if (!foundPso || foundPso.date.getTime() === currentShift)
        {
          return;
        }

        const localMoment = moment(foundPso.date);
        const utcMoment = moment.utc(localMoment.format('YYYY-MM-DD'), 'YYYY-MM-DD');

        scheduleRecount(utcMoment.toDate());
      }
    );
  }

  function scheduleRecount(date)
  {
    const time = date.getTime();

    if (recountTimers.has(time))
    {
      clearTimeout(recountTimers.get(time));
    }

    recountTimers.set(time, setTimeout(recount, 30000, date));
  }

  function clearRecountTimer(date)
  {
    const time = date.getTime();

    if (recountTimers.has(time))
    {
      clearTimeout(recountTimers.get(time));
      recountTimers.delete(time);
    }
  }

  function recount(date)
  {
    clearRecountTimer(date);

    module.DailyMrpCount.recount(date, err =>
    {
      if (err)
      {
        module.error(err, `Failed to recount.`);
      }
      else
      {
        module.info(`Recounted ${formatDate(date)}.`);
      }
    });
  }
};
