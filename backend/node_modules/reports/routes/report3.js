// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const helpers = require('./helpers');
const report3 = require('../report3');

module.exports = (app, reportsModule, req, res, next) =>
{
  const orgUnitsModule = app[reportsModule.config.orgUnitsId];
  const downtimeReasonsModule = app[reportsModule.config.downtimeReasonsId];

  if (!orgUnitsModule)
  {
    return next(app.createError('No required module: orgUnits', 'MODULE', 500));
  }

  if (!downtimeReasonsModule)
  {
    return next(app.createError('No required module: downtimeReasons', 'MODULE', 500));
  }

  const options = {
    fromTime: helpers.getTime(req.query.from),
    toTime: helpers.getTime(req.query.to),
    interval: req.query.interval || 'day',
    majorMalfunction: parseFloat(req.query.majorMalfunction) || 1.5,
    downtimeReasons: helpers.getDowntimeReasons(downtimeReasonsModule.models, false),
    prodLines: getProdLinesInfo(orgUnitsModule)
  };

  if (isNaN(options.fromTime) || isNaN(options.toTime))
  {
    return next(app.createError('Invalid time range.', 'INPUT', 400));
  }

  helpers.generateReport(app, reportsModule, report3, '3', req.reportHash, options, function(err, reportJson)
  {
    if (err)
    {
      return next(err);
    }

    res.type('json');
    res.send(reportJson);
  });
};

function getProdLinesInfo(orgUnitsModule)
{
  const prodLines = {};

  _.forEach(orgUnitsModule.getAllByType('prodLine'), function(prodLine)
  {
    const subdivision = orgUnitsModule.getSubdivisionFor(prodLine);

    if (!subdivision)
    {
      return;
    }

    prodLines[prodLine._id] = {
      division: subdivision.division,
      subdivisionType: subdivision.type,
      inventoryNo: prodLine.inventoryNo,
      deactivatedAt: prodLine.deactivatedAt ? prodLine.deactivatedAt.getTime() : 0
    };
  });

  return prodLines;
}
