// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const helpers = require('./helpers');
const clipReport = require('../clip');

module.exports = (app, module, req, res, next) =>
{
  const orgUnits = app[module.config.orgUnitsId];

  const {orgUnitType, orgUnitId} = req.query;
  const orgUnit = orgUnits.getByTypeAndId(orgUnitType, orgUnitId);

  if (orgUnit === null && (orgUnitType || orgUnitId) && orgUnitType !== 'mrpController')
  {
    return res.sendStatus(400);
  }

  const options = {
    hash: req.reportHash,
    export: req.query.export === 1,
    fromTime: helpers.getTime(req.query.from),
    toTime: helpers.getTime(req.query.to),
    interval: req.query.interval || 'day',
    orgUnitType,
    orgUnitId,
    datePropertyOffset: /^-?[0-9]+$/.test(req.query.offset1) ? parseInt(req.query.offset1, 10) : null,
    findDatePropertyOffset: /^-?[0-9]+$/.test(req.query.offset2) ? parseInt(req.query.offset2, 10) : null,
    dataDatePropertyOffset: /^-?[0-9]+$/.test(req.query.offset3) ? parseInt(req.query.offset3, 10) : null
  };

  if (isNaN(options.fromTime) || isNaN(options.toTime))
  {
    return next(new Error('INVALID_TIME'));
  }

  const today = moment();

  if (today.hours() < 6)
  {
    today.subtract(1, 'days');
  }

  today.startOf('day');

  if (options.toTime > today.valueOf())
  {
    options.toTime = today.valueOf();
  }

  helpers.generateReport(app, module, clipReport, 'clip', req.reportHash, options, (err, reportJson) =>
  {
    if (err)
    {
      return next(err);
    }

    res.type('json');
    res.send(reportJson);
  });
};
