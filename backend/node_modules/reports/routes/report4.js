// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const helpers = require('./helpers');
const report4 = require('../report4');

module.exports = (app, module, req, res, next) =>
{
  const {
    downtimeReasons,
    orgUnits,
    User,
    prodNumConstant
  } = module;

  const divisions = (typeof req.query.divisions === 'string' ? req.query.divisions : '')
    .split(',')
    .filter(divisionId => divisionId.length);

  const options = {
    fromTime: helpers.getTime(req.query.from),
    toTime: helpers.getTime(req.query.to),
    interval: helpers.getInterval(req.query.interval, 'day'),
    mode: req.query.mode,
    shifts: typeof req.query.shifts !== 'string'
      ? []
      : req.query.shifts.split(',').filter(v => v >= 1 && v <= 3).map(v => +v),
    downtimeReasons: helpers.getDowntimeReasons(downtimeReasons.models, true),
    subdivisions: getMachineSubdivisions(orgUnits, divisions),
    prodNumConstant
  };

  if (isNaN(options.fromTime) || isNaN(options.toTime))
  {
    return next(new Error('INVALID_TIME'));
  }

  if (options.mode === 'masters' || options.mode === 'operators')
  {
    options[options.mode] = (req.query[options.mode] || '')
      .split(',')
      .filter(userId => /^[a-zA-Z0-9]{24}$/.test(userId));

    if (options[options.mode].length === 0)
    {
      return next(new Error('INVALID_USER_IDS'));
    }
  }
  else if (options.mode !== 'shift')
  {
    options.mode = null;
  }

  if (options.mode === 'masters' || options.mode === 'operators')
  {
    findUsers();
  }
  else
  {
    report();
  }

  function findUsers()
  {
    User
      .find(
        {_id: {$in: options[options.mode]}},
        {_id: 1, personellId: 1, firstName: 1, lastName: 1}
      )
      .lean()
      .exec((err, users) =>
      {
        if (err)
        {
          return next(err);
        }

        if (users.length !== options[options.mode].length)
        {
          return next(new Error('NONEXISTENT_USERS'));
        }

        options[options.mode] = users;

        report();
      });
  }

  function report()
  {
    helpers.generateReport(app, module, report4, '4', req.reportHash, options, (err, reportJson) =>
    {
      if (err)
      {
        return next(err);
      }

      res.type('json');
      res.send(reportJson);
    });
  }
};

function getMachineSubdivisions(orgUnits, divisions)
{
  return orgUnits.getAllByType('subdivision')
    .filter(subdivision =>
    {
      return (subdivision.type === 'press' || subdivision.type === 'paintShop')
        && (divisions.length === 0 || divisions.includes(subdivision.division));
    })
    .map(helpers.idToStr);
}
