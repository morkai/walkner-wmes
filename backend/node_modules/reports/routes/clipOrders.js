// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, {ClipOrderCache, FapEntry}, req, res, next) =>
{
  const {hash, count} = req.query;

  if (typeof hash !== 'string' || !/^[a-f0-9]{32}$/.test(hash))
  {
    return res.json({
      totalCount: 0,
      collection: []
    });
  }

  step(
    function()
    {
      ClipOrderCache
        .find({'_id.hash': hash})
        .sort({'_id.hash': 1, '_id.startDate': 1})
        .limit(req.rql.limit)
        .skip(req.rql.skip)
        .lean()
        .exec(this.next());
    },
    function(err, orderList)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!orderList.length)
      {
        return this.skip(null, []);
      }

      const orderMap = new Map();

      orderList.forEach(o => orderMap.set(o._id.no, o));

      setImmediate(this.parallel(), null, orderList);
      setImmediate(this.parallel(), null, orderMap);

      FapEntry
        .find({orderNo: {$in: [...orderMap.keys()]}})
        .select({
          rid: 1,
          status: 1,
          orderNo: 1,
          analysisNeed: 1,
          analysisDone: 1
        })
        .lean()
        .exec(this.parallel());
    },
    function(err, orderList, orderMap, fapEntries)
    {
      if (err)
      {
        return this.skip(err);
      }

      fapEntries.forEach(fapEntry =>
      {
        const order = orderMap.get(fapEntry.orderNo);

        if (!order.faps)
        {
          order.faps = [];
        }

        if (fapEntry.analysisNeed && !fapEntry.analysisDone)
        {
          fapEntry.status = 'analysis';
        }

        fapEntry.analysisNeed = undefined;
        fapEntry.analysisDone = undefined;

        order.faps.push(fapEntry);
      });

      setImmediate(this.next(), null, orderList);
    },
    function(err, collection)
    {
      if (err)
      {
        return next(err);
      }

      res.json({
        totalCount: parseInt(count, 10) || 0,
        collection
      });
    });
};
