// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const crypto = require('crypto');
const _ = require('lodash');
const moment = require('moment');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  messengerServerId: 'messenger/server',
  reports: {}
};

exports.models = [];

exports.requiredModules = 'mongoose';

exports.setUp = (app, module) =>
{
  Object.keys(module.config.reports).forEach(id =>
  {
    const {models} = module.config.reports[id];

    if (Array.isArray(models))
    {
      exports.models = exports.models.concat(models);
    }
  });
};

exports.start = (app, module) =>
{
  const STATS_GROUPS = [120, 60, 30, 10, 0];
  const REPORTS = module.config.reports || {};
  const inProgress = {};
  const stats = {};

  app.onModuleReady(
    [
      module.config.mongooseId,
      module.config.messengerServerId
    ],
    setUpMessengerServer
  );

  setInterval(dumpStats, 60 * 60 * 1000);

  function setUpMessengerServer()
  {
    const server = app[module.config.messengerServerId];

    server.handle('reports.report', handleReportRequest);
  }

  function handleReportRequest(req, reply)
  {
    if (REPORTS[req._id] === undefined)
    {
      return reply(new Error('UNKNOWN_REPORT'));
    }

    const startedAt = Date.now();

    if (!req.hash)
    {
      req.hash = crypto.createHash('md5').update(JSON.stringify(req.options)).digest('hex');
    }

    if (inProgress[req.hash] !== undefined)
    {
      module.info('Report is already generating...', {reportId: req._id, reportHash: req.hash});

      return inProgress[req.hash].push(reply);
    }

    inProgress[req.hash] = [reply];

    REPORTS[req._id].report(app, module, req.options, (err, report) =>
    {
      _.forEach(inProgress[req.hash], (reply) => { reply(err, report); });

      delete inProgress[req.hash];

      const duration = Date.now() - startedAt;

      if (err)
      {
        module.error(err, 'Failed to generate report.', {reportId: req._id, duration});
      }
      else if (duration > 30000)
      {
        const options = _.pickBy(req.options, value => !_.isObject(value));

        module.info('Slow report!', {
          reportId: req._id,
          dayCount: moment.duration(options.toTime - options.fromTime).as('days'),
          duration: duration / 1000,
          options: options
        });
      }

      incStats(req._id, duration / 1000);
    });
  }

  function getStats(id)
  {
    if (stats[id] === undefined)
    {
      stats[id] = {
        r: 0,
        t: 0,
        m: 0
      };

      _.forEach(STATS_GROUPS, function(group)
      {
        stats[id]['r' + group] = 0;
        stats[id]['t' + group] = 0;
        stats[id]['m' + group] = 0;
      });
    }

    return stats[id];
  }

  function incStats(reportId, duration)
  {
    const reportStats = getStats(reportId);
    const totalStats = getStats('T');

    totalStats.r += 1;
    reportStats.r += 1;
    totalStats.t += duration;
    reportStats.t += duration;

    if (duration > totalStats.m)
    {
      totalStats.m = duration;
    }

    if (duration > reportStats.m)
    {
      reportStats.m = duration;
    }

    for (let i = 0; i < STATS_GROUPS.length; ++i)
    {
      const group = STATS_GROUPS[i];

      if (duration >= group)
      {
        totalStats['r' + group] += 1;
        reportStats['r' + group] += 1;
        totalStats['t' + group] += duration;
        reportStats['t' + group] += duration;

        if (duration > totalStats['m' + group])
        {
          totalStats['m' + group] = duration;
        }

        if (duration > reportStats['m' + group])
        {
          reportStats['m' + group] = duration;
        }

        break;
      }
    }

    if (totalStats.r % 1000 === 0)
    {
      dumpStats();
    }
  }

  function dumpStats()
  {
    if (Object.keys(stats).length)
    {
      module.info('Stats.', {stats});
    }
  }
};
