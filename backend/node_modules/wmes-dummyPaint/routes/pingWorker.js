// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    DpJob,
    DpWorker
  } = module;

  try
  {
    const workersResults = {
      added: [],
      updated: []
    };
    const jobsResults = {
      updated: []
    };

    let [worker, jobs] = await Promise.all([ // eslint-disable-line prefer-const
      DpWorker
        .findById(req.body._id)
        .exec(),
      !Array.isArray(req.body.jobs) || req.body.jobs.length
        ? []
        : DpJob.find({_id: {$in: req.body.jobs}})
          .select({_id: 1})
          .lean()
          .exec()
    ]);

    if (!worker)
    {
      worker = new DpWorker({
        _id: req.body._id
      });

      workersResults.added.push(worker);
    }
    else
    {
      workersResults.updated.push(worker);
    }

    if (req.body.name)
    {
      worker.name = req.body.name;
    }

    worker.set({
      user: user.createUserInfo(req.session.user, req),
      port: parseInt(req.body.port, 10) || 80,
      lastSeenAt: new Date()
    });

    const jobIds = [];

    jobs.forEach(job =>
    {
      job.lastSeenAt = worker.lastSeenAt;

      jobIds.push(job._id);

      jobsResults.updated.push(job);
    });

    await Promise.all([
      worker.save(),
      !jobIds.length ? null : DpJob.collection.updateMany({_id: jobIds}, {$set: {lastSeenAt: worker.lastSeenAt}})
    ]);

    res.json(worker);

    app.broker.publish(`${DpWorker.TOPIC_PREFIX}.updated`, workersResults);

    if (jobsResults.updated.length)
    {
      app.broker.publish(`${DpJob.TOPIC_PREFIX}.updated`, jobsResults);
    }
  }
  catch (err)
  {
    next(err);
  }
};
