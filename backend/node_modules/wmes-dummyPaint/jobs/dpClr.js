// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const paint = require('./paint');

module.exports = async (app, module, job, output, updatedBy) =>
{
  const {
    settings,
    DpFamily,
    DpOrder
  } = module;

  const paintData = JSON.parse(output);

  if (!_.isPlainObject(paintData))
  {
    throw app.createError('Invalid job output.', 'INPUT', 400);
  }

  if (_.isEmpty(paintData))
  {
    module.debug('dpClr found no data. Going straight to paint.', {jobId: job._id});

    return await paint(app, module, job, updatedBy);
  }

  const ordersResult = {
    updated: []
  };
  const ordersOps = [];
  const stage = 'dpClr';
  const updatedAt = new Date();
  const leadingNc12s = Object.keys(paintData);

  module.debug('dpClr found data for leading 12NCs.', {jobId: job._id, count: leadingNc12s.length});

  const orders = await DpOrder
    .find({
      leadingNc12: {$in: leadingNc12s},
      job: job._id
    })
    .select({
      dummyNc12: 1,
      leadingNc12: 1
    })
    .lean()
    .exec();

  let nonAkzoCategories = await settings.findValue('dummyPaint.nonAkzoCategories');

  if (!Array.isArray(nonAkzoCategories))
  {
    nonAkzoCategories = [];
  }

  const pfamToOrders = new Map();

  orders.forEach(order =>
  {
    const paint = paintData[order.leadingNc12];

    ordersResult.updated.push(order);

    order.stage = stage;
    order.updatedAt = updatedAt;
    order.updatedBy = updatedBy;
    order.paintSource = 'BOM';
    order.productFamily = paint.family;
    order.paintCategory = paint.category;
    order.paintCode = paint.code;

    if (!nonAkzoCategories.includes(order.paintCategory))
    {
      order.paintFamily = 'AKZO';
    }

    if (!pfamToOrders.has(order.productFamily))
    {
      pfamToOrders.set(order.productFamily, []);
    }

    pfamToOrders.get(order.productFamily).push(order);
  });

  const families = await DpFamily
    .find({_id: {$in: Array.from(pfamToOrders.keys())}})
    .lean()
    .exec();

  families.forEach(family =>
  {
    pfamToOrders.get(family._id).forEach(order =>
    {
      if (!order.paintFamily)
      {
        order.paintFamily = family.paintFamily;
      }
    });
  });

  ordersResult.updated.forEach(update =>
  {
    ordersOps.push({
      updateOne: {
        filter: {_id: update._id},
        update: {$set: update}
      }
    });
  });

  if (ordersOps.length)
  {
    await DpOrder.collection.bulkWrite(ordersOps);

    app.broker.publish(`${DpOrder.TOPIC_PREFIX}.updated`, ordersResult);
  }

  module.debug('dpClr going to paint.', {jobId: job._id});

  return await paint(app, module, job, updatedBy);
};
