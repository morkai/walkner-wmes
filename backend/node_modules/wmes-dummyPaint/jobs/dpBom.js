// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = async (app, module, job, output, updatedBy) =>
{
  const {
    DpOrder
  } = module;

  const orderToDummy = JSON.parse(output);

  if (!_.isPlainObject(orderToDummy))
  {
    throw app.createError('Invalid job output.', 'INPUT', 400);
  }

  const ordersResult = {
    updated: []
  };
  const ordersOps = [];
  const stage = 'dpBom';
  const updatedAt = new Date();

  _.forEach(orderToDummy, (dummyNc12, _id) =>
  {
    ordersResult.updated.push({
      _id,
      dummyNc12,
      stage,
      updatedAt,
      updatedBy
    });
  });

  ordersResult.updated.forEach(update =>
  {
    ordersOps.push({
      updateOne: {
        filter: {_id: update._id},
        update: {$set: update}
      }
    });
  });

  if (ordersOps.length)
  {
    await DpOrder.collection.bulkWrite(ordersOps);

    app.broker.publish(`${DpOrder.TOPIC_PREFIX}.updated`, ordersResult);
  }

  const result = await DpOrder
    .aggregate([
      {$match: {job: job._id}},
      {$group: {
        _id: null,
        leadingOrders: {$addToSet: '$leadingNo'}
      }}
    ])
    .exec();

  if (!result.length)
  {
    return await module.jobs.finishJob(job, updatedBy);
  }

  const {leadingOrders} = result[0];

  await module.jobs.startRemoteJob(job, {
    name: 'dpSo',
    scriptTimeout: 20 * leadingOrders.length * 1000,
    orders: leadingOrders
  });
};
