// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = async (app, module, job, output, updatedBy) =>
{
  const {
    DpOrder
  } = module;

  const leadingOrders = JSON.parse(output);

  if (!_.isPlainObject(leadingOrders))
  {
    throw app.createError('Invalid job output.', 'INPUT', 400);
  }

  if (_.isEmpty(leadingOrders))
  {
    return await module.jobs.finishJob(job, updatedBy);
  }

  const ordersResult = {
    updated: []
  };
  const ordersOps = [];
  const stage = 'dpSo';
  const updatedAt = new Date();

  const orders = await DpOrder
    .find({
      leadingNo: {$in: Object.keys(leadingOrders)},
      job: job._id
    })
    .select({
      dummyNc12: 1,
      leadingNo: 1
    })
    .lean()
    .exec();

  orders.forEach(order =>
  {
    const {nc12, name, salesOrder} = leadingOrders[order.leadingNo];

    order.stage = stage;
    order.updatedAt = updatedAt;
    order.updatedBy = updatedBy;
    order.leadingNc12 = nc12;
    order.leadingName = name;

    if (salesOrder && salesOrder.no && salesOrder.item)
    {
      order.salesNo = salesOrder.no;
      order.salesItem = salesOrder.item;
    }

    ordersResult.updated.push(order);
  });

  ordersResult.updated.forEach(update =>
  {
    ordersOps.push({
      updateOne: {
        filter: {_id: update._id},
        update: {$set: update}
      }
    });
  });

  if (ordersOps.length)
  {
    await DpOrder.collection.bulkWrite(ordersOps);

    app.broker.publish(`${DpOrder.TOPIC_PREFIX}.updated`, ordersResult);
  }

  const salesOrders = await DpOrder
    .aggregate([
      {$match: {
        job: job._id,
        salesNo: {$ne: ''},
        salesItem: {$ne: ''}
      }},
      {$group: {
        _id: {
          no: '$salesNo',
          item: '$salesItem'
        }
      }},
      {$project: {
        _id: 0,
        no: '$_id.no',
        item: '$_id.item'
      }}
    ])
    .exec();

  if (!salesOrders.length)
  {
    return await module.jobs.finishJob(job, updatedBy);
  }

  await module.jobs.startRemoteJob(job, {
    name: 'dpCh',
    scriptTimeout: 30 * salesOrders.length * 1000,
    salesOrders
  });
};
