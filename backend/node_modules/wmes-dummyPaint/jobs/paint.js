// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = async (app, module, job, updatedBy) =>
{
  const {
    settings,
    DpPaint,
    DpOrder
  } = module;

  const ordersResult = {
    updated: []
  };
  const ordersOps = [];
  const stage = 'paint';
  const updatedAt = new Date();

  const orders = await DpOrder
    .find({
      job: job._id,
      error: ''
    })
    .select({
      dummyNc12: 1,
      productFamily: 1,
      paintFamily: 1,
      paintCode: 1
    })
    .lean()
    .exec();

  const paintToOrders = new Map();
  const paintFamilies = new Set();
  const paintCodes = new Set();

  orders.forEach(order =>
  {
    ordersResult.updated.push(order);

    order.stage = stage;
    order.updatedAt = updatedAt;
    order.updatedBy = updatedBy;

    if (!order.paintFamily)
    {
      order.error = 'NO_PAINT_FAMILY';

      return;
    }

    if (!order.paintCode)
    {
      order.error = 'NO_PAINT_CODE';

      return;
    }

    const paint = `${order.paintFamily}:${order.paintCode}`;

    if (!paintToOrders.has(paint))
    {
      paintToOrders.set(paint, []);
    }

    paintToOrders.get(paint).push(order);

    paintFamilies.add(order.paintFamily);
    paintCodes.add(order.paintCode);
  });

  const paints = await DpPaint
    .find({
      family: {$in: Array.from(paintFamilies)},
      code: {$in: Array.from(paintCodes)}
    })
    .lean()
    .exec();

  paints.forEach(paint =>
  {
    const orders = paintToOrders.get(`${paint.family}:${paint.code}`) || [];

    orders.forEach(order =>
    {
      order.paintNc12 = paint.nc12;
      order.paintName = paint.name;
    });
  });

  const items = [];

  orders.forEach(order =>
  {
    if (order.error)
    {
      return;
    }

    if (!order.dummyNc12 || !order.paintNc12)
    {
      order.error = 'NO_PAINT';

      return;
    }

    items.push({
      orderNo: order._id,
      searchComponent: order.dummyNc12,
      replaceComponent: order.paintNc12
    });
  });

  ordersResult.updated.forEach(update =>
  {
    ordersOps.push({
      updateOne: {
        filter: {_id: update._id},
        update: {$set: update}
      }
    });
  });

  if (ordersOps.length)
  {
    await DpOrder.collection.bulkWrite(ordersOps);

    app.broker.publish(`${DpOrder.TOPIC_PREFIX}.updated`, ordersResult);
  }

  if (!items.length)
  {
    return await module.jobs.finishJob(job._id, updatedBy);
  }

  const [phased, verify] = await Promise.all([
    settings.findValue('dummyPaint.phased'),
    settings.findValue('dummyPaint.verify')
  ]);

  await module.jobs.startRemoteJob(job, {
    name: 'dpUpdate',
    phased: phased !== false,
    verify: verify === true,
    scriptTimeout: 15 * items.length * 1000,
    items
  });
};
