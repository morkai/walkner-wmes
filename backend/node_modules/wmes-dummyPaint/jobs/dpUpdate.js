// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = async (app, module, job, output, updatedBy) =>
{
  const {
    settings,
    DpOrder
  } = module;

  const updateResultList = JSON.parse(output);

  if (!Array.isArray(updateResultList))
  {
    throw app.createError('Invalid job output.', 'INPUT', 400);
  }

  if (_.isEmpty(updateResultList))
  {
    module.debug('dpUpdate did nothing.', {jobId: job._id});

    return await module.jobs.finishJob(job._id, updatedBy);
  }

  const updateResultMap = new Map();

  updateResultList.forEach(result =>
  {
    updateResultMap.set(result.orderNo, result);
  });

  const ordersResult = {updated: []};
  const ordersOps = [];
  const stage = 'dpUpdate';
  const updatedAt = new Date();

  const orders = await DpOrder
    .find({
      _id: {$in: Array.from(updateResultMap.keys())},
      job: job._id
    })
    .select({
      dummyNc12: 1
    })
    .lean()
    .exec();

  const verify = (await settings.findValue('dummyPaint.verify')) === true;

  orders.forEach(order =>
  {
    const updateResult = updateResultMap.get(order._id);

    ordersResult.updated.push(order);

    order.stage = stage;
    order.updatedAt = updatedAt;
    order.updatedBy = updatedBy;
    order.changed = updateResult.changed;
    order.error = updateResult.error || '';

    if (order.changed && verify && !updateResult.verified && !order.error)
    {
      order.error = 'NOT_VERIFIED';
    }
  });

  ordersResult.updated.forEach(update =>
  {
    ordersOps.push({
      updateOne: {
        filter: {_id: update._id},
        update: {$set: update}
      }
    });
  });

  if (ordersOps.length)
  {
    await DpOrder.collection.bulkWrite(ordersOps);

    module.debug('dpUpdate updated DP orders.', {jobId: job._id, count: ordersOps.length});

    app.broker.publish(`${DpOrder.TOPIC_PREFIX}.updated`, ordersResult);
  }

  const unchangedOrdersResult = {updated: []};
  const unchangedConditions = {
    job: job._id,
    changed: false,
    error: ''
  };
  const unchangedOrders = await DpOrder
    .find(unchangedConditions)
    .select({
      dummyNc12: 1
    })
    .lean()
    .exec();
  const unchangedUpdate = {
    stage,
    updatedBy,
    updatedAt,
    error: 'NOT_CHANGED'
  };

  unchangedOrders.forEach(unchangedOrder =>
  {
    Object.assign(unchangedOrder, unchangedUpdate);

    unchangedOrdersResult.updated.push(unchangedOrder);
  });

  if (unchangedOrders.length)
  {
    await DpOrder.collection.updateMany(unchangedConditions, {$set: unchangedUpdate});

    module.debug('dpUpdate updated unchanged DP orders.', {jobId: job._id, count: unchangedOrders.length});

    app.broker.publish(`${DpOrder.TOPIC_PREFIX}.updated`, unchangedOrdersResult);
  }

  return await module.jobs.finishJob(job._id, updatedBy);
};
