// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const fs = require('fs-extra');
const step = require('h5.step');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  sioId: 'sio',
  expressId: 'express',
  directoryWatcherId: 'directoryWatcher',
  productionId: 'production',
  userId: 'user',
  licensesId: 'licenses',
  mailSenderId: 'mail/sender',
  settingsId: 'settings',
  updaterId: 'updater',
  orgUnitsId: 'orgUnits',
  html2pdfId: 'html2pdf',
  featureDbPath: './',
  zipStoragePath: './',
  vncTemplatePath: `${__dirname}/template.vnc`,
  updatesPath: './',
  snfImagesPath: './'
};

exports.models = [
  require('./models/xiconfClient'),
  require('./models/xiconfClientSettings'),
  require('./models/xiconfComponentWeight'),
  require('./models/xiconfHidLamp'),
  require('./models/xiconfInvalidLed'),
  require('./models/xiconfOrder'),
  require('./models/xiconfOrderResult'),
  require('./models/xiconfProgram'),
  require('./models/xiconfResult'),
  require('counters/models/counter'),
  require('orders/models/order'),
  require('licenses/models/license'),
  require('user/models/user'),
  require('prodShiftOrders/models/prodShiftOrder')
];

exports.userPrivileges = ['XICONF:VIEW', 'XICONF:MANAGE', 'XICONF:MANAGE:HID_LAMPS', 'XICONF:NOTIFY'];

exports.republishTopics = [
  'xiconf.results.**',
  'xiconf.orders.**',
  'xiconf.clients.**'
];

exports.optionalModules = {
  'mongoose directoryWatcher licenses': require('./importer/results'),
  'mongoose mailSender settings': require('./notifier'),
  'mongoose user express sio settings licenses': require('./routes'),
  'mongoose sio settings production orgUnits': require('./remoteCoordinator')
};

exports.start = (app, module) =>
{
  module.programSyncQueue = [];

  app.onModuleReady(
    [
      module.config.mongooseId,
      module.config.sioId
    ],
    resetClientsLastSeenAt
  );

  app.broker.subscribe('snf.programs.deleted', cleanUpSnfImages);

  function resetClientsLastSeenAt()
  {
    const {XiconfClient} = module;

    step(
      function findConnectedClientsStep()
      {
        XiconfClient.find({connectedAt: {$ne: null}}, {connectedAt: 1}).lean().exec(this.next());
      },
      function updateDisconnectedAtStep(err, xiconfClients)
      {
        if (err)
        {
          return this.skip(err);
        }

        for (let i = 0; i < xiconfClients.length; ++i)
        {
          const xiconfClient = xiconfClients[i];
          const update = {
            connectedAt: null,
            disconnectedAt: xiconfClient.connectedAt
          };

          XiconfClient.collection.updateOne({_id: xiconfClient._id}, {$set: update}, this.group());
        }
      },
      function(err)
      {
        if (err)
        {
          module.error(err, `Failed to reset clients' last seen at time.`);
        }
      }
    );
  }

  function cleanUpSnfImages(message)
  {
    message.model.images.forEach(image =>
    {
      fs.unlink(path.join(module.config.snfImagesPath, `${image._id}.${image.type}`), () => {});
    });
  }
};
