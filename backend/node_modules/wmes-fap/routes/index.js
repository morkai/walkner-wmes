// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const multer = require('multer');

const addEntryRoute = require('./addEntry');
const editEntryRoute = require('./editEntry');
const uploadAttachmentRoute = require('./uploadAttachment');
const sendAttachmentRoute = require('./sendAttachment');
const validateOrderRoute = require('./validateOrder');

module.exports = (app, module) =>
{
  const {express, user, settings, FapEntry} = module;

  const canView = user.auth('LOCAL', 'USER');
  const canManage = user.auth('FAP:MANAGE');

  express.get(
    '/fap/settings',
    canView,
    (req, res, next) =>
    {
      req.rql.selector = {
        name: 'regex',
        args: ['_id', '^fap\\.']
      };

      return next();
    },
    express.crud.browseRoute.bind(null, app, settings.Setting)
  );
  express.put('/fap/settings/:id', canManage, settings.updateRoute);

  express.post(
    '/fap/entries;upload',
    canView,
    multer({
      dest: module.config.uploadsDest,
      limits: {
        fileSize: 200 * 1024 * 1024
      }
    }).single('file'),
    uploadAttachmentRoute.bind(null, app, module)
  );
  express.post('/fap/entries;validate-order', canView, validateOrderRoute.bind(null, app, module));

  express.get('/fap/entries', canView, express.crud.browseRoute.bind(null, app, FapEntry));
  express.post('/fap/entries', canView, addEntryRoute.bind(null, app, module));
  express.get('/fap/entries/:id', canView, express.crud.readRoute.bind(null, app, {
    model: FapEntry,
    prepareResult: preparePresence
  }));
  express.patch('/fap/entries/:id', canView, editEntryRoute.bind(null, app, module));
  express.delete('/fap/entries/:id', canManage, express.crud.deleteRoute.bind(null, app, FapEntry));

  express.get('/fap/entries/:entryId/attachments/:attachmentId', canView, sendAttachmentRoute.bind(null, app, module));

  function preparePresence(entry, formatResult)
  {
    entry.presence = {};

    entry.observers.forEach(observer =>
    {
      entry.presence[observer.user.id] = !!module.isUserPresent
        && module.isUserPresent(entry._id.toString(), observer.user.id);
    });

    formatResult(null, entry);
  }
};
