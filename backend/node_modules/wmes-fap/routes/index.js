// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const multer = require('multer');
const prepareSearchText = require('util/prepareSearchText');

const addEntryRoute = require('./addEntry');
const editEntryRoute = require('./editEntry');
const uploadAttachmentRoute = require('./uploadAttachment');
const sendAttachmentRoute = require('./sendAttachment');
const validateOrderRoute = require('./validateOrder');
const validateComponentRoute = require('./validateComponent');
const resolveParticipantsRoute = require('./resolveParticipants');
const dictionariesRoute = require('./dictionaries');
const findByRidRoute = require('./findByRid');
const redirectRoute = require('./redirect');
const exportRoute = require('./export');
const findUnseenRoute = require('./findUnseen');
const markAsSeenRoute = require('./markAsSeen');
const countReportRoute = require('./countReport');
const rebuildSearchRoute = require('./rebuildSearch');

module.exports = (app, module) =>
{
  const {
    express,
    mongoose,
    user,
    settings,
    reports,
    FapEntry
  } = module;

  const canView = user.auth('LOCAL', 'USER');
  const canManage = user.auth('FAP:MANAGE');

  express.get(
    '/fap/settings',
    canView,
    (req, res, next) =>
    {
      req.rql.selector = {
        name: 'regex',
        args: ['_id', '^fap\\.']
      };

      return next();
    },
    express.crud.browseRoute.bind(null, app, settings.Setting)
  );
  express.put('/fap/settings/:id', canManage, settings.updateRoute);

  express.get('/fap/dictionaries', canView, dictionariesRoute.bind(null, app, module));

  express.post(
    '/fap/entries;upload',
    canView,
    multer({
      dest: module.config.uploadsDest,
      limits: {
        fileSize: 200 * 1024 * 1024
      }
    }).single('file'),
    uploadAttachmentRoute.bind(null, app, module)
  );
  express.post('/fap/entries;validate-order', canView, validateOrderRoute.bind(null, app, module));
  express.post('/fap/entries;validate-component', canView, validateComponentRoute.bind(null, app, module));
  express.get('/fap/entries;resolve-participants', canView, resolveParticipantsRoute.bind(null, app, module));
  express.post('/fap/entries;resolve-participants', canView, resolveParticipantsRoute.bind(null, app, module));
  express.get('/fap/entries;rid', canView, findByRidRoute.bind(null, app, module));
  express.get('/fap/entries;export.:format?', prepareExport, canView, exportRoute.bind(null, app, module));
  express.get('/fap/entries;unseen', canView, findUnseenRoute.bind(null, app, module));
  express.post('/fap/entries;seen', canView, markAsSeenRoute.bind(null, app, module));
  express.post('/fap/entries;rebuild-search', canManage, rebuildSearchRoute.bind(null, app, module));

  express.get(
    '/fap/entries',
    canView,
    prepareObserverFilter,
    prepareSearchFilter,
    prepareNc12Filter,
    express.crud.browseRoute.bind(null, app, FapEntry)
  );
  express.post('/fap/entries', canView, addEntryRoute.bind(null, app, module));
  express.get('/fap/entries/:id', canView, express.crud.readRoute.bind(null, app, {
    model: FapEntry,
    prepareResult: preparePresence,
    idProperty: req => /^[0-9]+$/.test(req.params.id) ? 'rid' : '_id'
  }));
  express.patch('/fap/entries/:id', canView, editEntryRoute.bind(null, app, module));
  express.delete('/fap/entries/:id', canManage, express.crud.deleteRoute.bind(null, app, FapEntry));

  express.get('/fap/entries/:entryId/attachments/:attachmentId', canView, sendAttachmentRoute.bind(null, app, module));

  express.get('/r/fap/:filter', redirectRoute.bind(null, app, module));

  express.get(
    '/fap/reports/count',
    canView,
    reports.helpers.sendCachedReport.bind(null, 'wmes-fap/count'),
    countReportRoute.bind(null, app, module)
  );

  Object.keys(module.DICTIONARIES).forEach((dictionaryName) =>
  {
    const Model = mongoose.model(module.DICTIONARIES[dictionaryName]);
    const urlPrefix = `/fap/${dictionaryName}`;

    express.get(urlPrefix, canView, express.crud.browseRoute.bind(null, app, Model));
    express.post(urlPrefix, canManage, express.crud.addRoute.bind(null, app, Model));
    express.get(`${urlPrefix}/:id`, canView, express.crud.readRoute.bind(null, app, Model));
    express.put(`${urlPrefix}/:id`, canManage, express.crud.editRoute.bind(null, app, Model));
    express.delete(`${urlPrefix}/:id`, canManage, express.crud.deleteRoute.bind(null, app, Model));
  });

  function prepareExport(req, res, next)
  {
    req.rql.fields = {
      search: 0,
      observers: 0,
      attachments: 0,
      unsubscribed: 0,
      subdivisions: 0
    };

    prepareSearchFilter(req, res, next);
  }

  function preparePresence(entry, formatResult)
  {
    entry.presence = {};

    entry.observers.forEach(observer =>
    {
      entry.presence[observer.user.id] = !!module.isUserPresent
        && module.isUserPresent(entry._id.toString(), observer.user.id);
    });

    formatResult(null, entry);
  }

  function prepareObserverFilter(req, res, next)
  {
    const observer = req.query['observers.user.id'];

    if (observer !== 'mine' && observer !== 'unseen')
    {
      return next();
    }

    req.rql.selector.args = req.rql.selector.args.filter(term => term.args[0] !== 'observers.user.id');

    if (observer === 'mine')
    {
      req.rql.selector.args.push({
        name: 'eq',
        args: ['observers.user.id', req.session.user._id]
      });
    }
    else
    {
      req.rql.selector.args.push({
        name: 'elemMatch',
        args: [
          'observers',
          {name: 'eq', args: ['user.id', req.session.user._id]},
          {name: 'eq', args: ['notify', true]}
        ]
      });
    }

    return next();
  }

  function prepareSearchFilter(req, res, next)
  {
    const search = req.query.search;

    if (search === undefined)
    {
      return next();
    }

    req.rql.selector.args = req.rql.selector.args.filter((term) =>
    {
      return term.name !== 'eq' && term.args[0] !== 'search';
    });

    prepareSearchText(search, true, (err, search) =>
    {
      if (err)
      {
        return next(err);
      }

      if (!search.length || !search[0].length)
      {
        return next();
      }

      req.rql.selector.args.push({
        name: 'in',
        args: ['$text', search]
      });

      next();
    });
  }

  function prepareNc12Filter(req, res, next)
  {
    if (!req.query.nc12)
    {
      return next();
    }

    const term = req.rql.selector.args.find(term => term.name === 'eq' && term.args[0] === 'nc12');

    if (!term)
    {
      return next();
    }

    const nc12 = term.args[1];

    term.name = 'or';
    term.args = [
      {name: 'eq', args: ['nc12', nc12]},
      {name: 'eq', args: ['componentCode', nc12]}
    ];

    next();
  }
};
