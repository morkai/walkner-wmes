// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {express, FapEntry, FapCategory} = module;

  const categoryMap = new Map();

  step(
    function()
    {
      FapCategory.find({}, {name: 1}).lean().exec(this.next());
    },
    function(err, categories)
    {
      if (err)
      {
        return this.skip(err);
      }

      categories.forEach(c => categoryMap.set(c._id.toString(), c.name));
    },
    function(err)
    {
      if (err)
      {
        return next(err);
      }

      express.crud.exportRoute(app, {
        filename: 'WMES_FAP_ENTRIES',
        freezeRows: 1,
        freezeColumns: 1,
        columns: {
          rid: 6,
          creator: 20,
          createdAt: 'datetime',
          owner: 20,
          startedAt: 'datetime',
          finishedAt: 'datetime',
          status: 10,
          orderNo: 9,
          nc12: 12,
          mrp: 4,
          qtyTodo: 'integer',
          qtyDone: 'integer',
          productName: 40,
          divisions: 10,
          lines: 20,
          category: 30,
          problem: 40,
          solution: 40,
          assessment: 12,
          analysisNeed: 'boolean',
          analysisDone: 'boolean',
          analysisStartedAt: 'datetime',
          analysisFinishedAt: 'datetime',
          analyzers: 40,
          why1: 30,
          why2: 30,
          why3: 30,
          why4: 30,
          why5: 30,
          solutionSteps: 40
        },
        model: FapEntry,
        serializeRow
      }, req, res, next);
    }
  );

  function serializeRow(doc)
  {
    const categoryId = doc.category.toString();

    return {
      rid: doc.rid,
      creator: doc.creator.label,
      createdAt: doc.createdAt,
      owner: doc.owner.label,
      startedAt: doc.startedAt,
      finishedAt: doc.finishedAt,
      status: doc.status,
      orderNo: doc.orderNo,
      nc12: doc.nc12,
      mrp: doc.mrp,
      qtyTodo: doc.qtyTodo,
      qtyDone: doc.qtyDone,
      productName: doc.productName,
      divisions: doc.divisions.join('; '),
      lines: doc.lines.join('; '),
      category: categoryMap.has(categoryId) ? categoryMap.get(categoryId) : categoryId,
      problem: doc.problem,
      solution: doc.solution,
      assessment: doc.assessment,
      analysisNeed: doc.analysisNeed,
      analysisDone: doc.analysisDone,
      analysisStartedAt: doc.analysisStartedAt,
      analysisFinishedAt: doc.analysisFinishedAt,
      analyzers: doc.analyzers.map(u => u.label).join('; '),
      why1: doc.why5[0],
      why2: doc.why5[1],
      why3: doc.why5[2],
      why4: doc.why5[3],
      why5: doc.why5[4],
      solutionSteps: doc.solutionSteps
    };
  }
};
