// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const deepEqual = require('deep-equal');
const step = require('h5.step');
const autoIncrement = require('mongoose-plugin-autoinc-fix');
const userInfoSchema = require('user/models/userInfoSchema');
const resolveProductName = require('util/resolveProductName');

exports.name = 'FapEntry';

exports.setUp = (app, mongoose) =>
{
  const STATUSES = [
    'pending',
    'started',
    'finished'
  ];

  const observerSchema = new mongoose.Schema({
    user: userInfoSchema,
    role: {
      type: String,
      required: true,
      enum: ['creator', 'owner', 'subscriber']
    },
    func: {
      type: String,
      ref: 'ProdFunction'
    },
    lastSeenAt: {
      type: Date,
      default: null
    },
    notify: {
      type: Boolean,
      default: false
    },
    changes: {}
  }, {
    _id: false,
    minimize: false
  });

  const attachmentSchema = new mongoose.Schema({
    _id: {
      type: String,
      required: true
    },
    date: {
      type: Date,
      required: true
    },
    user: userInfoSchema,
    type: {
      type: String,
      required: true
    },
    size: {
      type: Number,
      required: true
    },
    name: {
      type: String,
      required: true
    }
  }, {
    id: false,
    minimize: false
  });

  const changeSchema = new mongoose.Schema({
    date: {
      type: Date,
      required: true
    },
    user: userInfoSchema,
    data: {},
    comment: {
      type: String,
      trim: true,
      default: ''
    }
  }, {
    _id: false,
    minimize: false
  });

  const fapEntrySchema = new mongoose.Schema({
    creator: userInfoSchema,
    createdAt: {
      type: Date,
      required: true
    },
    updater: userInfoSchema,
    updatedAt: {
      type: Date,
      required: true
    },
    startedAt: Date,
    finishedAt: Date,
    owner: userInfoSchema,
    status: {
      type: String,
      required: true,
      enum: STATUSES
    },
    orderNo: {
      type: String,
      default: ''
    },
    category: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'FapCategory',
      required: true
    },
    problem: {
      type: String,
      required: true
    },
    solution: {
      type: String,
      default: ''
    },
    nc12: {
      type: String,
      default: ''
    },
    divisions: [String],
    lines: [String],
    mrp: {
      type: String,
      default: ''
    },
    qtyTodo: {
      type: Number,
      default: 0
    },
    qtyDone: {
      type: Number,
      default: 0
    },
    productName: {
      type: String,
      default: ''
    },
    analysisStartedAt: Date,
    analysisFinishedAt: Date,
    assessment: {
      type: String,
      enum: ['unspecified', 'effective', 'ineffective', 'repeatable'],
      default: 'unspecified'
    },
    analysisNeed: {
      type: Boolean,
      default: false
    },
    analysisDone: {
      type: Boolean,
      default: false
    },
    analyzers: [userInfoSchema],
    why5: [String],
    solutionSteps: {
      type: String,
      default: ''
    },
    attachments: [attachmentSchema],
    observers: [observerSchema],
    subdivisions: [String],
    changes: [changeSchema]
  }, {
    id: false,
    minimize: false
  });

  fapEntrySchema.plugin(autoIncrement.plugin, {
    model: exports.name,
    field: 'rid',
    startAt: 1,
    incrementBy: 1
  });

  fapEntrySchema.index({createdAt: -1});
  fapEntrySchema.index({status: 1});
  fapEntrySchema.index({assessment: 1});
  fapEntrySchema.index({moreAnalysis: 1, analysisDone: 1});
  fapEntrySchema.index({
    'observers.user.id': 1,
    'observers.notify': 1
  });

  fapEntrySchema.statics.TOPIC_PREFIX = 'fap.entries';
  fapEntrySchema.statics.BROWSE_LIMIT = 100;

  fapEntrySchema.pre('save', function(next)
  {
    if (this.isNew && this.observers.length === 0)
    {
      this.createObservers();
    }

    if (this.isModified('status'))
    {
      if (this.status === 'started')
      {
        this.startedAt = this.updatedAt;
        this.finishedAt = null;
      }
      else if (this.status === 'finished' || this.status === 'cancelled')
      {
        this.finishedAt = this.updatedAt;
      }
    }

    next();
  });

  fapEntrySchema.statics.prepareSubscribers = function(subscribers)
  {
    return (Array.isArray(subscribers) ? subscribers : [])
      .filter(function(user)
      {
        return _.isString(user.id)
          && !_.isEmpty(user.id)
          && _.isString(user.label)
          && !_.isEmpty(user.label);
      })
      .map(function(user)
      {
        return {
          user: {
            id: user.id,
            label: user.label
          },
          role: 'subscriber',
          lastSeenAt: null,
          notify: true,
          changes: {}
        };
      });
  };

  fapEntrySchema.statics.markAsSeen = function(modelId, userId, done)
  {
    const Model = this;

    Model.findById(modelId, {_id: 1}).lean().exec((err, model) =>
    {
      if (err)
      {
        return done(err);
      }

      if (!model)
      {
        return done();
      }

      const conditions = {
        _id: model._id,
        'observers.user.id': userId
      };
      const update = {
        $set: {
          'observers.$.lastSeenAt': new Date(),
          'observers.$.notify': false,
          'observers.$.changes': {}
        }
      };

      Model.collection.updateOne(conditions, update, (err) =>
      {
        if (err)
        {
          return done(err);
        }

        app.broker.publish(`${Model.TOPIC_PREFIX}.seen.${userId}`, {modelId, userId});
      });
    });
  };

  fapEntrySchema.statics.observe = function(modelId, state, userInfo, done)
  {
    const Model = this;

    Model.findById(modelId, (err, model) =>
    {
      if (err)
      {
        return done(err);
      }

      if (!model)
      {
        return done();
      }

      const now = new Date();
      const userId = userInfo.id.toString();
      const observerIndex = _.findIndex(model.observers, observer => observer.user.id === userId);

      if (state)
      {
        if (observerIndex !== -1)
        {
          return done();
        }

        model.observers.push({
          user: {
            id: userId,
            label: userInfo.label
          },
          role: 'subscriber',
          lastSeenAt: now,
          notify: false,
          changes: {}
        });
        model.changes.push({
          date: now,
          user: userInfo,
          data: {observer: [0, 1]},
          comment: ''
        });
      }
      else
      {
        if (observerIndex === -1 || model.observers[observerIndex].role !== 'subscriber')
        {
          return done();
        }

        model.observers.splice(observerIndex, 1);
        model.changes.push({
          date: now,
          user: userInfo,
          data: {observer: [1, 0]},
          comment: ''
        });
      }

      model.markModified('observers');
      model.markModified('changes');
      model.save((err) =>
      {
        if (err)
        {
          return done(err);
        }

        app.broker.publish(`${Model.TOPIC_PREFIX}.edited`, {
          model,
          user: userInfo,
          notify: null
        });
      });
    });
  };

  fapEntrySchema.methods.createObservers = function()
  {
    const observers = {};

    observers[this.owner.id] = {
      user: {
        id: this.owner.id,
        label: this.owner.label
      },
      role: 'owner',
      lastSeenAt: null,
      notify: this.owner.id !== this.creator.id,
      changes: {}
    };

    if (!observers[this.creator.id])
    {
      observers[this.creator.id] = {
        user: this.creator,
        role: 'creator',
        lastSeenAt: this.createdAt,
        notify: false,
        changes: {}
      };
    }

    this.observers.forEach((subscriber) =>
    {
      if (!observers[subscriber.user.id])
      {
        observers[subscriber.user.id] = subscriber;
      }
    });

    if (app.user && app.user.guest)
    {
      delete observers[app.user.guest._id];
    }

    this.observers = Object.values(observers);
  };

  fapEntrySchema.methods.updateObservers = function(changedPropertyList, changes, newSubscribers)
  {
    if (this.observers.length === 0)
    {
      this.createObservers();
    }

    const changedPropertyMap = {};

    changedPropertyList.forEach(property => { changedPropertyMap[property] = true; });

    const usersToNotify = {};
    const oldObserverMap = {};
    const newObserverMap = {};

    // Old observers
    _.forEach(this.observers, function(observer)
    {
      oldObserverMap[observer.user.id] = observer;

      if (observer.role === 'subscriber')
      {
        addObserver(observer, true);
      }
    });

    // Creator
    addObserver(oldObserverMap[this.creator.id], true);

    // Owner
    if (this.owner && !newObserverMap[this.owner.id])
    {
      let owner = oldObserverMap[this.owner.id];

      if (!owner)
      {
        owner = {
          user: {
            id: this.owner.id,
            label: this.owner.label
          },
          role: 'owner',
          lastSeenAt: null,
          notify: false,
          changes: {}
        };
      }

      addObserver(owner, true);
    }

    // Auto-subscribe the updater
    if (!newObserverMap[this.updater.id] && (!app.user || this.updater.id !== app.user.guest._id))
    {
      newSubscribers.push({
        user: {
          id: this.updater.id,
          label: this.updater.label
        },
        role: 'subscriber',
        lastSeenAt: null,
        notify: false,
        changes: {}
      });
    }

    // New subscribers specified in the form
    const subscribers = [];

    newSubscribers.forEach((newSubscriber) =>
    {
      if (!newObserverMap[newSubscriber.user.id])
      {
        newObserverMap[newSubscriber.user.id] = newSubscriber;
        usersToNotify[newSubscriber.user.id] = {};
        subscribers.push(newSubscriber.user);
      }
    });

    if (subscribers.length)
    {
      changes.subscribers = [null, subscribers];
    }

    // Updater
    const updater = newObserverMap[this.updater.id];

    if (updater)
    {
      updater.lastSeenAt = this.updatedAt;
      updater.notify = false;
      updater.changes = {};

      delete usersToNotify[updater.user.id];
    }

    if (app.user && app.user.guest)
    {
      delete newObserverMap[app.user.guest._id];
    }

    this.observers = Object.values(newObserverMap);

    this.markModified('observers');

    return usersToNotify;

    function addObserver(observer, notify)
    {
      if (!observer)
      {
        return;
      }

      Object.assign(observer.changes, changedPropertyMap);

      if (!observer.notify && notify)
      {
        observer.notify = notify;
        usersToNotify[observer.user.id] = observer.changes;
      }

      newObserverMap[observer.user.id] = observer;
    }
  };

  fapEntrySchema.methods.updateAttachments = function(changes, attachments)
  {
    const added = [null, []];
    const edited = [[], []];
    const removed = [[], null];
    const map = {};

    this.attachments.forEach(a => map[a._id] = a);

    attachments.forEach(newAttachment =>
    {
      const oldAttachment = map[newAttachment._id];

      if (!oldAttachment)
      {
        added[1].push(newAttachment);

        return;
      }

      if (newAttachment.name === oldAttachment.name)
      {
        removed[0].push(oldAttachment);

        return;
      }

      edited[0].push(oldAttachment);
      edited[1].push(newAttachment);
    });

    if (added[1].length)
    {
      changes.attachments = added;

      added[1].forEach(a => this.attachments.push(a));
    }
    else if (edited[0].length)
    {
      changes.attachments = edited;

      edited[1].forEach(a => Object.assign(map[a._id], a));
    }
    else if (removed[0].length)
    {
      changes.attachments = removed;

      this.attachments = this.attachments.filter(a => !removed[0].includes(a));
    }
  };

  fapEntrySchema.methods.applyChanges = function(input, updater, updatedAt)
  {
    this.updater = updater;
    this.updatedAt = updatedAt;

    const changes = this.compareProperties(_.omit(input, [
      'comment',
      'subscribers',
      'attachments'
    ]));

    this.updateAttachments(changes, input.attachments || []);

    const changedProperties = Object.keys(changes);
    const comment = _.isEmpty(input.comment) || !_.isString(input.comment) ? '' : input.comment.trim();

    if (!_.isEmpty(input.comment))
    {
      changedProperties.push('comment');
    }

    if (!_.isEmpty(input.subscribers))
    {
      changedProperties.push('subscribers');
    }

    if (!changedProperties.length)
    {
      return null;
    }

    const usersToNotify = this.updateObservers(changedProperties, changes, input.subscribers || []);

    if (!_.isEmpty(input.subscribers))
    {
      if (_.isEmpty(changes.subscribers))
      {
        changedProperties.pop();
      }

      if (!changedProperties.length)
      {
        return null;
      }
    }

    this.changes.push({
      date: this.updatedAt,
      user: updater,
      data: changes,
      comment
    });

    return usersToNotify;
  };

  fapEntrySchema.methods.compareProperties = function(input)
  {
    const changes = {};

    _.forEach(input, (value, key) => { this.compareProperty(key, input, changes); });

    return changes;
  };

  fapEntrySchema.methods.compareProperty = function(property, input, changes)
  {
    let oldValue = this[property];
    let newValue = input[property];

    if (_.isObject(oldValue) && _.isFunction(oldValue.toObject))
    {
      oldValue = oldValue.toObject();
    }

    if (_.isObject(newValue) && _.isFunction(newValue.toObject))
    {
      newValue = newValue.toObject();
    }

    if (_.isString(newValue))
    {
      newValue = newValue.trim();
    }

    if (deepEqual(newValue, oldValue, {strict: true}))
    {
      return false;
    }

    changes[property] = [oldValue, newValue];
    this[property] = newValue;

    return true;
  };

  fapEntrySchema.methods.updateOrderData = function(done)
  {
    const entry = this;

    if (!entry.orderNo)
    {
      entry.orderNo = '';
      entry.nc12 = '';
      entry.qtyTodo = 0;
      entry.qtyDone = 0;
      entry.productName = '';

      return done();
    }

    step(
      function()
      {
        mongoose.model('Order')
          .findById(entry.orderNo)
          .select({
            _id: 0,
            mrp: 1,
            nc12: 1,
            name: 1,
            description: 1,
            qtyDone: 1,
            qty: 1
          })
          .lean()
          .exec(this.parallel());
      },
      function(err, sapOrder)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to find order data: ${err.message}`,
            'UPDATE_ORDER_DATA',
            500
          ));
        }

        if (!sapOrder)
        {
          return this.skip(app.createError(
            `Order not found: ${entry.orderNo}`,
            'UPDATE_ORDER_DATA',
            400
          ));
        }

        entry.mrp = sapOrder.mrp;
        entry.nc12 = sapOrder.nc12;
        entry.qtyTodo = sapOrder.qty;
        entry.qtyDone = sapOrder.qtyDone ? sapOrder.qtyDone.total : 0;
        entry.productName = resolveProductName(sapOrder);
      },
      done
    );
  };

  mongoose.model(exports.name, fapEntrySchema);
};
