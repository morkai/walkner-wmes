// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {sio} = module;

  const entryToUsers = new Map();
  const socketToEntries = new Map();

  module.isUserPresent = (entryId, userId) =>
  {
    const userToSockets = entryToUsers.get(entryId);

    return !!userToSockets && userToSockets.has(userId);
  };

  sio.on('connection', (socket) =>
  {
    socket.on('fap.entries.join', joinCommand);
    socket.on('fap.entries.leave', leaveCommand);
    socket.on('disconnect', leaveAllCommand);
  });

  function joinCommand(entryId)
  {
    const {user} = this.handshake;

    if (!user)
    {
      return;
    }

    const socketId = this.id;
    const userId = user._id;

    if (!entryToUsers.has(entryId))
    {
      entryToUsers.set(entryId, new Map());
    }

    const userToSockets = entryToUsers.get(entryId);

    if (!userToSockets.has(userId))
    {
      userToSockets.set(userId, new Set());

      app.broker.publish(`fap.entries.presence.${entryId}`, {
        entryId,
        userId,
        presence: true
      });
    }

    userToSockets.get(userId).add(socketId);

    if (!socketToEntries.has(socketId))
    {
      socketToEntries.set(socketId, new Set());
    }

    socketToEntries.get(socketId).add(entryId);
  }

  function leaveCommand(entryId)
  {
    const {user} = this.handshake;

    if (!user)
    {
      return;
    }

    const socketId = this.id;
    const socketEntries = socketToEntries.get(socketId);

    if (!socketEntries || !socketEntries.has(entryId))
    {
      return;
    }

    socketEntries.delete(entryId);

    if (!socketEntries.size)
    {
      socketToEntries.delete(socketId);
    }

    const userToSockets = entryToUsers.get(entryId);

    if (!userToSockets)
    {
      return;
    }

    userToSockets.forEach((sockets, userId) =>
    {
      sockets.delete(socketId);

      if (!sockets.size)
      {
        userToSockets.delete(userId);

        app.broker.publish(`fap.entries.presence.${entryId}`, {
          entryId,
          userId,
          presence: false
        });
      }
    });

    if (!userToSockets.size)
    {
      entryToUsers.delete(entryId);
    }
  }

  function leaveAllCommand()
  {
    const {user} = this.handshake;

    if (!user)
    {
      return;
    }

    const socketId = this.id;
    const socketEntries = socketToEntries.get(socketId);

    if (!socketEntries)
    {
      return;
    }

    socketToEntries.delete(socketId);

    socketEntries.forEach((entryId) =>
    {
      const userToSockets = entryToUsers.get(entryId);

      if (!userToSockets)
      {
        return;
      }

      userToSockets.forEach((sockets, userId) =>
      {
        sockets.delete(socketId);

        if (!sockets.size)
        {
          userToSockets.delete(userId);

          app.broker.publish(`fap.entries.presence.${entryId}`, {
            entryId,
            userId,
            presence: false
          });
        }
      });

      if (!userToSockets.size)
      {
        entryToUsers.delete(entryId);
      }
    });
  }
};
