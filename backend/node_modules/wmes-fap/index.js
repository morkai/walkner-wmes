// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const resolveParticipants = require('./resolveParticipants');
const editEntry = require('./editEntry');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  settingsId: 'settings',
  sioId: 'sio',
  morId: 'mor',
  mailSenderId: 'mail/sender',
  smsSenderId: 'sms/sender',
  reportsId: 'reports',
  sapGuiId: 'sapGui',
  uploadsDest: './data/uploads/fap'
};

exports.models = [
  require('./models/fapEntry'),
  require('./models/fapCategory'),
  require('user/models/user'),
  require('orders/models/order'),
  require('orders/models/orderEto'),
  require('orders/models/component'),
  require('prodShiftOrders/models/prodShiftOrder')
];

exports.republishTopics = [
  'fap.entries.added', 'fap.entries.deleted', 'fap.entries.updated.*',
  'fap.entries.presence.*', 'fap.entries.notifications.*',
  'fap.categories.added', 'fap.categories.edited', 'fap.categories.deleted'
];

exports.recordTopics = {
  debug: ['fap.categories.added', 'fap.categories.edited'],
  warning: ['fap.entries.deleted', 'fap.categories.deleted']
};

exports.userPrivileges = ['FAP:MANAGE'];

exports.requiredModules = 'mongoose';

exports.optionalModules = {
  'mongoose': require('./searchIndexer'),
  'sio': require('./commands'),
  'mor': require('./notifier'),
  'sapGui': require('./planners'),
  'user settings reports express': require('./routes')
};

exports.start = (app, module) =>
{
  module.DICTIONARIES = {
    categories: 'FapCategory'
  };

  module.resolveParticipants = resolveParticipants.bind(null, app, module);

  module.editEntry = editEntry.bind(null, app, module);

  module.tmpAttachments = {};

  const entryLocks = new Map();

  module.lockEntry = (entryId, callback) =>
  {
    if (typeof entryId !== 'string')
    {
      entryId = String(entryId);
    }

    if (entryLocks.has(entryId))
    {
      entryLocks.get(entryId).push(callback);
    }
    else
    {
      entryLocks.set(entryId, []);

      setImmediate(callback);
    }

    return function unlockEntry()
    {
      const lockQueue = entryLocks.get(entryId);

      if (lockQueue.length)
      {
        setImmediate(lockQueue.shift());
      }
      else
      {
        entryLocks.delete(entryId);
      }
    };
  };
};
