// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const mongoSerializer = require('h5.rql/lib/serializers/mongoSerializer');
const sift = require('sift').default;

module.exports = (app, module) =>
{
  const express = app[module.config.expressId];
  const user = app[module.config.userId];

  express.get('/sockets', user.auth('SUPER'), (req, res) =>
  {
    const sockets = [];

    _.forEach(module.sockets.connected, (sioSocket) =>
    {
      const handshake = sioSocket.handshake;
      const query = handshake.query || {};
      const socketUser = handshake.user || {};
      const login = socketUser.login;
      const host = query.COMPUTERNAME || query['X-WMES-CNAME'] || '';

      sockets.push({
        _id: sioSocket.id,
        host,
        ip: socketUser.ipAddress,
        user: socketUser._id,
        login,
        name: `${socketUser.lastName || ''} ${socketUser.firstName || ''}`.trim(),
        connectedAt: new Date(handshake.connectedAt),
        instance: query['X-WMES-INSTANCE'] || '',
        app: query['X-WMES-APP'] || '',
        line: query['X-WMES-LINE'] || ''
      });
    });

    sockets.sort((a, b) =>
    {
      const cmp = a.login.localeCompare(b.login);

      return cmp === 0 ? a._id.localeCompare(b._id) : cmp;
    });

    const queryOptions = mongoSerializer.fromQuery(req.rql);

    let collection = sockets;

    if (!_.isEmpty(queryOptions.selector))
    {
      collection = collection.filter(sift(queryOptions.selector));
    }

    if (_.isEmpty(queryOptions.sort))
    {
      queryOptions.sort = {
        login: 1,
        connectedAt: -1
      };
    }

    const sortFields = Object.keys(queryOptions.sort);

    collection.sort((a, b) => sort(a, b, sortFields, 0));

    if (!_.isEmpty(queryOptions.fields))
    {
      const fields = Object.keys(queryOptions.fields);
      const fieldFilter = queryOptions.fields[fields[0]] ? 'pick' : 'omit';

      collection = collection.map(socket => _[fieldFilter](socket, fields));
    }

    res.json({
      totalCount: collection.length,
      collection
    });

    function sort(a, b, sortFields, i)
    {
      const sortField = sortFields[i];
      const sortOrder = queryOptions.sort[sortField];

      const aValue = a[sortField];
      const bValue = b[sortField];
      let cmp = 0;

      if (typeof aValue === 'string')
      {
        cmp = aValue.localeCompare(bValue, undefined, {
          numeric: true,
          ignorePunctuation: true,
          sensitivity: 'base'
        });
      }
      else
      {
        cmp = a - b;
      }

      if (cmp !== 0)
      {
        if (sortOrder === 1)
        {
          return cmp;
        }

        return cmp === 1 ? -1 : 1;
      }

      i += 1;

      if (i === sortField.length)
      {
        return 0;
      }

      return sort(a, b, sortFields, i);
    }
  });
};
