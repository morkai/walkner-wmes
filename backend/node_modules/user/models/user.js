// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const transliteration = require('transliteration');

exports.name = 'User';

exports.setUp = (app, mongoose) =>
{
  const userMobileSchema = new mongoose.Schema({
    fromTime: {
      type: String,
      required: true,
      pattern: /^[0-9]{2}:[0-9]{2}$/
    },
    toTime: {
      type: String,
      required: true,
      pattern: /^[0-9]{2}:[0-9]{2}$/
    },
    number: {
      type: String,
      required: true
    }
  }, {
    _id: false
  });

  const userSchema = new mongoose.Schema({
    login: {
      type: String,
      trim: true,
      required: true
    },
    password: {
      type: String,
      trim: true,
      required: true
    },
    email: {
      type: String,
      trim: true,
      default: ''
    },
    privileges: [String],
    personnelId: {
      type: String,
      trim: true,
      default: ''
    },
    card: {
      type: String,
      trim: true,
      default: ''
    },
    cardUid: {
      type: String,
      trim: true,
      default: ''
    },
    firstName: {
      type: String,
      trim: true,
      default: ''
    },
    lastName: {
      type: String,
      trim: true,
      default: ''
    },
    searchName: String,
    active: {
      type: Boolean,
      default: true
    },
    gender: {
      type: String,
      enum: ['unknown', 'female', 'male'],
      default: 'unknown'
    },
    mobile: [userMobileSchema],
    presence: {
      type: Boolean,
      default: false
    },
    presenceAt: Date,
    syncId: {
      type: String,
      default: ''
    },
    syncData: {
      type: {},
      default: () => ({})
    },
    preferences: {
      type: {},
      default: () => ({})
    },
    apiKey: {
      type: String,
      default: ''
    }
  }, {
    id: false,
    minimize: false,
    toJSON: {
      transform: function(alarm, ret)
      {
        ret.password = undefined;
        ret.apiKey = undefined;

        return ret;
      }
    }
  });

  userSchema.index({syncId: 1});
  userSchema.index({login: 1});
  userSchema.index({personnelId: 1});
  userSchema.index({card: 1});
  userSchema.index({cardUid: 1});
  userSchema.index({searchName: 1});
  userSchema.index({privileges: 1});
  userSchema.index({apiKey: 1});

  userSchema.statics.TOPIC_PREFIX = 'users';
  userSchema.statics.EDITABLE_PROPERTIES = {
    login: true,
    password: true,
    password2: true,
    email: true,
    privileges: true,
    personnelId: true,
    card: true,
    cardUid: true,
    firstName: true,
    lastName: true,
    active: true,
    gender: true,
    mobile: true,
    preferences: true,
    apiKey: true
  };
  userSchema.statics.SELF_EDITABLE_PROPERTIES = {
    login: true,
    password: true,
    password2: true,
    email: true,
    personnelId: true,
    firstName: true,
    lastName: true,
    gender: true,
    mobile: true,
    preferences: true
  };

  userSchema.pre('save', function(next)
  {
    this.searchName = userSchema.statics.prepareSearchName(this);

    next();
  });

  userSchema.statics.customizeLeanObject = function(leanModel)
  {
    leanModel.password = undefined;
    leanModel.apiKey = undefined;

    return leanModel;
  };

  userSchema.statics.prepareSearchName = function({lastName, firstName, login})
  {
    return userSchema.statics.transliterateName(
      ((lastName || '') + (firstName || '')) || login
    );
  };

  userSchema.statics.transliterateName = function(name)
  {
    return transliteration
      .transliterate(name, {unknown: ''})
      .replace(/[^a-zA-Z0-9]+/g, '')
      .toUpperCase();
  };

  userSchema.statics.anonymize = function(userId, done)
  {
    const User = this;

    step(
      function()
      {
        User.findById(userId, this.next());
      },
      function(err, user)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!user)
        {
          return this.skip(app.createError('NOT_FOUND', 400));
        }

        user.set(User.anonymizeData(userId));
        user.save(this.next());
      },
      done
    );
  };

  userSchema.statics.dataAnonymizers = [];

  userSchema.statics.anonymizeData = function(userId)
  {
    const anonymizedData = {
      login: `?${userId}?`,
      password: ']:->',
      active: false,
      firstName: '?',
      lastName: '?',
      email: '',
      privileges: [],
      personnelId: '',
      card: '',
      cardUid: '',
      searchName: ']:->',
      syncId: null,
      syncData: {},
      mobile: [],
      presence: false,
      gender: 'unknown'
    };

    this.dataAnonymizers.forEach(anonymizeData =>
    {
      anonymizeData(anonymizedData);
    });

    return anonymizedData;
  };

  userSchema.statics.resolveMobile = function(mobileList, currentTimeValue)
  {
    if (!mobileList || !mobileList.length)
    {
      return null;
    }

    if (!currentTimeValue)
    {
      const currentDate = new Date();

      currentTimeValue = currentDate.getHours() * 1000 + currentDate.getMinutes();
    }

    const mobile = mobileList.find((mobile) =>
    {
      const fromTime = parseMobileTime(mobile.fromTime);
      const toTime = parseMobileTime(mobile.toTime === '00:00' ? '24:00' : mobile.toTime);
      let match = false;

      if (toTime.value < fromTime.value)
      {
        match = currentTimeValue < toTime.value || currentTimeValue >= fromTime.value;
      }
      else if (fromTime.value < toTime.value)
      {
        match = currentTimeValue >= fromTime.value && currentTimeValue < toTime.value;
      }

      return match;
    });

    return mobile ? mobile.number : null;
  };

  function parseMobileTime(time)
  {
    const parts = time.split(':');
    const hours = parseInt(parts[0], 10);
    const minutes = parseInt(parts[1], 10);

    return {
      hours,
      minutes,
      value: hours * 1000 + minutes
    };
  }

  return userSchema;
};
