// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const transliteration = require('transliteration');

exports.name = 'User';

exports.setUp = (app, mongoose) =>
{
  const userMobileSchema = new mongoose.Schema({
    fromTime: {
      type: String,
      required: true,
      pattern: /^[0-9]{2}:[0-9]{2}$/
    },
    toTime: {
      type: String,
      required: true,
      pattern: /^[0-9]{2}:[0-9]{2}$/
    },
    number: {
      type: String,
      required: true
    }
  }, {
    _id: false
  });

  const userSchema = new mongoose.Schema({
    login: {
      type: String,
      trim: true,
      required: true
    },
    password: {
      type: String,
      trim: true,
      required: true
    },
    email: String,
    prodFunction: {
      type: String,
      ref: 'ProdFunction',
      default: null
    },
    privileges: [String],
    aors: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Aor'
    }],
    mrps: [String],
    company: {
      type: String,
      ref: 'Company'
    },
    orgUnitType: {
      type: String,
      enum: ['division', 'subdivision', 'unspecified'],
      default: 'unspecified'
    },
    orgUnitId: {
      type: String,
      default: null
    },
    personellId: String,
    card: String,
    cardUid: String,
    firstName: String,
    lastName: String,
    searchName: String,
    registerDate: String,
    active: Boolean,
    kdPosition: String,
    kdDivision: String,
    kdId: {
      type: Number,
      default: -1
    },
    vendor: {
      type: String,
      ref: 'Vendor',
      default: null
    },
    gender: {
      type: String,
      enum: ['female', 'male'],
      default: 'male'
    },
    mobile: [userMobileSchema],
    presence: {
      type: Boolean,
      default: false
    },
    presenceAt: Date,
    preferences: {},
    apiKey: {
      type: String,
      default: ''
    }
  }, {
    id: false,
    minimize: false,
    toJSON: {
      transform: function(alarm, ret)
      {
        ret.password = undefined;
        ret.apiKey = undefined;

        return ret;
      }
    }
  });

  userSchema.index({kdId: 1});
  userSchema.index({login: 1});
  userSchema.index({personellId: 1});
  userSchema.index({card: 1});
  userSchema.index({cardUid: 1});
  userSchema.index({lastName: 1});
  userSchema.index({searchName: 1});
  userSchema.index({prodFunction: 1});
  userSchema.index({privileges: 1});
  userSchema.index({aors: 1});
  userSchema.index({apiKey: 1});

  userSchema.statics.TOPIC_PREFIX = 'users';

  userSchema.pre('save', function(next)
  {
    let searchName = (this.lastName || '') + (this.firstName || '');

    if (!searchName)
    {
      searchName = this.login;
    }

    this.searchName = userSchema.statics.transliterateName(searchName);

    next();
  });

  userSchema.statics.customizeLeanObject = function(leanModel)
  {
    leanModel.password = undefined;
    leanModel.apiKey = undefined;

    return leanModel;
  };

  userSchema.statics.transliterateName = function(name)
  {
    return transliteration
      .transliterate(name, {unknown: '?'})
      .replace(/[^a-zA-Z0-9]+/g, '')
      .toUpperCase();
  };

  userSchema.statics.anonymize = function(userId, done)
  {
    const User = this;

    step(
      function()
      {
        User.findById(userId, this.next());
      },
      function(err, user)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!user)
        {
          return this.skip(app.createError('NOT_FOUND', 400));
        }

        user.set(User.anonymizeData(userId));
        user.save(this.next());
      },
      done
    );
  };

  userSchema.statics.anonymizeData = function(userId)
  {
    return {
      login: `?${userId}?`,
      password: ']:->',
      active: false,
      firstName: '?',
      lastName: '?',
      email: '',
      prodFunction: null,
      privileges: [],
      aors: [],
      mrps: [],
      company: null,
      orgUnitType: 'unspecified',
      orgUnitId: null,
      personellId: '',
      card: '',
      cardUid: '',
      searchName: ']:->',
      kdPosition: '',
      kdDivision: '',
      kdId: -1,
      vendor: null,
      mobile: [],
      presence: false,
      gender: 'female'
    };
  };

  userSchema.statics.resolveMobile = function(mobileList, currentTimeValue)
  {
    if (!mobileList || !mobileList.length)
    {
      return null;
    }

    if (!currentTimeValue)
    {
      const currentDate = new Date();

      currentTimeValue = currentDate.getHours() * 1000 + currentDate.getMinutes();
    }

    const mobile = mobileList.find((mobile) =>
    {
      const fromTime = parseMobileTime(mobile.fromTime);
      const toTime = parseMobileTime(mobile.toTime === '00:00' ? '24:00' : mobile.toTime);
      let match = false;

      if (toTime.value < fromTime.value)
      {
        match = currentTimeValue < toTime.value || currentTimeValue >= fromTime.value;
      }
      else if (fromTime.value < toTime.value)
      {
        match = currentTimeValue >= fromTime.value && currentTimeValue < toTime.value;
      }

      return match;
    });

    return mobile ? mobile.number : null;
  };

  function parseMobileTime(time)
  {
    const parts = time.split(':');
    const hours = parseInt(parts[0], 10);
    const minutes = parseInt(parts[1], 10);

    return {
      hours,
      minutes,
      value: hours * 1000 + minutes
    };
  }

  mongoose.model(exports.name, userSchema);
};
