// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {express, user, updater, IsaEvent, IsaRequest} = module;

  const canView = user.auth('LOCAL', 'ISA:VIEW');
  const canManage = user.auth('LOCAL', 'ISA:MANAGE');

  // Apps
  ['isa'].forEach(appId =>
  {
    express.get(`/${appId}`, canView, (req, res) =>
    {
      res.format({
        'text/html': function()
        {
          res.render('index', updater.getAppTemplateData(appId, req));
        }
      });
    });
  });

  express.get('/isaEvents', canView, express.crud.browseRoute.bind(null, app, IsaEvent));
  express.get('/isaEvents;export.:format?', canView, express.crud.exportRoute.bind(null, app, {
    filename: 'ISA-EVENTS',
    freezeRows: 1,
    columns: {
      requestId: 15,
      division: 10,
      prodLine: 15,
      action: 20,
      time: 'datetime',
      user: 20,
      palletKind: 10,
      whman: 20
    },
    serializeRow: exportEvent,
    model: IsaEvent
  }));

  express.get('/isaRequests', canView, express.crud.browseRoute.bind(null, app, IsaRequest));
  express.get('/isaRequests;export.:format?', canView, express.crud.exportRoute.bind(null, app, {
    filename: 'ISA-REQUESTS',
    freezeRows: 1,
    columns: {
      id: 15,
      division: 10,
      prodLine: 15,
      type: 10,
      palletKind: 10,
      status: 15,
      requester: 20,
      requestedAt: 'datetime',
      whman: 20,
      respondedAt: 'datetime',
      finisher: 20,
      finishedAt: 'datetime',
      duration: {
        type: 'decimal',
        width: 10
      }
    },
    serializeRow: exportRequest,
    model: IsaRequest
  }));

  express.get('/isaShiftPersonnel/:shiftDate', canView, readShiftPersonnelRoute);
  express.put('/isaShiftPersonnel/:shiftDate', canManage, updateShiftPersonnelRoute);

  express.get('/isaActiveRequests', canView, browseAllActiveRequestsRoute);
  express.get('/isaActiveRequests/:line', canView, browseLineActiveRequestsRoute);
  express.patch('/isaActiveRequests/:line', canView, updateLineActiveRequestRoute);

  function readShiftPersonnelRoute(req, res, next)
  {
    const shiftDate = req.params.shiftDate === 'current' ? null : new Date(req.params.shiftDate);

    if (shiftDate && isNaN(shiftDate.getTime()))
    {
      return next(app.createError('INVALID_SHIFT_DATE', 400));
    }

    module.getShiftPersonnel(shiftDate, function(err, shiftPersonnel)
    {
      if (err)
      {
        return next(err);
      }

      res.json(shiftPersonnel);
    });
  }

  function updateShiftPersonnelRoute(req, res, next)
  {
    const shiftDate = req.params.shiftDate === 'current' ? null : new Date(req.params.shiftDate);

    if (shiftDate && isNaN(shiftDate.getTime()))
    {
      return next(app.createError('INVALID_SHIFT_DATE', 400));
    }

    const updater = user.createUserInfo(req.session.user, req);

    module.updateShiftPersonnel(shiftDate, req.body.users, updater, function(err, shiftPersonnel)
    {
      if (err)
      {
        return next(err);
      }

      res.json(shiftPersonnel);
    });
  }

  function browseAllActiveRequestsRoute(req, res, next)
  {
    module.getAllActiveRequests(function(err, requests)
    {
      if (err)
      {
        return next(err);
      }

      res.json({
        totalCount: requests.length,
        collection: requests
      });
    });
  }

  function browseLineActiveRequestsRoute(req, res, next)
  {
    module.getLineActiveRequests(req.params.line, function(err, requests)
    {
      if (err)
      {
        return next(err);
      }

      res.json({
        totalCount: requests.length,
        collection: requests
      });
    });
  }

  function updateLineActiveRequestRoute(req, res, next)
  {
    const sessionUser = req.session.user;
    const userData = {
      info: user.createUserInfo(sessionUser, req),
      canView: user.isAllowedTo(sessionUser, 'ISA:VIEW'),
      canManage: user.isAllowedTo(sessionUser, 'ISA:MANAGE'),
      isWhman: user.isAllowedTo(sessionUser, 'ISA:WHMAN'),
      isLocal: sessionUser.local
    };
    const prodLineId = req.params.line;
    const action = req.body.action;
    const parameters = req.body;

    module.updateActiveRequest(prodLineId, action, parameters, userData, function(err, result)
    {
      if (err)
      {
        return next(err);
      }

      if (result)
      {
        return res.json(result);
      }

      return res.sendStatus(204);
    });
  }

  function exportEvent(doc)
  {
    return {
      requestId: doc.requestId || '',
      division: doc.orgUnits.length ? doc.orgUnits[0].id : '',
      prodLine: doc.orgUnits.length ? doc.orgUnits[doc.orgUnits.length - 1].id : '',
      action: doc.type,
      time: doc.time,
      user: doc.user.label,
      palletKind: doc.data.palletKind ? doc.data.palletKind.label : '',
      whman: doc.data.responder ? doc.data.responder.label : ''
    };
  }

  function exportRequest(doc)
  {
    return {
      id: doc._id,
      division: doc.orgUnits.length ? doc.orgUnits[0].id : '',
      prodLine: doc.orgUnits.length ? doc.orgUnits[doc.orgUnits.length - 1].id : '',
      type: doc.type,
      palletKind: doc.data.palletKind ? doc.data.palletKind.label : '',
      status: doc.status,
      requester: doc.requester.label,
      requestedAt: doc.requestedAt,
      whman: doc.responder ? doc.responder.label : '',
      respondedAt: doc.respondedAt,
      finisher: doc.finisher ? doc.finisher.label : '',
      finishedAt: doc.finishedAt,
      duration: doc.status === 'finished' || doc.status === 'cancelled' ? doc.duration : 0
    };
  }
};
