// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const LineController = require('./LineController');

module.exports = (app, module) =>
{
  const {Luma2Line} = module;

  const controllers = new Map();

  app.broker.subscribe('app.started', onAppStarted);
  app.broker.subscribe('luma2.lines.added', onLineAdded);
  app.broker.subscribe('luma2.lines.edited', onLineEdited);
  app.broker.subscribe('luma2.lines.deleted', onLineDeleted);
  app.broker.subscribe('luma2.lines.orderChanged', onLineOrderChanged);

  function onAppStarted()
  {
    Luma2Line.find({active: true}, {_id: 1}).lean().exec((err, lines) =>
    {
      if (err)
      {
        throw new Error(app.createError(`Failed to find active lines to start: ${err.message}`));
      }

      lines.forEach(line => startLine(line._id));
    });
  }

  function onLineAdded({model})
  {
    startLine(model._id);
  }

  function onLineEdited({model})
  {
    stopLine(model._id);
    startLine(model._id);
  }

  function onLineDeleted({model})
  {
    stopLine(model._id);
  }

  function onLineOrderChanged({line})
  {
    if (controllers.has(line))
    {
      controllers.get(line).queueOrder();
    }
  }

  function startLine(lineId)
  {
    Luma2Line.findById(lineId).exec((err, line) =>
    {
      if (controllers.has(lineId))
      {
        return module.warn('Not starting already started line.', {line: lineId});
      }

      if (err)
      {
        return module.error(err, 'Failed to start line.', {line: lineId});
      }

      if (!line)
      {
        return module.error(new Error('Line not found.'), 'Failed to start line.', {line: lineId});
      }

      if (!line.active)
      {
        return module.warn('Not starting inactive line.', {line: lineId});
      }

      module.info('Starting line....', {line: lineId});

      controllers.set(lineId, new LineController(app, module, line));
    });
  }

  function stopLine(lineId)
  {
    if (!controllers.has(lineId))
    {
      return module.warn('Not stopping already stopped line.', {line: lineId});
    }

    module.info('Stopping line...', {line: lineId});

    controllers.get(lineId).destroy();
    controllers.delete(lineId);
  }
};
