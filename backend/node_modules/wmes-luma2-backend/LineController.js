// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const DEV = /msys/i.test(require('os').hostname());
const RESPONSE_TIMEOUT = 200;
const EVENT_CHECK_INTERVAL = 333;
const EVENT_REGISTER_SIZE = 1 + 2 + 1 + 1 + 2 + 1 + (DEV ? 2 : 0);
const MAX_EVENTS_PER_FRAME = 10;
const LITTLE_ENDIAN = false;
const MAX_EVENT_COUNT = 124;
const ORDER_COUNTER_ADDRESS = DEV ? 1 : 0;
const ORDER_START_ADDRESS = DEV ? 2 : 1;
const EVENT_COUNTER_ADDRESS = DEV ? 0 : 32;
const EVENT_START_ADDRESS = DEV ? 30 : 33;
const WORKSTATION_COUNT = 7;
const REARM_SHORT = 35;
const REARM_MEDIUM = 100;
const DEFAULT_INSPECTION_TIME = 91;
const PROGRAM_RE = /program\s+([0-9]+)\s+/i;
const MAX_ORDER_START_DIFF = DEV ? 99999999999999 : (2 * 60 * 1000);

const step = require('h5.step');
const modbus = require('h5.modbus');
const {BufferReader, BufferBuilder} = require('h5.buffers');
const {ObjectId} = require('mongoose').Types;
const {crc16} = require('crc');
const moment = require('moment');

module.exports = class LineController
{
  constructor(app, module, line)
  {
    this.checkEvents = this.checkEvents.bind(this);
    this.handleCheckEvents = this.handleCheckEvents.bind(this);

    this.module = module;
    this.line = line;
    this.crc16 = crc16(line._id);
    this.broker = app.broker.sandbox();
    this.logger = module.logger.create({line: line._id});
    this.master = this.createMaster();

    this.eventCheckTimer = null;
    this.eventCounter = -1;
    this.lastEventTime = 0;
    this.eventTimeCounter = 0;
  }

  destroy()
  {
    clearTimeout(this.eventCheckTimer);
    this.broker.destroy();
    this.master.destroy();
  }

  queueOrder()
  {
    const lineController = this;

    lineController.logger.info('Queueing order...');

    step(
      function()
      {
        lineController.module.ProdShiftOrder
          .find({prodLine: lineController.line._id})
          .select({
            orderId: 1,
            startedAt: 1,
            finishedAt: 1,
            shift: 1,
            workerCount: 1,
            laborTime: 1,
            'orderData.name': 1
          })
          .sort({startedAt: -1})
          .limit(2)
          .lean()
          .exec(this.next());
      },
      function(err, prodShiftOrders)
      {
        if (err)
        {
          return this.skip(new Error(`Failed to find ProdShiftOrder: ${err.message}`));
        }

        if (!prodShiftOrders.length)
        {
          return this.skip(new Error('No ProdShiftOrder found.'));
        }

        this.nextPso = prodShiftOrders[0];

        if (this.nextPso.finishedAt)
        {
          return this.skip(new Error(`Next ProdShiftOrder already finished: ${this.nextPso._id}`));
        }

        if (Math.abs(Date.now() - this.nextPso.startedAt) > MAX_ORDER_START_DIFF)
        {
          return this.skip(new Error(`Next ProdShiftOrder started too long ago: ${this.nextPso._id}`));
        }

        this.prevPso = prodShiftOrders.length > 1 ? prodShiftOrders[1] : null;

        const planMoment = moment.utc();

        if (planMoment.hours() < 6)
        {
          planMoment.subtract(1, 'days');
        }

        planMoment.startOf('day');

        const pipeline = [
          {$match: {_id: planMoment.toDate()}},
          {$unwind: '$lines'},
          {$match: {'lines._id': lineController.line._id}},
          {$unwind: '$lines.orders'},
          {$match: {'lines.orders.orderNo': this.nextPso.orderId}},
          {$project: {
            quantity: '$lines.orders.quantity',
            startAt: '$lines.orders.startAt'
          }}
        ];

        lineController.module.Plan
          .aggregate(pipeline)
          .exec(this.parallel());

        lineController.module.Order
          .findById(this.nextPso.orderId)
          .select({
            qty: 1,
            qtyDone: 1,
            'bom.name': 1
          })
          .lean()
          .exec(this.parallel());
      },
      function(err, planOrders, sapOrder)
      {
        if (err)
        {
          return this.skip(new Error(`Failed to find order data: ${err.message}`));
        }

        if (!sapOrder)
        {
          return this.skip(new Error('SAP order not found.'));
        }

        const workerCount = this.nextPso.workerCount || WORKSTATION_COUNT;

        this.nextOrder = {
          order: sapOrder._id,
          program: 0,
          quantity: 0,
          rearmTime: this.prevPso
            && this.prevPso.orderData
            && this.nextPso.orderData
            && this.prevPso.orderData.name === this.nextPso.orderData.name ? REARM_SHORT : REARM_MEDIUM,
          inspectionTime: DEFAULT_INSPECTION_TIME,
          taktTime: Math.ceil((this.nextPso.laborTime / 100 * 3600) / workerCount)
        };

        sapOrder.bom.forEach(component =>
        {
          const matches = component.name.match(PROGRAM_RE);

          if (matches)
          {
            this.nextOrder.program = parseInt(matches[1], 10);
          }
        });

        const shiftPlanOrder = planOrders.find(planOrder =>
        {
          const h = planOrder.startAt.getHours();
          const shift = h >= 6 && h < 14 ? 1 : h >= 14 && h < 22 ? 2 : 3;

          return shift === this.nextPso.shift;
        });

        if (shiftPlanOrder)
        {
          this.nextOrder.quantity = shiftPlanOrder.quantity;
        }
        else if (planOrders.length)
        {
          this.nextOrder.quantity = planOrders[0].quantity;
        }
        else if (sapOrder.qtyDone && sapOrder.qtyDone.total)
        {
          this.nextOrder.quantity = sapOrder.qty - sapOrder.qtyDone.total;
        }
        else
        {
          this.nextOrder.quantity = sapOrder.qty;
        }

        lineController.logger.debug('Resolved next order.', {nextOrder: this.nextOrder});

        if (this.nextOrder.program <= 0 || this.nextOrder.program > 0xFFFF)
        {
          return this.skip(new Error(`Invalid program: ${this.nextOrder.program}`));
        }

        if (this.nextOrder.quantity <= 0)
        {
          return this.skip(new Error(`Invalid quantity: ${this.nextOrder.quantity}`));
        }

        if (this.nextOrder.taktTime <= 1)
        {
          return this.skip(new Error(`Invalid takt time: ${this.nextOrder.taktTime}`));
        }
      },
      function()
      {
        const orderBuilder = new BufferBuilder();

        orderBuilder
          .pushUInt16(this.nextOrder.program, LITTLE_ENDIAN)
          .pushUInt32(this.nextOrder.order, LITTLE_ENDIAN)
          .pushUInt16(this.nextOrder.quantity, LITTLE_ENDIAN);

        for (let i = 0; i < WORKSTATION_COUNT; ++i)
        {
          orderBuilder
            .pushUInt16(this.nextOrder.rearmTime, LITTLE_ENDIAN)
            .pushUInt16(this.nextOrder.inspectionTime, LITTLE_ENDIAN)
            .pushUInt16(this.nextOrder.taktTime, LITTLE_ENDIAN);
        }

        const orderBuffer = orderBuilder.toBuffer();

        lineController.master.writeMultipleRegisters(
          ORDER_START_ADDRESS,
          orderBuffer,
          this.next()
        );
      },
      function(err, res)
      {
        if (err)
        {
          return this.skip(new Error(`Failed to write next order: ${err.message}`));
        }

        if (res.isException())
        {
          return this.skip(new Error(`Failed to write next order: ${res}`));
        }

        lineController.master.readHoldingRegisters(ORDER_COUNTER_ADDRESS, 1, this.next());
      },
      function(err, res)
      {
        if (err)
        {
          return this.skip(new Error(`Failed to read order counter: ${err.message}`));
        }

        if (res.isException())
        {
          return this.skip(new Error(`Failed to read order counter: ${res}`));
        }

        const oldOrderCounter = res.data[LITTLE_ENDIAN ? 'readUInt16LE' : 'readUInt16BE'](0, true);
        const newOrderCounter = oldOrderCounter + 1;

        lineController.master.writeSingleRegister(
          ORDER_COUNTER_ADDRESS,
          newOrderCounter,
          this.next()
        );
      },
      function(err, res)
      {
        if (err)
        {
          return this.skip(new Error(`Failed to write order counter: ${err.message}`));
        }

        if (res.isException())
        {
          return this.skip(new Error(`Failed to write order counter: ${res}`));
        }
      },
      function(err)
      {
        if (err)
        {
          lineController.logger.warn(err, 'Failed to queue order.');
        }
        else if (this.nextOrder)
        {
          lineController.logger.info('Order queued.', {queuedOrder: this.nextOrder});

          lineController.recordEvents({
            type: 'order-queued',
            order: this.nextOrder.order,
            program: this.nextOrder.program,
            pce: this.nextOrder.quantity
          });
        }
      }
    );
  }

  createMaster()
  {
    const master = modbus.createMaster({
      transport: {
        type: 'ip',
        maxBufferLength: 1000
      },
      connection: {
        socketOptions: {
          host: this.line.host,
          port: this.line.port,
          noDelay: true
        },
        autoOpen: true,
        autoReconnect: true,
        minConnectTime: 2500,
        maxReconnectTime: 5000,
        noActivityTime: 10000,
        closeOnDestroy: true,
        suppressErrorsAfterDestroy: true
      },
      suppressTransactionErrors: true,
      retryOnException: false,
      maxConcurrentTransactions: 1,
      defaultUnit: this.line.unit,
      defaultMaxRetries: 0,
      defaultTimeout: RESPONSE_TIMEOUT
    });

    master.on('error', this.onMasterError.bind(this));
    master.on('open', this.onMasterOpen.bind(this));
    master.on('close', this.onMasterClose.bind(this));

    return master;
  }

  recordEvents(events)
  {
    const {Luma2Event} = this.module;

    const time = new Date();
    const eventTypes = new Set();
    const eventsToSave = [];

    (Array.isArray(events) ? events : [events]).forEach(event =>
    {
      if (!event)
      {
        return;
      }

      if (!(event instanceof Luma2Event))
      {
        event = new Luma2Event({
          line: this.line._id,
          time,
          ...event
        });
      }

      eventsToSave.push(event.toJSON());
      eventTypes.add(event.type);
    });

    if (!eventsToSave.length)
    {
      return;
    }

    Luma2Event.insertMany(eventsToSave, {ordered: false, rawResult: true}, (err, res) =>
    {
      if (err && err.code !== 11000)
      {
        this.logger.error(err, 'Failed to record events.', {events: eventsToSave});

        return;
      }

      const count = res ? res.insertedCount : err && err.result ? err.result.nInserted : 0;

      if (count)
      {
        this.broker.publish('luma2.events.saved', {
          line: this.line._id,
          type: Array.from(eventTypes),
          count: count
        });
      }
    });
  }

  onMasterError(err)
  {
    if (err.code === 'ECONNREFUSED')
    {
      this.logger.warn('Failed to connect.', {
        host: this.line.host,
        port: this.line.port
      });
    }
    else
    {
      this.logger.error(err, 'MODBUS error.');
    }
  }

  onMasterOpen()
  {
    this.logger.info('Connected.');
    this.recordEvents({type: 'connected'});
    this.scheduleEventCheck();
  }

  onMasterClose()
  {
    this.logger.warn('Disconnected.');
    this.recordEvents({type: 'disconnected'});

    this.eventCounter = -1;
    this.lastEventTime = 0;
    this.eventTimeCounter = 0;
  }

  scheduleEventCheck()
  {
    clearTimeout(this.eventCheckTimer);
    this.eventCheckTimer = setTimeout(this.checkEvents, EVENT_CHECK_INTERVAL);
  }

  checkEvents()
  {
    if (this.master.isOpen())
    {
      this.master.readHoldingRegisters(EVENT_COUNTER_ADDRESS, 1, this.handleCheckEvents);
    }
  }

  handleCheckEvents(err, res)
  {
    if (err)
    {
      this.logger.warn(err, 'Failed to read event counter.');

      this.scheduleEventCheck();

      return;
    }

    if (res.isException())
    {
      this.logger.warn(new Error(res.toString()), 'Failed to read event counter.');

      this.scheduleEventCheck();

      return;
    }

    const newEventCounter = Math.min(
      res.data[LITTLE_ENDIAN ? 'readUInt16LE' : 'readUInt16BE'](0, true),
      MAX_EVENT_COUNT
    );

    if (this.eventCounter === -1)
    {
      this.fetchAllEvents(newEventCounter);

      return;
    }

    if (newEventCounter !== 0 && newEventCounter !== this.eventCounter)
    {
      this.fetchNewEvents(newEventCounter);

      return;
    }

    this.scheduleEventCheck();
  }

  fetchAllEvents(newEventCounter)
  {
    this.readEvents(0, MAX_EVENT_COUNT, (err, events) =>
    {
      if (err)
      {
        this.logger.warn(err, 'Failed to read all events.');
      }
      else
      {
        this.recordEvents(events);

        this.eventCounter = newEventCounter;
      }

      this.scheduleEventCheck();
    });
  }

  fetchNewEvents(newEventCounter)
  {
    // Event overflow
    if (newEventCounter < this.eventCounter)
    {
      // Read to the end
      this.readEvents(this.eventCounter, MAX_EVENT_COUNT - this.eventCounter, (err, events) =>
      {
        if (err)
        {
          return this.handleEventFetchFailure(err);
        }

        this.recordEvents(events);

        // Read remaining from the beginning
        this.readEvents(0, newEventCounter, (err, events) =>
        {
          if (err)
          {
            return this.handleEventFetchFailure(err);
          }

          this.recordEvents(events);

          this.eventCounter = newEventCounter;

          this.scheduleEventCheck();
        });
      });
    }
    else
    {
      // Read the difference
      this.readEvents(this.eventCounter, newEventCounter - this.eventCounter, (err, events) =>
      {
        if (err)
        {
          return this.handleEventFetchFailure(err);
        }

        this.recordEvents(events);

        this.eventCounter = newEventCounter;

        this.scheduleEventCheck();
      });
    }
  }

  handleEventFetchFailure(err)
  {
    this.logger.warn(err, 'Failed to read events.');

    this.scheduleEventCheck();
  }

  readEvents(startingEvent, eventCount, done)
  {
    if (eventCount === 0)
    {
      return done(null, []);
    }

    const batchCount = Math.ceil(eventCount / MAX_EVENTS_PER_FRAME);
    const steps = [];
    let remainingEventCount = eventCount;

    steps.push(function()
    {
      this.events = [];
    });

    for (let i = 0; i < batchCount; ++i)
    {
      eventCount = remainingEventCount <= MAX_EVENTS_PER_FRAME ? remainingEventCount : MAX_EVENTS_PER_FRAME;

      const startingAddress = EVENT_START_ADDRESS + EVENT_REGISTER_SIZE * startingEvent;
      const quantity = eventCount * EVENT_REGISTER_SIZE;

      steps.push(this.createReadBatchStep(startingAddress, quantity));

      remainingEventCount -= eventCount;
      startingEvent += eventCount;
    }

    steps.push(function(err)
    {
      done(err, this.events);
    });

    step(steps);
  }

  createReadBatchStep(startingAddress, quantity)
  {
    const lineController = this;

    return function(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!lineController.master.isOpen())
      {
        return this.skip(new Error('No MODBUS connection.'));
      }

      const next = this.next();

      lineController.master.readHoldingRegisters(startingAddress, quantity, (err, res) =>
      {
        if (err)
        {
          return next(err);
        }

        const reader = new BufferReader(res.data);

        while (reader.length)
        {
          const eventData = {
            type: reader.shiftUInt16(LITTLE_ENDIAN),
            time: reader.shiftUInt32(LITTLE_ENDIAN) * 1000,
            station: reader.shiftUInt16(LITTLE_ENDIAN),
            program: reader.shiftUInt16(LITTLE_ENDIAN),
            order: reader.shiftUInt32(LITTLE_ENDIAN),
            pce: reader.shiftUInt16(LITTLE_ENDIAN)
          };

          if (DEV)
          {
            reader.skip(4);
          }

          if (eventData.time === lineController.lastEventTime)
          {
            lineController.eventTimeCounter += 1;
            eventData.time += lineController.eventTimeCounter;
          }
          else
          {
            lineController.lastEventTime = eventData.time;
            lineController.eventTimeCounter = 0;
          }

          if (eventData.type > 0)
          {
            this.events.push(lineController.createEvent(eventData));
          }
        }

        next();
      });
    };
  }

  createEvent(data)
  {
    const {Luma2Event} = this.module;
    const time = data.time / 1000;
    const s = Math.floor(time);
    const ms = Math.round((time % 1) * 1000);

    return new Luma2Event({
      _id: new ObjectId(Buffer.from([
        (s >> 24) & 0xff,
        (s >> 16) & 0xff,
        (s >> 8) & 0xff,
        s & 0xff,
        (ms >> 8) & 0xff,
        ms & 0xff,
        (this.crc16 >> 8) & 0xff,
        this.crc16 & 0xff,
        data.type,
        data.station,
        (data.pce >> 8) & 0xff,
        data.pce & 0xff
      ])),
      line: this.line._id,
      type: Luma2Event.TYPES[data.type] || data.type.toString(),
      time: new Date(data.time),
      station: data.station,
      program: data.program,
      order: data.order,
      pce: data.pce
    });
  }
};
