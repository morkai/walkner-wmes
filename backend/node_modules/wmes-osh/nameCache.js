// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const locks = require('util/locks');

module.exports = (app, module) =>
{
  const CACHE = {};

  Object.keys(module.DICTIONARIES).forEach(dictionary =>
  {
    CACHE[dictionary] = null;

    app.broker.subscribe(`${module.DICTIONARIES[dictionary].model.TOPIC_PREFIX}.*`, () =>
    {
      CACHE[dictionary] = null;
    });
  });

  module.nameCache = {
    load
  };

  async function load(dictionaries)
  {
    const releaseLock = await locks.createAsync('osh/nameCache');

    const caches = await Promise.all(dictionaries.map(dictionary => loadDictionary(dictionary)));
    const cache = {};

    dictionaries.forEach((dictionary, i) =>
    {
      cache[dictionary] = caches[i];
    });

    releaseLock();

    return {
      all: (dictionary) =>
      {
        return cache[dictionary] || {};
      },
      single: (dictionary, id) =>
      {
        if (!id)
        {
          return '';
        }

        return cache[dictionary] && cache[dictionary][id] || id.toString();
      },
      multi: (dictionary, ids) =>
      {
        if (!Array.isArray(ids) || ids.length === 0)
        {
          return [];
        }

        return ids.map(id => cache[dictionary] && cache[dictionary][id] || id.toString());
      }
    };
  }

  async function loadDictionary(dictionary)
  {
    if (!CACHE[dictionary])
    {
      try
      {
        const models = await module.DICTIONARIES[dictionary].model
          .find({})
          .select({longName: 1})
          .lean()
          .exec();

        CACHE[dictionary] = {};

        models.forEach(model =>
        {
          CACHE[dictionary][model._id] = model.longName;
        });
      }
      catch (err)
      {
        module.error(err, 'Failed to load dictionary for name cache.', {dictionary});
      }
    }

    return CACHE[dictionary];
  }
};
