// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const userInfoSchema = require('user/models/userInfoSchema');

module.exports = (app, module, userSchema) =>
{
  userSchema.path('oshWorkplace', {
    type: Number,
    ref: 'OshWorkplace',
    default: 0
  });

  userSchema.path('oshDivision', {
    type: Number,
    ref: 'OshDivision',
    default: 0
  });

  userSchema.index({oshWorkplace: 1});
  userSchema.index({oshDivision: 1});

  userSchema.statics.dataAnonymizers.push(user =>
  {
    user.oshWorkplace = 0;
    user.oshDivision = 0;
  });

  userSchema.statics.EDITABLE_PROPERTIES.oshWorkplace = true;
  userSchema.statics.EDITABLE_PROPERTIES.oshDivision = true;

  userInfoSchema.path('oshWorkplace', {
    type: Number,
    ref: 'OshWorkplace'
  });

  userInfoSchema.path('oshDivision', {
    type: Number,
    ref: 'OshDivision'
  });

  app.broker.subscribe(`osh.workplaces.deleted`, onWorkplaceDeleted);
  app.broker.subscribe(`osh.divisions.edited`, onDivisionEdited);
  app.broker.subscribe(`osh.divisions.deleted`, onDivisionDeleted);

  async function onWorkplaceDeleted({model})
  {
    const {User} = module;

    try
    {
      const conditions = {
        oshWorkplace: model._id
      };

      const users = await User
        .find(conditions)
        .select({_id: 1})
        .lean()
        .exec();

      if (!users.length)
      {
        return;
      }

      await User.collection.updateMany(conditions, {$set: {oshWorkplace: null, oshDivision: null}});

      users.forEach(user =>
      {
        app.broker.publish(`users.updated.${user._id}`, {
          _id: user._id,
          oshWorkplace: null,
          oshDivision: null
        });
      });
    }
    catch (err)
    {
      module.error(err, `Failed to update users after workplace deletion.`);
    }
  }

  async function onDivisionEdited({model})
  {
    if (!model.lastModifiedPaths().includes('workplace'))
    {
      return;
    }

    const {User} = module;

    try
    {
      const conditions = {
        oshDivision: model._id,
        oshWorkplace: {$ne: model.workplace}
      };

      const users = await User
        .find(conditions)
        .select({_id: 1})
        .lean()
        .exec();

      if (!users.length)
      {
        return;
      }

      await User.collection.updateMany(conditions, {$set: {oshWorkplace: model.workplace}});

      users.forEach(user =>
      {
        app.broker.publish(`users.updated.${user._id}`, {
          _id: user._id,
          oshWorkplace: model.workplace
        });
      });
    }
    catch (err)
    {
      module.error(err, `Failed to update users after division edit.`);
    }
  }

  async function onDivisionDeleted({model})
  {
    const {User} = module;

    try
    {
      const conditions = {
        oshDivision: model._id
      };

      const users = await User
        .find(conditions)
        .select({_id: 1})
        .lean()
        .exec();

      if (!users.length)
      {
        return;
      }

      await User.collection.updateMany(conditions, {$set: {oshDivision: null}});

      users.forEach(user =>
      {
        app.broker.publish(`users.updated.${user._id}`, {
          _id: user._id,
          oshDivision: null
        });
      });
    }
    catch (err)
    {
      module.error(err, `Failed to update users after division deletion.`);
    }
  }
};
