// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const userInfoSchema = require('user/models/userInfoSchema');

module.exports = (app, module, userSchema) =>
{
  userSchema.path('oshDivision', {
    type: Number,
    ref: 'OshDivision',
    default: 0
  });

  userSchema.path('oshWorkplace', {
    type: Number,
    ref: 'OshWorkplace',
    default: 0
  });

  userSchema.path('oshDepartment', {
    type: Number,
    ref: 'OshDepartment',
    default: 0
  });

  userSchema.path('oshExternal', {
    type: Boolean,
    default: false
  });

  userSchema.index({oshDivision: 1});
  userSchema.index({oshWorkplace: 1});
  userSchema.index({oshDepartment: 1});

  userSchema.statics.dataAnonymizers.push(user =>
  {
    user.oshDivision = 0;
    user.oshWorkplace = 0;
    user.oshDepartment = 0;
    user.oshExternal = false;
  });

  userSchema.statics.EDITABLE_PROPERTIES.oshDivision = true;
  userSchema.statics.EDITABLE_PROPERTIES.oshWorkplace = true;
  userSchema.statics.EDITABLE_PROPERTIES.oshDepartment = true;
  userSchema.statics.EDITABLE_PROPERTIES.oshExternal = true;

  userInfoSchema.path('oshDivision', {
    type: Number,
    ref: 'OshDivision'
  });

  userInfoSchema.path('oshWorkplace', {
    type: Number,
    ref: 'OshWorkplace'
  });

  userInfoSchema.path('oshDepartment', {
    type: Number,
    ref: 'OshDepartment'
  });

  app.broker.subscribe(`osh.divisions.deleted`, onDivisionDeleted);
  app.broker.subscribe(`osh.workplaces.edited`, onWorkplaceEdited);
  app.broker.subscribe(`osh.workplaces.deleted`, onWorkplaceDeleted);
  app.broker.subscribe(`osh.departments.edited`, onDepartmentEdited);
  app.broker.subscribe(`osh.departments.deleted`, onDepartmentDeleted);

  function onDivisionDeleted({model})
  {
    resetOrgUnits(model, ['oshDivision', 'oshWorkplace', 'oshDepartment']);
  }

  async function onWorkplaceEdited({model: workplace})
  {
    if (!workplace.lastModifiedPaths().includes('division'))
    {
      return;
    }

    const {User} = module;

    try
    {
      const conditions = {
        oshWorkplace: workplace._id,
        oshDivision: {$ne: workplace.division}
      };

      const users = await User
        .find(conditions)
        .select({_id: 1})
        .lean()
        .exec();

      if (!users.length)
      {
        return;
      }

      const $set = {
        oshDivision: workplace.division
      };

      await User.collection.updateMany(conditions, {$set});

      users.forEach(user =>
      {
        app.broker.publish(`users.updated.${user._id}`, {
          _id: user._id,
          ...$set
        });
      });
    }
    catch (err)
    {
      module.error(err, `Failed to update users after workplace edit.`);
    }
  }

  function onWorkplaceDeleted({model})
  {
    resetOrgUnits(model, ['oshWorkplace', 'oshDepartment']);
  }

  async function onDepartmentEdited({model})
  {
    if (!model.lastModifiedPaths().includes('workplace'))
    {
      return;
    }

    const {User, OshWorkplace} = module;

    try
    {
      const conditions = {
        oshDepartment: model._id,
        oshWorkplace: {$ne: model.workplace}
      };

      const users = await User
        .find(conditions)
        .select({_id: 1})
        .lean()
        .exec();

      if (!users.length)
      {
        return;
      }

      const workplace = await OshWorkplace
        .findById(model.workplace)
        .select({division: 1})
        .lean()
        .exec();

      const $set = {
        oshDivision: workplace ? workplace.division : 0,
        oshWorkplace: workplace ? workplace._id : 0,
        oshDepartment: workplace && workplace.division ? model._id : 0
      };

      await User.collection.updateMany(conditions, {$set});

      users.forEach(user =>
      {
        app.broker.publish(`users.updated.${user._id}`, {
          _id: user._id,
          ...$set
        });
      });
    }
    catch (err)
    {
      module.error(err, `Failed to update users after department edit.`);
    }
  }

  function onDepartmentDeleted({model})
  {
    resetOrgUnits(model, ['oshDepartment']);
  }

  async function resetOrgUnits(model, propsToReset)
  {
    const {User} = module;

    try
    {
      const conditions = {
        [propsToReset[0]]: model._id
      };

      const users = await User
        .find(conditions)
        .select({_id: 1})
        .lean()
        .exec();

      if (!users.length)
      {
        return;
      }

      const $set = {};

      for (const prop of propsToReset)
      {
        $set[prop] = 0;
      }

      await User.collection.updateMany(conditions, {$set});

      users.forEach(user =>
      {
        app.broker.publish(`users.updated.${user._id}`, {
          _id: user._id,
          ...$set
        });
      });
    }
    catch (err)
    {
      module.error(err, `Failed to update users after org unit deletion.`, {
        orgUnitType: propsToReset[0],
        orgUnitId: model._id
      });
    }
  }
};
