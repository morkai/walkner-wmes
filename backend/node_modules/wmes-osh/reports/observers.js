// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const moment = require('moment');
const step = require('h5.step');
const util = require('reports/util');

exports.models = [
  require('wmes-osh/models/oshObservation'),
  require('wmes-osh/models/oshTarget'),
  require('wmes-osh/models/oshEmployment'),
  require('settings/models/setting')
];

exports.report = (app, module, options, done) =>
{
  const {
    Setting,
    OshObservation,
    OshTarget,
    OshEmployment
  } = module;

  options.fromTime = 0;
  options.toTime = 0;
  options.orgUnitType = null;
  options.orgUnitIds = [];

  options.conditions.forEach(term =>
  {
    if (term.name === 'ge' && term.args[0] === 'date')
    {
      options.fromTime = term.args[1];

      return;
    }

    if (term.name === 'lt' && term.args[0] === 'date')
    {
      options.toTime = term.args[1];

      return;
    }

    if ((term.name === 'eq' || term.name === 'in')
      && (term.args[0] === 'division' || term.args[0] === 'workplace' || term.args[0] === 'department'))
    {
      options.orgUnitType = term.args[0];
      options.orgUnitIds = term.name === 'eq' ? [term.args[1]] : term.args[1];
    }
  });

  if (!options.fromTime)
  {
    options.fromTime = moment().startOf('month').subtract(3, 'months').valueOf();
  }

  if (!options.toTime || options.toTime > Date.now())
  {
    options.toTime = moment().startOf('month').add(1, 'months').valueOf();
  }

  if (options.toTime <= options.fromTime)
  {
    options.toTime = moment(options.fromTime).add(1, 'months').valueOf();
  }

  delete options.conditions;

  const results = {
    options,
    settings: {},
    userLabels: {
      undefined: '?'
    },
    months: [],
    orgUnits: {},
    users: {}
  };

  const LOCATION_TO_USER_PROP = {
    division: 'oshDivision',
    workplace: 'oshWorkplace',
    department: 'oshDepartment'
  };
  const USER_ORG_UNIT_PROP = LOCATION_TO_USER_PROP[options.orgUnitType];
  const ENTRY_ORG_UNIT_PROP = options.orgUnitType;

  const userDepartments = new Set();
  const minMonthKey = moment(options.fromTime).startOf('month').utc(true).valueOf();
  const maxMonthKey = moment(options.toTime).startOf('month').utc(true).valueOf();

  step(
    function()
    {
      Setting
        .find({
          _id: {$in: Object.keys(results.settings).map(s => `osh.${s}`)}
        })
        .select({value: 1})
        .lean()
        .exec(this.parallel());
    },
    function(err, settings)
    {
      if (err)
      {
        return this.skip(err);
      }

      settings.forEach(setting =>
      {
        results.settings[setting._id.split('.').pop()] = setting.value;
      });
    },
    function()
    {
      handleObservations(this.group());
    },
    function(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const conditions = {
        _id: {
          $gte: moment(options.fromTime).utc(true).toDate()
        }
      };

      if (options.toTime > options.fromTime)
      {
        conditions._id.$lt = moment(options.toTime).utc(true).toDate();
      }

      OshTarget
        .find(conditions)
        .sort({_id: 1})
        .lean()
        .exec(this.parallel());

      OshEmployment
        .find(conditions)
        .sort({_id: 1})
        .lean()
        .exec(this.parallel());
    },
    function(err, targets, employments)
    {
      if (err)
      {
        return this.skip(err);
      }

      const usedOrgUnits = prepareUsedOrgUnits(employments);

      handleTargets(targets, usedOrgUnits);
      handleEmployments(employments, usedOrgUnits);
    },
    function(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const month = moment.utc(minMonthKey);

      while (month.valueOf() < maxMonthKey)
      {
        results.months.push(month.valueOf());

        month.add(1, 'months');
      }

      results.orgUnits = Object.values(results.orgUnits);

      const divisions = new Map();
      const workplaces = new Map();
      const departments = [];

      results.orgUnits.forEach(orgUnit =>
      {
        if (orgUnit.workplace === 0)
        {
          divisions.set(orgUnit.division, orgUnit);
        }
        else if (orgUnit.department === 0)
        {
          workplaces.set(orgUnit.workplace, orgUnit);
        }
        else
        {
          departments.push(orgUnit);
        }
      });

      departments.forEach(department =>
      {
        const workplace = workplaces.get(department.workplace);
        const division = divisions.get(department.division);
        const overall = divisions.get(0);

        Object.keys(department.months).forEach(monthKey =>
        {
          const childMonth = department.months[monthKey];

          [overall, division, workplace].forEach(parent =>
          {
            if (!parent.months[monthKey])
            {
              parent.months[monthKey] = createOrgUnitMonth();
            }

            const parentMonth = parent.months[monthKey];

            parentMonth.employed += childMonth.employed;
            parentMonth.observers += childMonth.observers;

            childMonth.metrics.forEach((v, k) =>
            {
              parentMonth.metrics[k] += v;
            });

            childMonth.engaged.forEach(user =>
            {
              parentMonth.engaged.add(user);
            });
          });
        });
      });

      results.orgUnits.forEach(orgUnit =>
      {
        Object.keys(orgUnit.months).forEach(key =>
        {
          const month = orgUnit.months[key];

          month.engaged = month.engaged.size;
        });
      });

      results.users = Object.values(results.users).sort(sortUsers);
    },
    function(err)
    {
      done(err, results);
    }
  );

  function sortUsers(a, b)
  {
    return results.userLabels[a.id].localeCompare(results.userLabels[b.id], undefined, {sensitivity: 'base'});
  }

  function getUserOrgUnit(monthKey, userInfo)
  {
    const {oshDivision, oshWorkplace, oshDepartment} = userInfo;

    if (oshDepartment)
    {
      userDepartments.add(oshDepartment);
    }

    return getOrgUnit(monthKey, {
      division: oshDivision || 0,
      workplace: oshWorkplace || 0,
      department: oshDepartment || 0
    });
  }

  function getOrgUnit(monthKey, {division, workplace, department})
  {
    const id = `${division}:${workplace}:${department}`;

    if (!results.orgUnits[id])
    {
      results.orgUnits[id] = {
        division,
        workplace,
        department,
        months: {}
      };
    }

    if (!results.orgUnits[id].months[monthKey])
    {
      results.orgUnits[id].months[monthKey] = createOrgUnitMonth();
    }

    return results.orgUnits[id];
  }

  function createOrgUnitMonth()
  {
    return {
      employed: 0,
      observers: 0,
      engaged: new Set(),
      targets: {
        minObservers: 0,
        minObsCardsPerObserver: 0,
        minSafeObs: 0,
        maxSafeObs: 100,
        contact: 0
      },
      metrics: createMetrics()
    };
  }

  function getUser(monthKey, user)
  {
    const id = String(user._id || user.id);

    if (!results.users[id])
    {
      results.userLabels[id] = user.label || `${user.lastName} ${user.firstName}`.trim() || user.login;

      results.users[id] = {
        id,
        months: {}
      };
    }

    if (!results.users[id].months[monthKey])
    {
      results.users[id].months[monthKey] = {
        targets: {},
        metrics: createMetrics()
      };
    }

    return results.users[id];
  }

  function createMetrics()
  {
    return [
      0, // 0. Cards
      0, // 1. Observations
      0, // 2. Behaviors
      0, // 3. Safe behaviors
      0, // 4. Risky behaviors
      0, // 5. Easy behaviors
      0, // 6. Hard behaviors
      0, // 7. Work conditions
      0, // 8. Easy work conditions
      0 //  9. Hard work conditions
    ];
  }

  function prepareUsedOrgUnits(employments)
  {
    const usedOrgUnits = {
      division: new Set([0]),
      workplace: new Set(),
      department: new Set()
    };

    if (ENTRY_ORG_UNIT_PROP === 'department')
    {
      options.orgUnitIds.forEach(id => userDepartments.add(id));
    }

    employments.forEach(employment =>
    {
      employment.departments.forEach(d =>
      {
        if (!d.department)
        {
          return;
        }

        if (!ENTRY_ORG_UNIT_PROP
          || userDepartments.has(d.department)
          || (ENTRY_ORG_UNIT_PROP === 'division' && options.orgUnitIds.includes(d.division))
          || (ENTRY_ORG_UNIT_PROP === 'workplace' && options.orgUnitIds.includes(d.workplace)))
        {
          usedOrgUnits.division.add(d.division);
          usedOrgUnits.workplace.add(d.workplace);
          usedOrgUnits.department.add(d.department);
        }
      });
    });

    return usedOrgUnits;
  }

  function isUsedOrgUnit(orgUnit, usedOrgUnits)
  {
    return (orgUnit.department && usedOrgUnits.department.has(orgUnit.department))
      || (!orgUnit.department && orgUnit.workplace && usedOrgUnits.workplace.has(orgUnit.workplace))
      || (!orgUnit.department && !orgUnit.workplace && usedOrgUnits.division.has(orgUnit.division));
  }

  function handleTargets(targets, usedOrgUnits)
  {
    targets.forEach(target =>
    {
      const monthKey = target._id.getTime();

      target.orgUnits.forEach(ou =>
      {
        if (!isUsedOrgUnit(ou, usedOrgUnits))
        {
          return;
        }

        const orgUnit = getOrgUnit(monthKey, ou);
        const month = orgUnit.months[monthKey];

        Object.assign(month.targets, _.pick(ou.targets, Object.keys(month.targets)));
      });
    });
  }

  function handleEmployments(employments, usedOrgUnits)
  {
    employments.forEach(employment =>
    {
      const monthKey = employment._id.getTime();

      employment.departments.forEach(ou =>
      {
        if (!usedOrgUnits.department.has(ou.department))
        {
          return;
        }

        const orgUnit = getOrgUnit(monthKey, ou);

        orgUnit.months[monthKey].employed += ou.total;
        orgUnit.months[monthKey].observers += ou.observers;

        ou.observerUsers.forEach(observer =>
        {
          getUser(monthKey, observer);
        });
      });
    });
  }

  function handleObservations(done)
  {
    const conditions = {
      date: {
        $gte: moment(options.fromTime).utc(true).toDate(),
        $lt: moment(options.toTime).utc(true).toDate()
      }
    };

    if (options.orgUnitIds.length)
    {
      conditions[`creator.${USER_ORG_UNIT_PROP}`] = {$in: options.orgUnitIds};
    }

    const stream = OshObservation
      .find(conditions)
      .select({
        users: 0,
        attachments: 0,
        changes: 0
      })
      .lean()
      .cursor();
    const next = _.once(done);

    stream.on('error', next);
    stream.on('end', next);
    stream.on('data', handleObservation);
  }

  function handleObservation(entry)
  {
    const monthKey = util.utc.createGroupKey('month', entry.date, false);
    const orgUnit = getUserOrgUnit(monthKey, entry.creator);
    const user = getUser(monthKey, entry.creator);
    const metrics = [orgUnit.months[monthKey].metrics, user.months[monthKey].metrics];

    orgUnit.months[monthKey].engaged.add(entry.creator.id);

    inc(0, 1);
    inc(1, entry.behaviors.length + entry.workConditions.length);

    entry.behaviors.forEach(o =>
    {
      inc(2, 1);

      if (o.safe)
      {
        inc(3, 1);
      }
      else
      {
        inc(4, 1);
        inc(o.easy ? 5 : 6, 1);
      }
    });

    entry.workConditions.forEach(o =>
    {
      inc(7, 1);
      inc(o.easy ? 8 : 9, 1);
    });

    function inc(metric, count)
    {
      metrics.forEach(m =>
      {
        m[metric] += count;
      });
    }
  }
};
