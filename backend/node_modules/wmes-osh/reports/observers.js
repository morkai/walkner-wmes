// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const moment = require('moment');
const step = require('h5.step');
const util = require('reports/util');

exports.models = [
  require('wmes-osh/models/oshObservation'),
  require('wmes-osh/models/oshEmployment'),
  require('settings/models/setting')
];

exports.report = (app, module, options, done) =>
{
  const {
    Setting,
    OshObservation,
    OshEmployment
  } = module;

  options.fromTime = 0;
  options.toTime = 0;
  options.oshDivision = [];
  options.oshWorkplace = [];
  options.oshDepartment = [];

  let orgUnitType = null;
  let orgUnitIds = [];

  options.conditions.forEach(term =>
  {
    if (term.name === 'ge' && term.args[0] === 'date')
    {
      options.fromTime = term.args[1];

      return;
    }

    if (term.name === 'lt' && term.args[0] === 'date')
    {
      options.toTime = term.args[1];

      return;
    }

    if ((term.name === 'eq' || term.name === 'in')
      && (term.args[0] === 'oshDivision' || term.args[0] === 'oshWorkplace' || term.args[0] === 'oshDepartment'))
    {
      orgUnitType = term.args[0];
      orgUnitIds = term.name === 'eq' ? [term.args[1]] : term.args[1];

      options[orgUnitType] = orgUnitIds;
    }
  });

  if (!options.fromTime)
  {
    options.fromTime = moment().startOf('month').subtract(3, 'months').valueOf();
  }

  delete options.conditions;

  const minMonthKey = moment(options.fromTime).startOf('month').valueOf();
  let maxMonthKey = 0;

  const results = {
    options,
    settings: {
      minObsCards: 0,
      minSafeObs: 0,
      maxSafeObs: 100,
      observersPerDepartment: 20,
      obsCardsPerDepartment: 80
    },
    months: [],
    orgUnits: {},
    users: {}
  };

  step(
    function()
    {
      Setting
        .find({
          _id: {$in: Object.keys(results.settings).map(s => `osh.${s}`)}
        })
        .select({value: 1})
        .lean()
        .exec(this.parallel());

      const employmentConditions = {
        _id: {
          $gte: moment(options.fromTime).utc(true).toDate()
        }
      };

      if (options.toTime > options.fromTime)
      {
        employmentConditions._id.$lt = moment(options.toTime).utc(true).toDate();
      }

      OshEmployment
        .find(employmentConditions)
        .sort({_id: 1})
        .lean()
        .exec(this.parallel());
    },
    function(err, settings, employments)
    {
      if (err)
      {
        return this.skip(err);
      }

      settings.forEach(setting =>
      {
        results.settings[setting._id.split('.').pop()] = setting.value;
      });

      employments.forEach(employment =>
      {
        employment.departments.forEach(d =>
        {
          if (!d.department)
          {
            return;
          }

          if (options.oshDivision.length && !options.oshDivision.includes(d.division))
          {
            return;
          }

          if (options.oshWorkplace.length && !options.oshWorkplace.includes(d.workplace))
          {
            return;
          }

          if (options.oshDepartment.length && !options.oshDepartment.includes(d.department))
          {
            return;
          }

          const group = getOrgUnit(d.department);

          group.employees += d.total;
          group.observers += d.observers;
        });
      });
    },
    function()
    {
      const conditions = {
        date: {
          $gte: moment(options.fromTime).utc(true).toDate()
        }
      };

      if (options.toTime > options.fromTime)
      {
        conditions.date.$lt = moment(options.toTime).utc(true).toDate();
      }

      ['oshDivision', 'oshWorkplace', 'oshDepartment'].forEach(orgUnitType =>
      {
        if (options[orgUnitType].length)
        {
          conditions[`creator.${orgUnitType}`] = {$in: options[orgUnitType]};
        }
      });

      const stream = OshObservation
        .find(conditions)
        .select({
          users: 0,
          attachments: 0,
          changes: 0
        })
        .lean()
        .cursor();
      const next = _.once(this.parallel());

      stream.on('error', next);
      stream.on('end', next);
      stream.on('data', handleEntry);
    },
    function(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const month = moment(maxMonthKey);

      while (month.valueOf() >= minMonthKey)
      {
        results.months.push(month.valueOf());

        month.subtract(1, 'months');
      }

      results.orgUnits = Object.values(results.orgUnits);

      results.users = Object
        .values(results.users)
        .sort((a, b) => a.label.localeCompare(b.label, undefined, {sensitivity: 'base'}));
    },
    function(err)
    {
      done(err, results);
    }
  );

  function getOrgUnit(id)
  {
    if (!results.orgUnits[id])
    {
      results.orgUnits[id] = {
        department: id,
        employees: 0,
        observers: 0,
        metrics: createMetrics()
      };
    }

    return results.orgUnits[id];
  }

  function getUser(user)
  {
    const id = String(user._id || user.id);

    if (!results.users[id])
    {
      results.users[id] = {
        id,
        label: user.label || `${user.lastName} ${user.firstName}`.trim() || user.login,
        totals: createMetrics(),
        months: {}
      };
    }

    return results.users[id];
  }

  function createMetrics()
  {
    return [
      0, // 0. Cards
      0, // 1. Observations
      0, // 2. Behaviors
      0, // 3. Safe behaviors
      0, // 4. Risky behaviors
      0, // 5. Easy behaviors
      0, // 6. Hard behaviors
      0, // 7. Work conditions
      0, // 8. Easy work conditions
      0 //  9. Hard work conditions
    ];
  }

  function handleEntry(entry)
  {
    const monthKey = util.createGroupKey('month', moment.utc(entry.date).local(true).toDate(), false);

    if (monthKey > maxMonthKey)
    {
      maxMonthKey = monthKey;
    }

    const user = getUser(entry.creator);

    if (!user.months[monthKey])
    {
      user.months[monthKey] = createMetrics();
    }

    const orgUnit = getOrgUnit(entry.creator.oshDepartment).metrics;
    const total = user.totals;
    const month = user.months[monthKey];

    orgUnit[0] += 1;
    total[0] += 1;
    month[0] += 1;

    orgUnit[1] += entry.behaviors.length + entry.workConditions.length;
    total[1] += entry.behaviors.length + entry.workConditions.length;
    month[1] += entry.behaviors.length + entry.workConditions.length;

    entry.behaviors.forEach(o =>
    {
      orgUnit[2] += 1;
      total[2] += 1;
      month[2] += 1;

      if (o.safe)
      {
        orgUnit[3] += 1;
        total[3] += 1;
        month[3] += 1;
      }
      else
      {
        orgUnit[4] += 1;
        total[4] += 1;
        month[4] += 1;
        orgUnit[o.easy ? 5 : 6] += 1;
        total[o.easy ? 5 : 6] += 1;
        month[o.easy ? 5 : 6] += 1;
      }
    });

    entry.workConditions.forEach(o =>
    {
      orgUnit[7] += 1;
      total[7] += 1;
      month[7] += 1;
      orgUnit[o.easy ? 8 : 9] += 1;
      total[o.easy ? 8 : 9] += 1;
      month[o.easy ? 8 : 9] += 1;
    });
  }
};
