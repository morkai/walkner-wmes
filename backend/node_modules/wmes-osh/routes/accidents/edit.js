// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshAccident
  } = module;

  const releaseLock = await locks.createAsync(`${OshAccident.TOPIC_PREFIX}.${req.params.id}`);

  const sessionUser = req.session.user;
  const updater = module.createUserInfo(sessionUser, req);
  const updatedAt = new Date();

  try
  {
    const accident = await OshAccident.findById(req.params.id).exec();

    if (!accident)
    {
      return next(app.createError('Entry not found.', 'NOT_FOUND', 404));
    }

    const canManage = user.isAllowedTo(sessionUser, [[`${OshAccident.PRIVILEGE_PREFIX}:MANAGE`]]);
    const allowedInput = ['comment'];

    if (canManage)
    {
      allowedInput.push(
        'division',
        'workplace',
        'department',
        'building',
        'location',
        'station',
        'eventDate',
        'subject',
        'description',
        'attachments'
      );
    }

    const input = _.pick(req.body, allowedInput);

    module.attachments.prepareInput(input, accident);

    const usersToNotify = accident.applyChanges(input, updater, updatedAt);

    if (!usersToNotify)
    {
      return res.sendStatus(204);
    }

    await accident.save();

    app.broker.publish(`${OshAccident.TOPIC_PREFIX}.edited`, {
      user: updater,
      model: accident
    });

    app.broker.publish(`${OshAccident.TOPIC_PREFIX}.updated.${accident._id}`, {
      _id: accident._id,
      change: _.last(accident.changes),
      notify: usersToNotify
    });

    res.json(accident);
  }
  catch (err)
  {
    next(err);
  }
  finally
  {
    releaseLock();
  }
};
