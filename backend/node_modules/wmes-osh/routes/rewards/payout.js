// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshReward
  } = module;

  const {payouts} = req.body;

  if (!Array.isArray(payouts) || !payouts.length)
  {
    return next(app.createError('Invalid payouts.', 'INPUT', 400));
  }

  const entries = new Map();
  const recipients = new Set();

  payouts.forEach(payout =>
  {
    if (!payout || typeof payout.recipient !== 'string' || !Array.isArray(payout.entries))
    {
      return;
    }

    recipients.add(payout.recipient);

    payout.entries.forEach(rid =>
    {
      if (!entries.has(rid))
      {
        entries.set(rid, new Set());
      }

      entries.get(rid).add(payout.recipient);
    });
  });

  if (!Array.isArray(payouts) || !payouts.length)
  {
    return next(app.createError('Invalid payouts.', 'INPUT', 400));
  }

  const releaseLock = await locks.createAsync(OshReward.TOPIC_PREFIX);

  const paidAt = new Date();
  const payer = user.createUserInfo(req.session.user, req);

  try
  {
    const rewards = await OshReward
      .find({
        rid: Array.from(entries.keys()),
        'recipient.id': {$in: Array.from(recipients)},
        paid: false
      })
      .select({
        _id: 1,
        rid: 1,
        recipient: 1
      })
      .lean()
      .exec();

    const updated = [];
    const ops = [];

    rewards.forEach(reward =>
    {
      if (!entries.get(reward.rid).has(reward.recipient.id))
      {
        return;
      }

      updated.push({
        _id: reward._id,
        rid: reward.rid,
        paid: true,
        paidAt,
        payer
      });

      ops.push({
        updateOne: {
          filter: {_id: reward._id},
          update: {
            $set: {
              paid: true,
              paidAt,
              payer
            }
          }
        }
      });
    });

    if (!updated.length)
    {
      return res.sendStatus(204);
    }

    await OshReward.collection.bulkWrite(ops);

    app.broker.publish(`${OshReward.TOPIC_PREFIX}.updated`, {updated});

    res.sendStatus(204);
  }
  catch (err)
  {
    next(err);
  }
  finally
  {
    releaseLock();
  }
};
