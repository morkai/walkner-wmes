// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');
const jsonDeepEqual = require('util/jsonDeepEqual');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshNearMiss
  } = module;

  const releaseLocks = [await locks.createAsync(`${OshNearMiss.TOPIC_PREFIX}.${req.params.id}`)];

  const sessionUser = req.session.user;
  const updater = module.createUserInfo(sessionUser, req);
  const updatedAt = new Date();

  let session = null;

  try
  {
    session = await OshNearMiss.startSession();
    session.startTransaction();

    const nearMiss = await OshNearMiss.findById(req.params.id).session(session).exec();

    if (!nearMiss)
    {
      throw app.createError('Entry not found.', 'NOT_FOUND', 404);
    }

    const canManage = user.isAllowedTo(sessionUser, [[`${OshNearMiss.PRIVILEGE_PREFIX}:MANAGE`]]);
    const isCreator = nearMiss.isCreator(updater.id);
    const isImplementer = nearMiss.isImplementer(updater.id);
    const isCoordinator = nearMiss.isCoordinator(updater.id);
    const allowedInput = ['comment'];

    if (canManage || isCoordinator)
    {
      allowedInput.push(
        'status',
        'division',
        'workplace',
        'department',
        'building',
        'location',
        'station',
        'kind',
        'implementer',
        'priority'
      );
    }

    if (isCreator || isImplementer || canManage || isCoordinator)
    {
      allowedInput.push(
        'subject',
        'eventDate',
        'eventCategory',
        'reasonCategory',
        'problem',
        'reason',
        'suggestion',
        'plannedAt',
        'resolution',
        'attachments'
      );
    }

    const messages = [];
    const models = [nearMiss];

    const input = _.pick(
      module.attachments.prepareInput(req.body, nearMiss),
      allowedInput
    );

    let oldRelatedModel = null;
    let newRelatedModel = null;

    if (_.isPlainObject(input.resolution)
      && !jsonDeepEqual(input.resolution, nearMiss.resolution.toObject()))
    {
      const OldRelatedModel = module.TYPE_TO_MODEL[nearMiss.resolution.type];
      const NewRelatedModel = module.TYPE_TO_MODEL[input.resolution.type];
      const oldLock = OldRelatedModel && nearMiss.resolution._id
        ? locks.createAsync(`${OldRelatedModel.TOPIC_PREFIX}.${nearMiss.resolution._id}`)
        : null;
      const newLock = NewRelatedModel && input.resolution._id
        ? locks.createAsync(`${NewRelatedModel.TOPIC_PREFIX}.${input.resolution._id}`)
        : null;

      releaseLocks.push(...await Promise.all([oldLock, newLock]));

      [oldRelatedModel, newRelatedModel] = await Promise.all([
        OldRelatedModel && nearMiss.resolution._id
          ? OldRelatedModel.findById(nearMiss.resolution._id).session(session).exec()
          : null,
        NewRelatedModel && input.resolution._id
          ? NewRelatedModel.findById(input.resolution._id).session(session).exec()
          : null
      ]);

      if (input.resolution._id && !newRelatedModel)
      {
        throw app.createError('New resolution entry does not exist.', 'INPUT', 400);
      }

      const relation = {
        _id: nearMiss._id,
        rid: nearMiss.rid,
        type: 'nearMiss'
      };

      if (oldRelatedModel)
      {
        models.push(OldRelatedModel.deleteRelation({
          model: oldRelatedModel,
          relation,
          updater,
          updatedAt,
          messages
        }));
      }

      if (newRelatedModel)
      {
        models.push(NewRelatedModel.addRelation({
          model: newRelatedModel,
          relation,
          updater,
          updatedAt,
          messages
        }));

        if (newRelatedModel.status === 'finished')
        {
          input.status = 'finished';
        }
        else if (nearMiss.status === 'finished')
        {
          input.status = 'inProgress';
        }
      }
      else if (nearMiss.status === 'finished')
      {
        input.status = 'inProgress';
      }
    }

    if (input.status && input.status !== nearMiss.status)
    {
      if (input.status === 'inProgress' && !nearMiss.startedAt)
      {
        input.startedAt = updatedAt;
      }
      else if (input.status === 'finished')
      {
        input.finishedAt = updatedAt;
      }

      input.statusComment = input.comment || '';
      input.statusUpdater = updater;
    }

    await OshNearMiss.prepareCoordinatorsInput(
      nearMiss,
      input,
      ['kind', 'department', 'location'],
      {exceptUsers: [nearMiss.creator]}
    );

    if (!nearMiss.edit({input, updater, updatedAt, messages}))
    {
      return res.sendStatus(204);
    }

    await Promise.all(models.map(model => model ? model.save() : null));

    await session.commitTransaction();

    res.json(nearMiss);

    messages.forEach(({topic, message}) => app.broker.publish(topic, message));
  }
  catch (err)
  {
    next(err);

    if (session)
    {
      try
      {
        await session.abortTransaction();
      }
      catch (err)
      {
        if (err.message !== 'Cannot call abortTransaction twice')
        {
          module.error(err, `Failed to abort a transaction.`);
        }
      }
    }
  }
  finally
  {
    if (session)
    {
      session.endSession();
    }

    releaseLocks.forEach(releaseLock => releaseLock ? releaseLock() : null);
  }
};
