// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshNearMiss
  } = module;

  const sessionUser = req.session.user;
  const updater = user.createUserInfo(sessionUser, req);
  const updatedAt = new Date();

  try
  {
    const nearMiss = await OshNearMiss.findById(req.params.id).exec();

    if (!nearMiss)
    {
      return next(app.createError('Entry not found.', 'NOT_FOUND', 404));
    }

    const canManage = user.isAllowedTo(sessionUser, [['OSH:NEAR_MISSES:MANAGE']]);
    const isCreator = nearMiss.isCreator(updater.id);
    const isImplementer = nearMiss.isImplementer(updater.id);
    const isCoordinator = nearMiss.isCoordinator(updater.id);
    const allowedInput = ['comment'];

    if (canManage || isCoordinator)
    {
      allowedInput.push(
        'status',
        'kind',
        'implementer',
        'priority'
      );
    }

    if (isCreator || isImplementer || canManage || isCoordinator)
    {
      allowedInput.push(
        'subject',
        'workplace',
        'division',
        'building',
        'location',
        'eventDate',
        'eventCategory',
        'reasonCategory',
        'problem',
        'reason',
        'solution',
        'plannedAt',
        'attachments'
      );
    }

    const input = _.pick(req.body, allowedInput);

    if (_.isPlainObject(input.attachments))
    {
      const {added, edited, deleted} = input.attachments;
      const attachments = new Map();

      nearMiss.attachments.forEach(attachment =>
      {
        attachments.set(attachment._id, attachment.toObject());
      });

      if (Array.isArray(added))
      {
        module.attachments.claimPendingUploads(added).forEach(attachment =>
        {
          attachments.set(attachment._id, attachment);
        });
      }

      if (Array.isArray(edited))
      {
        edited.forEach(update =>
        {
          const attachment = attachments.get(update._id);

          if (attachment && typeof update.name === 'string' && update.name.length)
          {
            attachment.name = update.name;
          }
        });
      }

      if (Array.isArray(deleted))
      {
        deleted.forEach(attachmentId => attachments.delete(attachmentId));
      }

      input.attachments = Array.from(attachments.values()).sort((a, b) => a.date - b.date);
    }
    else
    {
      delete input.attachments;
    }

    if (input.status && input.status !== nearMiss.status)
    {
      if (input.status === 'inProgress' && !nearMiss.startedAt)
      {
        input.startedAt = updatedAt;
      }
      else if (input.status === 'finished')
      {
        input.finishedAt = updatedAt;
      }

      input.statusComment = input.comment || '';
      input.statusUpdater = updater;
    }

    if ((input.kind && input.kind !== nearMiss.kind)
      || (!nearMiss.userDivision && input.division && input.division !== nearMiss.division))
    {
      input.coordinators = await OshNearMiss.resolveCoordinators(nearMiss);
    }

    const usersToNotify = nearMiss.applyChanges(input, updater, updatedAt);

    if (!usersToNotify)
    {
      return res.sendStatus(204);
    }

    await nearMiss.save();

    app.broker.publish(`${OshNearMiss.TOPIC_PREFIX}.edited`, {
      user: updater,
      model: nearMiss
    });

    app.broker.publish(`${OshNearMiss.TOPIC_PREFIX}.updated.${nearMiss._id}`, {
      _id: nearMiss._id,
      change: _.last(nearMiss.changes),
      notify: usersToNotify
    });

    res.json(nearMiss);
  }
  catch (err)
  {
    next(err);
  }
};
