// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshKaizen
  } = module;

  const releaseLock = await locks.createAsync(`${OshKaizen.TOPIC_PREFIX}.${req.params.id}`);

  const sessionUser = req.session.user;
  const updater = module.createUserInfo(sessionUser, req);
  const updatedAt = new Date();

  try
  {
    const kaizen = await OshKaizen.findById(req.params.id).exec();

    if (!kaizen)
    {
      return next(app.createError('Entry not found.', 'NOT_FOUND', 404));
    }

    const canManage = user.isAllowedTo(sessionUser, [[`${OshKaizen.PRIVILEGE_PREFIX}:MANAGE`]]);
    const isCreator = kaizen.isCreator(updater.id);
    const isImplementer = kaizen.isImplementer(updater.id);
    const isCoordinator = kaizen.isCoordinator(updater.id);
    const allowedInput = ['comment'];

    if (canManage || isCoordinator)
    {
      allowedInput.push(
        'division',
        'workplace',
        'department',
        'building',
        'location',
        'station',
        'kind',
        'implementers',
        'kom'
      );
    }

    if (isCreator || isImplementer || canManage || isCoordinator)
    {
      allowedInput.push(
        'status',
        'subject',
        'kaizenCategory',
        'problem',
        'reason',
        'suggestion',
        'solution',
        'plannedAt',
        'attachments'
      );
    }

    const input = _.pick(req.body, allowedInput);

    module.attachments.prepareInput(input, kaizen);

    if (input.status && input.status !== kaizen.status)
    {
      if (input.status === 'inProgress' && !kaizen.startedAt)
      {
        input.startedAt = updatedAt;
      }
      else if (input.status === 'verify')
      {
        input.implementedAt = updatedAt;
      }
      else if (input.status === 'finished')
      {
        input.finishedAt = updatedAt;
      }

      input.statusComment = input.comment || '';
      input.statusUpdater = updater;

      if (input.status !== 'finished')
      {
        input.kom = false;
      }
    }
    else if (input.kom && kaizen.status !== 'finished')
    {
      input.kom = false;
    }

    await OshKaizen.prepareCoordinatorsInput(
      kaizen,
      input,
      ['kind', 'department', 'location'],
      {exceptUsers: [kaizen.creator].concat(input.implementers || [])}
    );

    const usersToNotify = kaizen.applyChanges(input, updater, updatedAt);

    if (!usersToNotify)
    {
      return res.sendStatus(204);
    }

    await kaizen.save();

    app.broker.publish(`${OshKaizen.TOPIC_PREFIX}.edited`, {
      user: updater,
      model: kaizen
    });

    app.broker.publish(`${OshKaizen.TOPIC_PREFIX}.updated.${kaizen._id}`, {
      _id: kaizen._id,
      change: _.last(kaizen.changes),
      notify: usersToNotify
    });

    res.json(kaizen);
  }
  catch (err)
  {
    next(err);
  }
  finally
  {
    releaseLock();
  }
};
