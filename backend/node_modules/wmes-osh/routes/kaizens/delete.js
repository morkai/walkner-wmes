// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshReward,
    OshKaizen
  } = module;

  const sessionUser = req.session.user;
  const updater = module.createUserInfo(sessionUser, req);
  let session = null;

  try
  {
    session = await OshKaizen.startSession();
    session.startTransaction();

    const kaizen = await OshKaizen.findById(req.params.id).session(session).exec();

    if (!kaizen)
    {
      throw app.createError('Entry not found.', 'NOT_FOUND', 404);
    }

    if (!user.isAllowedTo(sessionUser, [[`${OshKaizen.PRIVILEGE_PREFIX}:MANAGE`]])
      && !kaizen.canDelete(sessionUser._id))
    {
      throw app.createError('Forbidden.', 'AUTH', 403);
    }

    await OshKaizen.collection.deleteOne({_id: kaizen._id}, {session});

    const messages = [{
      topic: `${OshKaizen.TOPIC_PREFIX}.deleted`,
      message: {
        user: user.createUserInfo(sessionUser, req),
        model: kaizen
      }
    }];

    if (kaizen.status === 'finished')
    {
      await OshReward.updateEntry({
        entry: kaizen,
        createdAt: new Date(),
        creator: updater,
        recipients: [],
        totalAmount: 0,
        session,
        messages
      });
    }

    await session.commitTransaction();

    res.sendStatus(204);

    messages.forEach(({topic, message}) => app.broker.publish(topic, message));
  }
  catch (err)
  {
    next(err);

    if (session)
    {
      try
      {
        await session.abortTransaction();
      }
      catch (err)
      {
        if (err.message !== 'Cannot call abortTransaction twice')
        {
          module.error(err, `Failed to abort a transaction.`);
        }
      }
    }
  }
  finally
  {
    if (session)
    {
      session.endSession();
    }
  }
};
