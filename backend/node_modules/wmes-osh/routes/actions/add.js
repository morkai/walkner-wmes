// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    OshAction
  } = module;

  const releaseLocks = [];

  const input = _.pick(req.body, [
    'status',
    'subject',
    'kind',
    'activityKind',
    'division',
    'workplace',
    'department',
    'building',
    'location',
    'station',
    'problem',
    'reason',
    'suggestion',
    'solution',
    'participants',
    'implementers',
    'plannedAt',
    'rootCauses',
    'resolutions',
    'attachments'
  ]);

  if (input.attachments && Array.isArray(input.attachments.added))
  {
    input.attachments = module.attachments.claimPendingUploads(input.attachments.added);
  }
  else
  {
    input.attachments = [];
  }

  let session = null;

  try
  {
    session = await OshAction.startSession();
    session.startTransaction();

    const creator = module.createUserInfo(req.session.user, req);
    const createdAt = new Date();

    const action = new OshAction({
      status: 'new',
      ...input,
      createdAt,
      updatedAt: createdAt,
      startedAt: null,
      implementedAt: null,
      finishedAt: null,
      duration: 0,
      creator,
      updater: creator,
      acceptor: null,
      solver: null,
      finisher: null
    });

    action.$session(session);

    if (action.status === 'inProgress')
    {
      action.startedAt = action.createdAt;
      action.acceptor = creator;
    }
    else if (action.status === 'verify')
    {
      action.startedAt = action.createdAt;
      action.implementedAt = action.createdAt;
      action.acceptor = creator;
      action.solver = creator;
    }
    else if (action.status === 'finished')
    {
      action.startedAt = action.createdAt;
      action.implementedAt = action.createdAt;
      action.finishedAt = action.createdAt;
      action.acceptor = creator;
      action.solver = creator;
      action.finisher = creator;
    }

    const [coordinators] = await Promise.all([
      OshAction.resolveCoordinators(action),
      OshAction.assignNextRid(action)
    ]);

    action.coordinators = coordinators;

    action.updateUsers([], action.creator);

    await action.save();

    const messages = [{
      topic: `${OshAction.TOPIC_PREFIX}.added`,
      message: {
        user: action.creator,
        model: action
      }
    }];
    const models = new Set();
    const resolutions = {
      action: new Map(),
      kaizen: new Map()
    };
    const relation = action.getRelation();

    (action.resolutions || []).forEach(resolution =>
    {
      resolutions[resolution.type].set(resolution._id, resolution);
    });

    for (const relationType of Object.keys(resolutions))
    {
      if (!resolutions[relationType].size)
      {
        continue;
      }

      const Entry = module.TYPE_TO_MODEL[relationType];
      const ids = Array.from(resolutions[relationType].keys());

      releaseLocks.push(...await Promise.all(
        ids.map(id => locks.createAsync(`${Entry.TOPIC_PREFIX}.${id}`))
      ));

      const entries = await Entry
        .find({_id: {$in: ids}})
        .session(session)
        .exec();

      for (const entry of entries)
      {
        models.add(action);
        models.add(Entry.addRelation({
          model: entry,
          relation,
          updater: action.creator,
          updatedAt: action.createdAt,
          messages
        }));

        resolutions[relationType].get(entry._id).implementer = entry.creator;
      }
    }

    if (models.size)
    {
      await Promise.all(Array.from(models).map(model => model ? model.save() : null));
    }

    if (session)
    {
      await session.commitTransaction();
    }

    messages.forEach(({topic, message}) => app.broker.publish(topic, message));

    res.json(action);
  }
  catch (err)
  {
    next(err);

    if (session)
    {
      try
      {
        await session.abortTransaction();
      }
      catch (err)
      {
        if (err.message !== 'Cannot call abortTransaction twice')
        {
          module.error(err, `Failed to abort a transaction.`);
        }
      }
    }
  }
  finally
  {
    if (session)
    {
      session.endSession();
      session = null;
    }

    releaseLocks.forEach(releaseLock => releaseLock ? releaseLock() : null);
  }
};
