// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshAction
  } = module;

  const releaseLocks = [await locks.createAsync(`${OshAction.TOPIC_PREFIX}.${req.params.id}`)];

  const sessionUser = req.session.user;
  const updater = module.createUserInfo(sessionUser, req);
  const updatedAt = new Date();

  let session = null;

  try
  {
    session = await OshAction.startSession();
    session.startTransaction();

    const action = await OshAction
      .findById(req.params.id)
      .session(session)
      .exec();

    if (!action)
    {
      throw app.createError('Entry not found.', 'NOT_FOUND', 404);
    }

    const canManage = user.isAllowedTo(sessionUser, [[`${OshAction.PRIVILEGE_PREFIX}:MANAGE`]]);
    const isCreator = action.isCreator(updater.id);
    const isImplementer = action.isImplementer(updater.id);
    const isCoordinator = action.isCoordinator(updater.id);
    const allowedInput = ['comment'];

    if (canManage || isCoordinator)
    {
      allowedInput.push(
        'kind',
        'activityKind',
        'implementers',
        'participants',
        'plannedAt',
        'division',
        'workplace',
        'department',
        'building',
        'location',
        'station'
      );
    }

    if (canManage || isCreator || isImplementer || isCoordinator)
    {
      allowedInput.push(
        'status',
        'subject',
        'problem',
        'reason',
        'suggestion',
        'solution',
        'rootCauses',
        'resolutions',
        'attachments'
      );
    }

    const input = _.pick(req.body, allowedInput);

    module.attachments.prepareInput(input, action);

    if (input.status && input.status !== action.status)
    {
      if (input.status === 'inProgress' && !action.startedAt)
      {
        input.startedAt = updatedAt;
      }
      else if (input.status === 'verify')
      {
        input.implementedAt = updatedAt;
      }
      else if (input.status === 'finished')
      {
        input.finishedAt = updatedAt;
      }

      input.statusComment = input.comment || '';
      input.statusUpdater = updater;
    }

    if ((input.kind && input.kind !== action.kind)
      || (input.department && input.department !== action.department))
    {
      input.coordinators = await OshAction.resolveCoordinators(action);
    }

    const messages = [{
      topic: `${OshAction.TOPIC_PREFIX}.edited`,
      message: {
        user: updater,
        model: action
      }
    }];

    if (!action.edit({input, updater, updatedAt, messages}))
    {
      return res.sendStatus(204);
    }

    const models = new Set([action]);
    const relation = action.getRelation();
    const change = _.last(action.changes);
    const resolutions = {
      action: {
        added: [],
        deleted: []
      },
      kaizen: {
        added: [],
        deleted: []
      }
    };
    const checkedResolutions = new Set();
    let unresolved = null;

    if (change.data.resolutions)
    {
      const {added, deleted} = change.data.resolutions[1];

      added.forEach(r =>
      {
        resolutions[r.type].added.push(r);
      });

      deleted.forEach(r =>
      {
        resolutions[r.type].deleted.push(r);
      });
    }

    for (const relationType of Object.keys(resolutions))
    {
      const Entry = module.TYPE_TO_MODEL[relationType];
      const ids = [];
      const added = new Set();

      resolutions[relationType].added.forEach(r =>
      {
        ids.push(r._id);
        added.add(r._id);
      });

      resolutions[relationType].deleted.forEach(r => ids.push(r._id));

      if (!ids.length)
      {
        continue;
      }

      if (unresolved === null)
      {
        unresolved = false;
      }

      releaseLocks.push(...await Promise.all(
        ids.map(id => locks.createAsync(`${Entry.TOPIC_PREFIX}.${id}`))
      ));

      const entries = await Entry
        .find({_id: {$in: ids}})
        .session(session)
        .exec();

      for (const entry of entries)
      {
        const updateRelation = added.has(entry._id) ? 'addRelation' : 'deleteRelation';

        models.add(Entry[updateRelation]({
          model: entry,
          relation,
          updater,
          updatedAt,
          messages
        }));

        if (added.has(entry._id))
        {
          if (entry.status !== 'finished')
          {
            unresolved = true;
          }

          checkedResolutions.add(entry.rid);
        }
      }
    }

    if (unresolved === false)
    {
      const ids = {
        action: [],
        kaizen: []
      };

      action.resolutions.forEach(resolution =>
      {
        if (!checkedResolutions.has(resolution.rid))
        {
          ids[resolution.type].push(resolution._id);
        }
      });

      unresolved = !(await action.isFinished(releaseLocks, ids, session));
    }

    if (unresolved === true && action.status !== 'inProgress')
    {
      change.data.status = [action.status, 'inProgress'];
      action.status = 'inProgress';
    }
    else if (unresolved === false && action.status !== 'finished')
    {
      change.data.status = [action.status, 'finished'];
      action.status = 'finished';
    }

    await Promise.all(Array.from(models).map(model => model ? model.save() : null));

    if (session)
    {
      await session.commitTransaction();
    }

    messages.forEach(({topic, message}) => app.broker.publish(topic, message));

    res.json(action);
  }
  catch (err)
  {
    next(err);

    if (session)
    {
      try
      {
        await session.abortTransaction();
      }
      catch (err)
      {
        if (err.message !== 'Cannot call abortTransaction twice')
        {
          module.error(err, `Failed to abort a transaction.`);
        }
      }
    }
  }
  finally
  {
    if (session)
    {
      session.endSession();
      session = null;
    }

    releaseLocks.forEach(releaseLock => releaseLock ? releaseLock() : null);
  }
};
