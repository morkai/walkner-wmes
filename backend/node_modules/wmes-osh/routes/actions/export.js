// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const moment = require('moment');

module.exports = async (app, module, req, res, next) =>
{
  const {
    express,
    nameCache,
    OshAction
  } = module;

  const names = await nameCache.load([
    'divisions',
    'workplaces',
    'departments',
    'buildings',
    'locations',
    'stations',
    'kinds',
    'activityKinds',
    'rootCauseCategories'
  ]);

  const columns = {
    rid: 13,
    status: 10,
    createdAt: 'datetime',
    startedAt: 'datetime',
    plannedAt: 'date+utc',
    implementedAt: 'datetime',
    finishedAt: 'datetime',
    duration: 'decimal',
    creator: 20,
    acceptor: 20,
    solver: 20,
    finisher: 20,
    implementers: 20,
    coordinators: 20,
    division: 20,
    workplace: 20,
    department: 20,
    building: 20,
    location: 20,
    station: 20,
    kind: 20,
    kaizenCategory: 20,
    subject: 40,
    problem: 40,
    reason: 40,
    suggestion: 40,
    solution: 40,
    kom: 'boolean',
    resolutions: 13,
    relations: 13
  };

  req.rql.fields = {
    rootCauses: 1,
    changes: 1
  };

  Object.keys(columns).forEach(field => req.rql.fields[field] = 1);

  const rootCauseColumns = [];

  _.forEach(names.all('rootCauseCategories'), (name, id) =>
  {
    const key = `rootCauses[${name}]`;

    columns[key] = 40;

    rootCauseColumns.push({
      key,
      id
    });
  });

  columns.comments = 60;

  express.crud.exportRoute(app, {
    filename: 'WMES_OSH_ACTIONS',
    freezeRows: 1,
    freezeColumns: 1,
    columns,
    model: OshAction,
    serializeRow
  }, req, res, next);

  function serializeRow(doc)
  {
    const comments = [];

    doc.changes.forEach(change =>
    {
      if (!change.comment)
      {
        return;
      }

      const time = moment(change.date).format('YYYY-MM-DD HH:mm:ss');
      const user = change.user.label;
      const text = change.comment.replace(/\r\n/g, '\n').replace('\n', '\r\n');

      comments.push(`[${time}] ${user}: ${text}`);
    });

    const row = {
      rid: doc.rid,
      status: doc.status,
      createdAt: doc.createdAt,
      startedAt: doc.startedAt,
      plannedAt: doc.plannedAt,
      implementedAt: doc.implementedAt,
      finishedAt: doc.finishedAt,
      duration: Math.round(doc.duration / 3600 * 1000) / 1000,
      creator: doc.creator.label,
      acceptor: doc.acceptor ? doc.acceptor.label : '',
      solver: doc.solver ? doc.solver.label : '',
      finisher: doc.finisher ? doc.finisher.label : '',
      implementers: doc.implementers ? doc.implementers.map(u => u.label).join('; ') : '',
      coordinators: doc.coordinators.map(u => u.label).join('; '),
      participants: doc.participants ? doc.participants.map(u => u.label).join('; ') : '',
      division: names.single('divisions', doc.division),
      workplace: names.single('workplaces', doc.division),
      department: names.single('departments', doc.department),
      building: names.single('buildings', doc.building),
      location: names.single('locations', doc.location),
      station: names.single('stations', doc.station),
      kind: names.single('kinds', doc.kind),
      activityKind: names.single('activityKinds', doc.activityKind),
      subject: doc.subject,
      problem: doc.problem,
      reason: doc.reason,
      suggestion: doc.suggestion,
      solution: doc.solution,
      resolutions: doc.resolutions ? doc.resolutions.map(r => r.rid).join('; ') : '',
      relations: doc.relations.map(r => r.rid).join('; ')
    };

    const rootCauses = {};

    if (doc.rootCauses)
    {
      doc.rootCauses.forEach(rootCause =>
      {
        rootCauses[rootCause.category] = rootCause.why.join('\r\n');
      });
    }

    rootCauseColumns.forEach(({key, id}) =>
    {
      row[key] = rootCauses[id] || '';
    });

    row.comments = comments.join('\r\n');

    return row;
  }
};
