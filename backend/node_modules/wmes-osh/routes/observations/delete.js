// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshReward,
    OshObservation
  } = module;

  const sessionUser = req.session.user;
  const deleter = module.createUserInfo(sessionUser, req);

  let session = null;

  try
  {
    session = await OshObservation.startSession();
    session.startTransaction();

    const observation = await OshObservation.findById(req.params.id).session(session).exec();

    if (!observation)
    {
      return next(app.createError('Entry not found.', 'NOT_FOUND', 404));
    }

    if (!user.isAllowedTo(sessionUser, [[`${OshObservation.PRIVILEGE_PREFIX}:MANAGE`]])
      && !observation.canDelete(sessionUser._id))
    {
      return next(app.createError('Forbidden.', 'AUTH', 403));
    }

    await OshObservation.collection.deleteOne({_id: observation._id}, {session});

    const messages = [{
      topic: `${OshObservation.TOPIC_PREFIX}.deleted`,
      message: {
        user: deleter,
        model: observation
      }
    }];

    await OshReward.updateEntry({
      entry: observation,
      createdAt: new Date(),
      creator: deleter,
      recipients: [observation.creator],
      totalAmount: 0,
      session,
      messages
    });

    res.sendStatus(204);

    messages.forEach(({topic, message}) => app.broker.publish(topic, message));
  }
  catch (err)
  {
    next(err);

    if (session)
    {
      try
      {
        await session.abortTransaction();
      }
      catch (err)
      {
        if (err.message !== 'Cannot call abortTransaction twice')
        {
          module.error(err, `Failed to abort a transaction.`);
        }
      }
    }
  }
  finally
  {
    if (session)
    {
      session.endSession();
    }
  }
};
