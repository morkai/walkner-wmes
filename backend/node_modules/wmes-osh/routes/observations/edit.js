// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    OshObservation
  } = module;

  const releaseLocks = [await locks.createAsync(`${OshObservation.TOPIC_PREFIX}.${req.params.id}`)];

  const sessionUser = req.session.user;
  const updater = module.createUserInfo(sessionUser, req);
  const updatedAt = new Date();

  let session = null;

  try
  {
    session = await OshObservation.startSession();
    session.startTransaction();

    const observation = await OshObservation
      .findById(req.params.id)
      .session(session)
      .exec();

    if (!observation)
    {
      throw app.createError('Entry not found.', 'NOT_FOUND', 404);
    }

    const canManage = user.isAllowedTo(sessionUser, [[`${OshObservation.PRIVILEGE_PREFIX}:MANAGE`]]);
    const isCreator = observation.isCreator(updater.id);
    const isCoordinator = observation.isCoordinator(updater.id);
    const allowedInput = [
      'comment',
      'behaviors',
      'workConditions'
    ];

    if (canManage || isCoordinator)
    {
      allowedInput.push(
        'division',
        'workplace',
        'department',
        'building',
        'location',
        'station'
      );
    }

    if (canManage || isCreator || isCoordinator)
    {
      allowedInput.push(
        'date',
        'company',
        'companyName',
        'attachments'
      );
    }

    const input = _.pick(req.body, allowedInput);

    module.attachments.prepareInput(input, observation);

    await OshObservation.prepareCoordinatorsInput(observation, input, ['department', 'location']);

    const messages = [{
      topic: `${OshObservation.TOPIC_PREFIX}.edited`,
      message: {
        user: updater,
        model: observation
      }
    }];

    if (OshObservation.OBSERVATION_PROPS.some(p => Array.isArray(input[p])))
    {
      OshObservation.OBSERVATION_PROPS.forEach(observationsProp =>
      {
        if (!Array.isArray(input[observationsProp]))
        {
          input[observationsProp] = observation[observationsProp].toObject();
        }
      });
    }

    if (!observation.edit({input, updater, updatedAt, messages}))
    {
      return res.sendStatus(204);
    }

    const models = new Set([observation]);
    const relation = observation.getRelation();
    const change = _.last(observation.changes);
    const observations = new Map();
    const resolutions = {
      nearMiss: {
        added: [],
        deleted: []
      },
      kaizen: {
        added: [],
        deleted: []
      }
    };
    let observationsChanged = false;

    OshObservation.OBSERVATION_PROPS.forEach(observationsProp =>
    {
      const observationsChange = change.data[observationsProp];

      if (!observationsChange)
      {
        return;
      }

      observationsChanged = true;

      observation[observationsProp].forEach(observation =>
      {
        observations.set(observation._id, {
          resolvable: OshObservation.isObservationResolvable(observationsProp, observation),
          observation
        });
      });

      const {added, edited, deleted} = observationsChange[1];

      added.forEach(o =>
      {
        if (o.resolution._id)
        {
          resolutions[o.resolution.type].added.push(o);
        }
      });

      deleted.forEach(o =>
      {
        if (o.resolution._id)
        {
          resolutions[o.resolution.type].deleted.push(o);
        }
      });

      edited.forEach(o =>
      {
        if (o.resolution._id === o.old.resolution._id
          && o.resolution.type === o.old.resolution.type)
        {
          return;
        }

        if (o.resolution._id)
        {
          resolutions[o.resolution.type].added.push(o);
        }

        if (o.old.resolution._id)
        {
          resolutions[o.old.resolution.type].deleted.push(o.old);
        }
      });
    });

    const checkedResolutions = new Set();
    let unresolved = observationsChanged ? false : null;

    for (const relationType of Object.keys(resolutions))
    {
      const Entry = module.TYPE_TO_MODEL[relationType];
      const ids = [];
      const added = new Map();

      resolutions[relationType].added.forEach(o =>
      {
        ids.push(o.resolution._id);
        added.set(o.resolution._id, o);
      });

      resolutions[relationType].deleted.forEach(o =>
      {
        ids.push(o.resolution._id);
      });

      if (!ids.length)
      {
        continue;
      }

      if (unresolved === null)
      {
        unresolved = false;
      }

      releaseLocks.push(...await Promise.all(
        ids.map(id => locks.createAsync(`${Entry.TOPIC_PREFIX}.${id}`))
      ));

      const entries = await Entry
        .find({_id: {$in: ids}})
        .session(session)
        .exec();

      for (const entry of entries)
      {
        const updateRelation = added.has(entry._id) ? 'addRelation' : 'deleteRelation';

        models.add(Entry[updateRelation]({
          model: entry,
          relation,
          updater,
          updatedAt,
          messages
        }));

        if (added.has(entry._id))
        {
          if (entry.status !== 'finished')
          {
            unresolved = true;
          }

          checkedResolutions.add(entry.rid);

          const changeObservation = added.get(entry._id);
          const modelObservation = observations.get(changeObservation._id).observation;

          changeObservation.implementer = entry.creator;
          modelObservation.implementer = entry.creator;
        }
      }
    }

    if (unresolved === false)
    {
      unresolved = Array.from(observations.values()).some(o => o.resolvable && !o.observation.resolution._id);
    }

    if (unresolved === false)
    {
      const ids = {
        nearMiss: [],
        kaizen: []
      };

      observations.forEach(({observation}) =>
      {
        if (observation.resolution._id && !checkedResolutions.has(observation.resolution.rid))
        {
          ids[observation.resolution.type].push(observation.resolution._id);
        }
      });

      unresolved = !(await observation.isFinished(releaseLocks, ids, session));
    }

    if (unresolved === true && observation.status !== 'inProgress')
    {
      change.data.status = [observation.status, 'inProgress'];
      observation.status = 'inProgress';
      observation.finishedAt = null;
    }
    else if (unresolved === false && observation.status !== 'finished')
    {
      change.data.status = [observation.status, 'finished'];
      observation.status = 'finished';
      observation.finishedAt = updatedAt;
    }

    await Promise.all(Array.from(models).map(model => model ? model.save() : null));

    if (session)
    {
      await session.commitTransaction();
    }

    messages.forEach(({topic, message}) => app.broker.publish(topic, message));

    res.json(observation);
  }
  catch (err)
  {
    next(err);

    if (session)
    {
      try
      {
        await session.abortTransaction();
      }
      catch (err)
      {
        if (err.message !== 'Cannot call abortTransaction twice')
        {
          module.error(err, `Failed to abort a transaction.`);
        }
      }
    }
  }
  finally
  {
    if (session)
    {
      session.endSession();
      session = null;
    }

    releaseLocks.forEach(releaseLock => releaseLock ? releaseLock() : null);
  }
};
