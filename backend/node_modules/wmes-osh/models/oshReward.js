// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const userInfoSchema = require('user/models/userInfoSchema');

exports.name = 'OshReward';

exports.setUp = (app, mongoose) =>
{
  const schema = new mongoose.Schema({
    rid: String,
    createdAt: Date,
    creator: userInfoSchema,
    subject: String,
    recipient: userInfoSchema,
    amount: Number,
    paid: Boolean,
    paidAt: Date,
    payer: userInfoSchema
  }, {
    id: false,
    minimize: false
  });

  schema.statics.TOPIC_PREFIX = 'osh.rewards';
  schema.statics.BROWSE_LIMIT = 100;

  schema.index({rid: 1});
  schema.index({createdAt: -1});
  schema.index({paid: 1});
  schema.index({paidAt: -1});
  schema.index({'recipient.id': 1, paid: 1});

  schema.statics.updateEntry = async function({
    entry, createdAt, creator, recipients, totalAmount, session, messages = []
  })
  {
    const OshReward = this;
    const result = {
      added: [],
      updated: [],
      deleted: [],
      messages
    };

    const existingRewards = await OshReward
      .find({rid: entry.rid})
      .lean()
      .session(session)
      .exec();

    const oldRewards = new Map();

    existingRewards.forEach(reward =>
    {
      if (reward.paid)
      {
        throw app.createError('Reward already paid out.', 'REWARD_PAID', 400);
      }

      oldRewards.set(reward.recipient.id, reward);
    });

    recipients.forEach(recipient =>
    {
      const amount = Math.round(totalAmount / recipients.length * 100) / 100;
      const oldReward = oldRewards.get(recipient.id);

      if (oldReward)
      {
        oldRewards.delete(recipient.id);

        result.updated.push({
          _id: oldReward._id,
          createdAt,
          creator,
          recipient,
          amount
        });

        return;
      }

      result.added.push({
        _id: new mongoose.Types.ObjectId(),
        rid: entry.rid,
        createdAt,
        creator,
        subject: entry.subject || '',
        recipient,
        amount,
        paid: false,
        paidAt: null,
        payer: null
      });
    });

    oldRewards.forEach(reward =>
    {
      result.deleted.push(reward);
    });

    const ops = [];

    result.deleted.forEach(reward =>
    {
      ops.push({deleteOne: {filter: {_id: reward._id}}});
    });

    result.added.forEach(reward =>
    {
      ops.push({insertOne: reward});
    });

    result.updated.forEach(reward =>
    {
      ops.push({
        updateOne: {
          filter: {_id: reward._id},
          update: {$set: reward}
        }
      });
    });

    await OshReward.collection.bulkWrite(ops, {session});

    result.messages.push({
      topic: `${OshReward.TOPIC_PREFIX}.updated`,
      message: {
        deleted: result.deleted,
        added: result.added,
        updated: result.updated
      }
    });

    return result;
  };

  return schema;
};
