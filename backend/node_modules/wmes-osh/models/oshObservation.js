// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const userInfoSchema = require('user/models/userInfoSchema');
const relationSchema = require('./relationSchema');
const attachmentSchema = require('./attachmentSchema');
const userSchema = require('./userSchema');
const changeSchema = require('./changeSchema');
const decorateEntrySchema = require('./decorateEntrySchema');

exports.name = 'OshObservation';

exports.setUp = (app, mongoose) =>
{
  const STATUSES = ['open', 'finished'];

  const observationSchema = new mongoose.Schema({
    _id: {
      type: String,
      required: true
    },
    category: {
      type: Number,
      ref: 'OshObservationCategory',
      required: true
    },
    text: {
      type: String,
      trim: true,
      required: true
    },
    safe: {
      type: Boolean,
      required: true
    },
    easy: {
      type: Boolean,
      default: null
    },
    what: {
      type: String,
      trim: true
    },
    why: {
      type: String,
      trim: true
    },
    resolution: relationSchema,
    implementer: userInfoSchema
  }, {
    _id: false,
    minimize: false
  });

  const schema = new mongoose.Schema({
    rid: String,
    ridInc: Number,
    status: {
      type: String,
      enum: STATUSES
    },
    statusComment: {
      type: String,
      default: ''
    },
    statusUpdater: userInfoSchema,
    createdAt: {
      type: Date,
      required: true
    },
    creator: userInfoSchema,
    coordinators: [userInfoSchema],
    date: {
      type: Date,
      required: true
    },
    company: {
      type: Number,
      ref: 'OshCompany',
      required: true
    },
    companyName: {
      type: String,
      required: true
    },
    userWorkplace: {
      type: Number,
      ref: 'OshWorkplace',
      default: null
    },
    userDivision: {
      type: Number,
      ref: 'OshDivision',
      default: null
    },
    workplace: {
      type: Number,
      ref: 'OshWorkplace',
      required: true
    },
    division: {
      type: Number,
      ref: 'OshDivision',
      required: true
    },
    building: {
      type: Number,
      ref: 'OshBuilding',
      required: true
    },
    location: {
      type: Number,
      ref: 'OshLocation',
      required: true
    },
    station: {
      type: Number,
      ref: 'OshStation',
      default: null
    },
    observationKind: {
      type: Number,
      ref: 'OshObservationKind',
      required: true
    },
    subject: {
      type: String,
      trim: true,
      required: true,
      maxLength: 1000
    },
    behaviors: [observationSchema],
    workConditions: [observationSchema],
    attachments: [attachmentSchema],
    users: [userSchema],
    changes: [changeSchema]
  }, {
    id: false,
    minimize: false
  });

  schema.statics.TOPIC_PREFIX = 'osh.observations';
  schema.statics.PRIVILEGE_PREFIX = 'OSH:OBSERVATIONS';
  schema.statics.RID_PREFIX = 'O';
  schema.statics.STATUSES = STATUSES;
  schema.statics.RELATION_TYPE = 'observation';

  decorateEntrySchema(app, mongoose, exports.name, schema);

  return schema;
};
