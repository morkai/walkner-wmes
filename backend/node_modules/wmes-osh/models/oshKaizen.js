// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const userInfoSchema = require('user/models/userInfoSchema');
const relationSchema = require('./relationSchema');
const attachmentSchema = require('./attachmentSchema');
const userSchema = require('./userSchema');
const changeSchema = require('./changeSchema');
const decorateEntrySchema = require('./decorateEntrySchema');

exports.name = 'OshKaizen';

exports.setUp = (app, mongoose) =>
{
  const STATUSES = ['new', 'inProgress', 'verification', 'finished', 'paused', 'cancelled'];

  const schema = new mongoose.Schema({
    rid: String,
    ridInc: Number,
    status: {
      type: String,
      enum: STATUSES
    },
    statusComment: {
      type: String,
      default: ''
    },
    statusUpdater: userInfoSchema,
    createdAt: {
      type: Date,
      required: true
    },
    updatedAt: {
      type: Date,
      required: true
    },
    startedAt: {
      type: Date,
      default: null
    },
    plannedAt: {
      type: Date,
      default: null
    },
    implementedAt: {
      type: Date,
      default: null
    },
    finishedAt: {
      type: Date,
      default: null
    },
    duration: {
      type: Number,
      min: 0
    },
    creator: userInfoSchema,
    updater: userInfoSchema,
    acceptor: userInfoSchema,
    solver: userInfoSchema,
    finisher: userInfoSchema,
    implementers: [userInfoSchema],
    coordinators: [userInfoSchema],
    division: {
      type: Number,
      ref: 'OshDivision',
      required: true
    },
    workplace: {
      type: Number,
      ref: 'OshWorkplace',
      required: true
    },
    department: {
      type: Number,
      ref: 'OshDepartment',
      required: true
    },
    building: {
      type: Number,
      ref: 'OshBuilding',
      required: true
    },
    location: {
      type: Number,
      ref: 'OshLocation',
      required: true
    },
    station: {
      type: Number,
      ref: 'OshStation',
      default: 0
    },
    kind: [{
      type: Number,
      ref: 'OshKind',
      required: true
    }],
    kaizenCategory: {
      type: Number,
      ref: 'OshKaizenCategory',
      required: true
    },
    subject: {
      type: String,
      required: true,
      trim: true,
      maxLength: 150
    },
    problem: {
      type: String,
      required: true,
      trim: true,
      maxLength: 1000
    },
    reason: {
      type: String,
      trim: true,
      maxLength: 1000
    },
    suggestion: {
      type: String,
      required: true,
      trim: true,
      maxLength: 1000
    },
    solution: {
      type: String,
      trim: true,
      maxLength: 1000
    },
    kom: {
      type: Number,
      default: 0,
      min: 0,
      max: 2
    },
    reward: {
      type: Number,
      default: 0,
      min: 0,
      max: 1000000
    },
    relations: [relationSchema],
    attachments: [attachmentSchema],
    users: [userSchema],
    changes: [changeSchema]
  }, {
    id: false,
    minimize: false
  });

  schema.statics.TOPIC_PREFIX = 'osh.kaizens';
  schema.statics.PRIVILEGE_PREFIX = 'OSH:KAIZENS';
  schema.statics.RID_PREFIX = 'K';
  schema.statics.STATUSES = STATUSES;
  schema.statics.RELATION_TYPE = 'kaizen';
  schema.statics.RELATIONS_TYPE = 'kaizens';

  decorateEntrySchema(app, mongoose, exports.name, schema);

  return schema;
};
