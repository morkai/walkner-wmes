// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const autoIncrement = require('mongoose-plugin-autoinc-fix');
const userInfoSchema = require('user/models/userInfoSchema');
const attachmentSchema = require('./attachmentSchema');
const changeSchema = require('./changeSchema');

exports.name = 'OshNearMiss';

exports.setUp = (app, mongoose) =>
{
  const KINDS = ['osh', 'ep', 'infra'];
  const PRIORITIES = ['low', 'normal', 'high', 'critical'];

  const schema = new mongoose.Schema({
    createdAt: {
      type: Date,
      default: Date.now
    },
    creator: userInfoSchema,
    manager: userInfoSchema,
    coordinator: userInfoSchema,
    implementer: userInfoSchema,
    workplace: {
      type: Number,
      ref: 'OshWorkplace',
      required: true
    },
    division: {
      type: Number,
      ref: 'OshDivision',
      required: true
    },
    building: {
      type: Number,
      ref: 'OshBuilding',
      required: true
    },
    eventCategory: {
      type: Number,
      ref: 'OshEventCategory'
    },
    reasonCategory: {
      type: Number,
      ref: 'OshReasonCategory'
    },
    kind: {
      type: String,
      required: true,
      enum: KINDS
    },
    priority: {
      type: String,
      enum: PRIORITIES,
      default: 'normal'
    },
    materialLoss: {
      type: Boolean,
      default: false
    },
    problem: {
      type: String,
      required: true,
      trim: true
    },
    solution: {
      type: String,
      trim: true
    },
    attachments: [attachmentSchema],
    users: [String],
    changes: [changeSchema]
  }, {
    id: false,
    minimize: false
  });

  schema.statics.TOPIC_PREFIX = 'osh.nearMisses';
  schema.statics.BROWSE_LIMIT = 100;
  schema.statics.KINDS = KINDS;
  schema.statics.PRIORITIES = PRIORITIES;

  schema.plugin(autoIncrement.plugin, {
    model: exports.name,
    field: '_id',
    startAt: 1,
    incrementBy: 1
  });

  schema.pre('save', function(next)
  {
    this.collectUsers();

    next();
  });

  schema.methods.collectUsers = function()
  {
    const users = new Set();

    [this.creator, this.manager, this.coordinator, this.implementer].forEach(user =>
    {
      if (user)
      {
        users.add(user.id);
      }
    });

    this.changes.forEach(change =>
    {
      users.add(change.user.id);
    });

    users.delete(null);

    this.users = Array.from(users);
  };

  return schema;
};
