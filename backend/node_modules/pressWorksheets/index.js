// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  userId: 'user',
  expressId: 'express'
};

exports.models = [
  require('./models/pressWorksheet'),
  require('prodLogEntries/models/prodLogEntry'),
  require('prodShiftOrders/models/prodShiftOrder'),
  require('prodDowntimes/models/prodDowntime'),
  require('downtimeReasons/models/downtimeReason'),
  require('lossReasons/models/lossReason')
];

exports.recordTopics = {
  blacklist: ['pressWorksheets.added', 'pressWorksheets.edited']
};

exports.userPrivileges = ['PRESS_WORKSHEETS:VIEW', 'PRESS_WORKSHEETS:MANAGE'];

exports.requiredModules = 'mongoose';

exports.optionalModules = {
  'user express': require('./routes')
};

exports.start = (app, module) =>
{
  const {PressWorksheet, ProdShiftOrder, ProdDowntime} = module;

  app.broker.subscribe('pressWorksheets.added', createOrdersAndDowntimes);
  app.broker.subscribe('pressWorksheets.edited', recreateOrdersAndDowntimes);
  app.broker.subscribe('pressWorksheets.deleted', removeOrdersAndDowntimes);

  function createOrdersAndDowntimes(message)
  {
    const pressWorksheetId = message.model._id;

    createRelatedModels(pressWorksheetId, (err) =>
    {
      if (err)
      {
        return module.error(err, `Failed to create orders and downtimes.`, {pressWorksheetId});
      }
    });
  }

  function recreateOrdersAndDowntimes(message)
  {
    const pressWorksheetId = message.model._id;

    removeRelatedModels(pressWorksheetId, () =>
    {
      createRelatedModels(pressWorksheetId, (err) =>
      {
        if (err)
        {
          return module.error(err, `Failed to recreate orders and downtimes.`, {pressWorksheetId});
        }
      });
    });
  }

  function removeOrdersAndDowntimes(message)
  {
    removeRelatedModels(message.model._id, () => {});
  }

  function createRelatedModels(pressWorksheetId, done)
  {
    PressWorksheet.findById(pressWorksheetId, (err, pressWorksheet) =>
    {
      if (err)
      {
        return done(err);
      }

      pressWorksheet.createOrdersAndDowntimes(done);
    });
  }

  function removeRelatedModels(pressWorksheetId, done)
  {
    step(
      function removeRelatedModelsStep()
      {
        const doneRemovingOrders = this.group();
        const doneRemovingDowntimes = this.group();

        ProdShiftOrder.deleteMany({pressWorksheet: pressWorksheetId}, err =>
        {
          if (err)
          {
            return module.error(err, `Failed to remove orders.`, {pressWorksheetId});
          }

          return doneRemovingOrders();
        });

        ProdDowntime.deleteMany({pressWorksheet: pressWorksheetId}, err =>
        {
          if (err)
          {
            return module.error(err, `Failed to remove downtimes.`, {pressWorksheetId});
          }

          return doneRemovingDowntimes();
        });
      },
      done
    );
  }
};
