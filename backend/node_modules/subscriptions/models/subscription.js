// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.name = 'Subscription';

exports.setUp = (app, mongoose) =>
{
  const subscriptionSchema = new mongoose.Schema({
    user: {
      type: String,
      required: true
    },
    type: {
      type: String,
      required: true
    },
    target: {
      type: String,
      default: null
    }
  }, {
    id: false,
    versionKey: false
  });

  subscriptionSchema.statics.TOPIC_PREFIX = 'subscriptions';
  subscriptionSchema.statics.BROWSE_LIMIT = 100;

  subscriptionSchema.index({type: 1, target: 1});
  subscriptionSchema.index({user: 1, type: 1, target: 1}, {unique: true});

  subscriptionSchema.statics.findUsers = function(conditions, done)
  {
    const Subscription = this;
    const User = mongoose.model('User');

    return new Promise(async (resolve, reject) =>
    {
      try
      {
        const subs = await Subscription
          .find(conditions)
          .select({_id: 0, user: 1})
          .lean()
          .exec();

        if (!subs.length)
        {
          resolve([]);
          done(null, []);

          return;
        }

        const uniqueUsers = new Set();

        subs.forEach(sub => uniqueUsers.add(sub.user));

        const userIds = Array.from(uniqueUsers).map(id => new mongoose.Types.ObjectId(id));

        const users = await User
          .find({_id: {$in: userIds}})
          .lean()
          .exec();

        resolve(users);
        done(null, users);
      }
      catch (err)
      {
        reject(err);

        if (done)
        {
          done(err);
        }
      }
    });
  };

  mongoose.model(exports.name, subscriptionSchema);
};
