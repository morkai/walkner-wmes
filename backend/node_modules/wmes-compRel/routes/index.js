// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const multer = require('multer');

const dictionariesRoute = require('./dictionaries');
const resolveComponentRoute = require('./resolveComponent');
const resolveUsersRoute = require('./resolveUsers');
const editEntryRoute = require('./editEntry');
const acceptEntryRoute = require('./acceptEntry');
const addUserRoute = require('./addUser');
const releaseOrderRoute = require('./releaseOrder');
const uploadAttachmentRoute = require('./uploadAttachment');
const sendAttachmentRoute = require('./sendAttachment');
const findByRidRoute = require('./findByRid');
const redirectRoute = require('./redirect');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    settings,
    DICTIONARIES,
    CompRelEntry
  } = module;

  const canView = user.auth('PROD_DATA:VIEW', 'COMP_REL:VIEW');
  const canAdd = user.auth('PROD_DATA:MANAGE', 'COMP_REL:ADD', 'FN:production-planner');
  const canManage = user.auth('PROD_DATA:MANAGE', 'COMP_REL:MANAGE');

  express.get('/compRel/dictionaries', canView, dictionariesRoute.bind(null, app, module));

  express.get('/compRel/settings', canView, settings.browseRoute('ct'));
  express.put('/compRel/settings/:id', canManage, settings.updateRoute);

  express.post(
    '/compRel/entries;upload',
    canView,
    multer({
      dest: module.config.uploadsDest,
      limits: {
        fileSize: 200 * 1024 * 1024
      }
    }).single('file'),
    uploadAttachmentRoute.bind(null, app, module)
  );
  express.get('/compRel/entries;resolve-component', canView, resolveComponentRoute.bind(null, app, module));
  express.get('/compRel/entries;resolve-users', canView, resolveUsersRoute.bind(null, app, module));
  express.get('/compRel/entries;rid', canView, findByRidRoute.bind(null, app, module));
  express.get(`/compRel/entries`, canView, express.crud.browseRoute.bind(null, app, CompRelEntry));
  express.post(`/compRel/entries`, canAdd, prepareAdd, express.crud.addRoute.bind(null, app, CompRelEntry));
  express.post(`/compRel/entries/:id;accept`, canView, acceptEntryRoute.bind(null, app, module));
  express.post(`/compRel/entries/:id;release-order`, canView, releaseOrderRoute.bind(null, app, module));
  express.post(`/compRel/entries/:id;add-user`, canView, addUserRoute.bind(null, app, module));
  express.get(`/compRel/entries/:id`, canView, express.crud.readRoute.bind(null, app, CompRelEntry));
  express.put(`/compRel/entries/:id`, canView, editEntryRoute.bind(null, app, module));
  express.delete(`/compRel/entries/:id`, canManage, express.crud.deleteRoute.bind(null, app, CompRelEntry));

  express.get(
    '/compRel/entries/:entryId/attachments/:attachmentId',
    canView,
    sendAttachmentRoute.bind(null, app, module)
  );

  express.get('/r/compRel/:filter', redirectRoute.bind(null, app, module));

  Object.keys(DICTIONARIES).forEach(k =>
  {
    const options = DICTIONARIES[k];
    const canViewDictionary = options.canView || canView;
    const canManageDictionary = options.canManage || canManage;

    express.get(`/compRel/${k}`, canViewDictionary, express.crud.browseRoute.bind(null, app, options));
    express.post(`/compRel/${k}`, canManageDictionary, express.crud.addRoute.bind(null, app, options));
    express.get(`/compRel/${k}/:id`, canViewDictionary, express.crud.readRoute.bind(null, app, options));
    express.put(`/compRel/${k}/:id`, canManageDictionary, express.crud.editRoute.bind(null, app, options));
    express.delete(`/compRel/${k}/:id`, canManageDictionary, express.crud.deleteRoute.bind(null, app, options));
  });

  function prepareAdd(req, res, next)
  {
    const createdAt = new Date();
    const creator = user.createUserInfo(req.session.user, req);

    Object.assign(req.body, {
      creator,
      createdAt,
      updater: creator,
      updatedAt: createdAt,
      acceptedAt: null,
      status: 'pending',
      orders: [],
      changes: []
    });

    req.body.funcs.sort((a, b) => a._id.localeCompare(b._id));

    req.body.funcs.forEach(func =>
    {
      func.acceptedAt = null;
      func.acceptedBy = null;
      func.status = 'pending';
      func.comment = '';

      func.users.sort((a, b) => a.label.localeCompare(b.label, undefined, {ignorePunctuation: true}));
    });

    next();
  }
};
