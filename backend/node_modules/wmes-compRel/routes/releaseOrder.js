// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const uuid = require('uuid');
const step = require('h5.step');
const locks = require('util/locks');

module.exports = (app, module, req, res, next) =>
{
  const {
    user,
    Order,
    CompRelEntry
  } = module;

  const sessionUser = req.session.user;

  step(
    function()
    {
      if (!user.isAllowedTo(sessionUser, [['PROD_DATA:MANAGE'], ['COMP_REL:MANAGE'], ['FN:production-planner']]))
      {
        return this.skip(app.createError('Not allowed.', 'AUTH', 400));
      }

      this.releaseLock = locks.create(`${CompRelEntry.TOPIC_PREFIX}.${req.params.id}`, this.next());
    },
    function()
    {
      CompRelEntry
        .findById(req.params.id)
        .select({
          status: 1,
          valid: 1,
          oldComponents: 1,
          orders: 1
        })
        .lean()
        .exec(this.next());
    },
    function(err, entry)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!entry)
      {
        return this.skip(app.createError('Not found.', 'NOT_FOUND', 400));
      }

      const orderNos = (Array.isArray(req.body.orders) ? req.body.orders : [])
        .filter(v => /^[0-9]{9}$/.test(v) && v !== '000000000');

      if (!orderNos.length)
      {
        orderNos.push('000000000');
      }

      const removedOrders = [];
      const {remove} = req.body;

      if (remove)
      {
        const orders = Array.isArray(remove.orders) ? remove.orders : [];
        const releasedBy = remove.releasedBy || null;
        const releasedAt = remove.releasedAt ? +remove.releasedAt : null;

        entry.orders.forEach(o =>
        {
          if (remove._id && o._id !== remove._id)
          {
            return;
          }

          if (orders.length && !orders.includes(o.orderNo))
          {
            return;
          }

          if (releasedBy && o.releasedBy.id !== releasedBy)
          {
            return;
          }

          if (releasedAt && o.releasedAt.getTime() !== releasedAt)
          {
            return;
          }

          removedOrders.push(o);
        });

        if (!removedOrders.length)
        {
          return this.skip(app.createError('Unknown orders.', 'INPUT', 400));
        }
      }

      let validFrom = moment(req.body.validFrom || '2000-01-01', 'YYYY-MM-DD');
      let validTo = moment(req.body.validTo || '2100-01-01', 'YYYY-MM-DD');

      if (!validFrom.isValid())
      {
        validFrom = moment('2000-01-01', 'YYYY-MM-DD');
      }

      if (!validTo.isValid())
      {
        validTo = moment('2100-01-01', 'YYYY-MM-DD');
      }

      validFrom = validFrom.toDate();
      validTo = validTo.toDate();

      if (validFrom > validTo)
      {
        return this.skip(app.createError('Invalid valid from/to.', 'INPUT', 400));
      }

      const oldOrders = new Map();
      const newOrders = new Map();
      const now = new Date();
      const userInfo = user.createUserInfo(sessionUser, req);
      const changes = {
        orders: [null, null]
      };
      const change = {
        date: now,
        user: userInfo,
        data: changes,
        comment: req.body.comment || ''
      };
      const update = {
        $set: {
          updatedAt: now,
          updater: userInfo
        },
        $push: {
          changes: change
        },
        $addToSet: {
          users: userInfo[user.idProperty]
        }
      };

      if (removedOrders.length)
      {
        update.$pull = {
          orders: {
            _id: {$in: removedOrders.map(o => o._id)}
          }
        };

        entry.orders = entry.orders.filter(o => !removedOrders.includes(o));

        changes.orders[0] = Array.from(removedOrders);
      }
      else
      {
        entry.orders.forEach(order =>
        {
          if (order.orderNo !== '000000000')
          {
            oldOrders.set(order.orderNo, order);
          }
        });

        orderNos.forEach(orderNo =>
        {
          const oldOrder = oldOrders.get(orderNo);

          if (!oldOrder)
          {
            newOrders.set(orderNo, {
              _id: uuid.v4(),
              orderNo,
              releasedAt: now,
              releasedBy: userInfo,
              validFrom,
              validTo,
              valid: true
            });
          }
        });

        if (!newOrders.size)
        {
          return this.skip();
        }

        changes.orders[1] = [];

        update.$push.orders = {$each: []};

        newOrders.forEach(order =>
        {
          update.$push.orders.$each.push(order);

          entry.orders.push(order);

          changes.orders[1].push(order);
        });
      }

      if (!changes.orders[0] && !changes.orders[1])
      {
        return this.skip();
      }

      this.entry = entry;
      this.change = change;
      this.update = update;
      this.newOrders = newOrders;

      if (newOrders.size)
      {
        Order
          .find({
            _id: {$in: Array.from(newOrders.keys())},
            'bom.nc12': {$in: entry.oldComponents.map(c => c._id)}
          })
          .select({_id: 1})
          .lean()
          .exec(this.next());
      }
    },
    function(err, sapOrders)
    {
      if (err)
      {
        return this.skip(err);
      }

      (sapOrders || []).forEach(sapOrder =>
      {
        this.newOrders.get(sapOrder._id).valid = false;
      });

      const oldValid = this.entry.valid;
      const newValid = this.entry.orders.every(o => o.valid);

      if (newValid !== oldValid)
      {
        this.change.data.valid = [oldValid, newValid];
        this.update.$set.valid = newValid;
      }

      CompRelEntry.collection.updateOne({_id: this.entry._id}, this.update, this.next());
    },
    function(err)
    {
      if (this.releaseLock)
      {
        setImmediate(this.releaseLock);
      }

      if (err)
      {
        return next(err);
      }

      if (this.change)
      {
        app.broker.publish(`${CompRelEntry.TOPIC_PREFIX}.updated.${this.entry._id}`, {
          _id: this.entry._id,
          change: this.change
        });
      }

      res.sendStatus(204);
    }
  );
};
