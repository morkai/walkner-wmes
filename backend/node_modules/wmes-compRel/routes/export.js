// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');

module.exports = (app, module, req, res, next) =>
{
  const {
    express,
    CompRelEntry,
    CompRelReason,
    ProdFunction
  } = module;

  req.rql.selector.args = req.rql.selector.args.filter(term => term.name !== 'eq' || term.args[0] !== 'mode');

  req.rql.fields = {};

  const ordersMode = req.query.mode === 'orders';
  const prodFunctionMap = new Map();
  const reasonMap = new Map();

  step(
    function()
    {
      ProdFunction.find({}, {label: 1}).lean().exec(this.parallel());

      CompRelReason.find({}, {name: 1}).lean().exec(this.parallel());
    },
    function(err, prodFunctions, reasons)
    {
      if (err)
      {
        return this.skip(err);
      }

      prodFunctions.forEach(c => prodFunctionMap.set(c._id, c.label));

      reasons.forEach(c => reasonMap.set(c._id.toString(), c.name));
    },
    function(err)
    {
      if (err)
      {
        return next(err);
      }

      express.crud.exportRoute(app, {
        filename: 'WMES_COMPREL_ENTRIES',
        freezeRows: 1,
        freezeColumns: 1,
        columns: {
          rid: 6,
          creator: 20,
          createdAt: 'datetime',
          status: 10,
          mrps: 20,
          oldComponents: 40,
          newComponents: 40,
          reason: 30,
          orders: 10,
          orderNo: 10,
          releasedAt: 'datetime',
          releasedBy: 20,
          validFrom: 'date',
          validTo: 'date',
          valid: 'boolean',
          comments: 60
        },
        model: CompRelEntry,
        serializeRow
      }, req, res, next);
    }
  );

  function serializeRow(doc)
  {
    if (ordersMode && !doc.orders.length)
    {
      return;
    }

    const reasonId = doc.reason ? doc.reason.toString() : null;
    const reason = reasonMap.has(reasonId) ? reasonMap.get(reasonId) : reasonId;
    const mrps = doc.mrps.join('; ');
    const oldComponents = doc.oldComponents.map(c => c._id).join('; ');
    const newComponents = doc.newComponents.map(c => c._id).join('; ');

    if (ordersMode)
    {
      return doc.orders.map(o =>
      {
        return {
          rid: doc.rid,
          creator: doc.creator.label,
          createdAt: doc.createdAt,
          status: doc.status,
          mrps,
          reason,
          oldComponents,
          newComponents,
          orderNo: o.orderNo,
          releasedAt: o.releasedAt,
          releasedBy: o.releasedBy.label,
          validFrom: o.validFrom,
          validTo: o.validTo,
          valid: o.valid
        };
      });
    }

    const comments = [];

    doc.changes.forEach(change =>
    {
      if (!change.comment)
      {
        return;
      }

      const time = moment(change.date).format('HH:mm:ss');
      const user = change.user.label;
      const text = change.comment.replace(/\r\n/g, '\n').replace('\n', '\r\n');

      comments.push(`[${time}] ${user}: ${text}`);
    });

    return {
      rid: doc.rid,
      creator: doc.creator.label,
      createdAt: doc.createdAt,
      status: doc.status,
      mrps,
      reason,
      oldComponents,
      newComponents,
      orders: doc.orders.map(o => o.orderNo).join('; '),
      valid: doc.valid,
      comments: comments.join('\r\n')
    };
  }
};
