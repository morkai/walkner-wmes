// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const locks = require('util/locks');
const jsonDeepEqual = require('util/jsonDeepEqual');

module.exports = (app, {user, CompRelEntry}, req, res, next) =>
{
  const sessionUser = req.session.user;
  const entryId = req.params.id;

  step(
    function()
    {
      this.releaseLock = locks.create(`${CompRelEntry.TOPIC_PREFIX}.${entryId}`, this.next());
    },
    function()
    {
      CompRelEntry
        .findById(entryId)
        .select({
          orders: 0,
          changes: 0
        })
        .lean()
        .exec(this.next());
    },
    function(err, entry)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!entry)
      {
        return this.skip(app.createError('Not found.', 'NOT_FOUND', 400));
      }

      const funcI = entry.funcs.findIndex(f => f._id === req.body.func);

      if (funcI === -1)
      {
        return this.skip(app.createError('Invalid func.', 'INPUT', 400));
      }

      const oldFunc = entry.funcs[funcI];

      if (!user.isAllowedTo(sessionUser, [['PROD_DATA:MANAGE'], ['COMP_REL:MANAGE']])
        && !oldFunc.users.some(u => u.id === sessionUser._id))
      {
        return this.skip(app.createError('Not allowed.', 'AUTH', 400));
      }

      const pending = req.body.status === 'pending';
      const now = new Date();
      const userInfo = user.createUserInfo(sessionUser, req);
      const newFunc = {
        _id: oldFunc._id,
        acceptedAt: pending ? null : now,
        acceptedBy: pending ? null : userInfo,
        status: req.body.status,
        comment: req.body.comment || '',
        users: oldFunc.users
      };

      if (jsonDeepEqual(newFunc, oldFunc))
      {
        return this.skip();
      }

      entry.funcs[funcI] = newFunc;

      const change = {
        date: now,
        user: userInfo,
        data: {
          funcs: [
            {[newFunc._id]: oldFunc},
            {[newFunc._id]: newFunc}
          ]
        },
        comment: newFunc.comment
      };

      CompRelEntry.updateStatus(entry, change.data);

      const update = {
        $set: {
          updatedAt: now,
          updater: userInfo,
          status: entry.status,
          acceptedAt: entry.acceptedAt,
          [`funcs.${funcI}`]: newFunc
        },
        $push: {
          changes: change
        },
        $addToSet: {
          users: userInfo[user.idProperty]
        }
      };

      setImmediate(this.parallel(), null, change);

      CompRelEntry.collection.updateOne({_id: entry._id}, update, this.parallel());
    },
    function(err, change)
    {
      setImmediate(this.releaseLock);

      if (err)
      {
        return next(err);
      }

      if (change)
      {
        app.broker.publish(`${CompRelEntry.TOPIC_PREFIX}.updated.${entryId}`, {
          _id: entryId,
          change
        });
      }

      res.sendStatus(204);
    }
  );
};
