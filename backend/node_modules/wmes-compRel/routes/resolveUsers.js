// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, {config, CompRelFunc}, req, res, next) =>
{
  const mor = app[config.morId];
  const result = {};

  step(
    function()
    {
      CompRelFunc
        .find({_id: {$in: (req.query.funcs || '').split(',')}})
        .lean()
        .exec(this.next());
    },
    function(err, funcList)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!funcList.length)
      {
        return this.skip();
      }

      const funcMap = {};

      funcList.forEach(func =>
      {
        funcMap[func._id] = func;
        result[func._id] = new Map();

        func.users.forEach(user =>
        {
          result[func._id].set(user.id, user);
        });
      });

      mor.state.globalProdFunctions.forEach(globalProdFunction =>
      {
        if (result[globalProdFunction._id])
        {
          globalProdFunction.users.forEach(u => addMorUser(globalProdFunction._id, u));
        }
      });

      const mrps = new Set((req.query.mrps || '').split(',').filter(v => !!v.length));

      mrps.add('$all');

      mor.state.sections.forEach(section =>
      {
        const onlyAll = section.mrps.length === 1 && section.mrps[0]._id === '$all';

        section.mrps.forEach(sectionMrp =>
        {
          sectionMrp.prodFunctions.forEach(prodFunction =>
          {
            const func = funcMap[prodFunction._id];

            if (!func || func.mor === 'none')
            {
              return;
            }

            if (func.mor === 'mrp' && (onlyAll || !mrps.has(sectionMrp._id)))
            {
              return;
            }

            prodFunction.users.forEach(u => addMorUser(func._id, u));
          });
        });
      });
    },
    function(err)
    {
      if (err)
      {
        return next(err);
      }

      Object.keys(result).forEach(funcId =>
      {
        result[funcId] = Array.from(result[funcId].values());
      });

      res.json(result);
    }
  );

  function addMorUser(funcId, userId)
  {
    const morUser = mor.getUser(userId);

    if (!morUser)
    {
      return;
    }

    result[funcId].set(userId, {
      id: userId,
      label: `${morUser.lastName} ${morUser.firstName}`.trim()
    });
  }
};
