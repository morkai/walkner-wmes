// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {user, CompRelEntry, tmpAttachments} = module;
  const updatedAt = new Date();
  const updater = user.createUserInfo(req.session.user, req);
  const data = req.body.data || req.body;
  const socketId = req.body.socketId || data.socketId;

  if (Array.isArray(data.attachments))
  {
    data.attachments.forEach(attachment =>
    {
      const upload = tmpAttachments[attachment._id];

      if (upload)
      {
        attachment.date = updatedAt;
        attachment.user = updater;
        attachment.type = upload.data.type;
        attachment.size = upload.data.size;

        clearTimeout(upload.timer);

        delete tmpAttachments[attachment._id];
      }
    });
  }

  const releaseLock = await locks.createAsync(`${CompRelEntry.TOPIC_PREFIX}.${req.params.id}`);

  try
  {
    let entry = await CompRelEntry
      .findById(req.params.id)
      .select(req.method !== 'PATCH' ? {} : {
        creator: 1,
        updater: 1,
        acceptedAt: 1,
        status: 1,
        mrps: 1,
        oldComponents: 1,
        newComponents: 1,
        reason: 1,
        funcs: 1,
        attachments: 1,
        users: 1,
        'changes.user': 1
      })
      .exec();

    if (!entry)
    {
      return next(app.createError('Not found.', 'NOT_FOUND', 400));
    }

    const input = _.pick(data, [
      'mrps',
      'oldComponents',
      'newComponents',
      'reason',
      'funcs',
      'comment',
      'attachments'
    ]);
    const changed = entry.applyChanges(input, updater, updatedAt);

    if (!changed)
    {
      return res.sendStatus(204);
    }

    await entry.save();

    const change = _.last(entry.changes);

    app.broker.publish(`${CompRelEntry.TOPIC_PREFIX}.updated.${entry._id}`, {
      _id: entry._id,
      socketId,
      change
    });

    if (change.data.oldComponents)
    {
      if (!Array.isArray(entry.orders))
      {
        entry = await CompRelEntry
          .findById(entry._id)
          .exec();
      }

      await entry.updateValidity();
    }

    if (req.method === 'PATCH')
    {
      res.sendStatus(204);
    }
    else
    {
      res.json(entry);
    }
  }
  catch (err)
  {
    next(err);
  }
  finally
  {
    releaseLock();
  }
};
