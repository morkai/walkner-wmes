// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const locks = require('util/locks');

module.exports = (app, {user, CompRelEntry, tmpAttachments}, req, res, next) =>
{
  const updatedAt = new Date();
  const updater = user.createUserInfo(req.session.user, req);
  const data = req.body.data || req.body;
  const socketId = req.body.socketId || data.socketId;

  if (Array.isArray(data.attachments))
  {
    data.attachments.forEach(attachment =>
    {
      const upload = tmpAttachments[attachment._id];

      if (upload)
      {
        attachment.date = updatedAt;
        attachment.user = updater;
        attachment.type = upload.data.type;
        attachment.size = upload.data.size;

        clearTimeout(upload.timer);

        delete tmpAttachments[attachment._id];
      }
    });
  }

  step(
    function()
    {
      this.releaseLock = locks.create(`compRel/entries/${req.params.id}`, this.next());
    },
    function()
    {
      CompRelEntry.findById(req.params.id).exec(this.next());
    },
    function(err, entry)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!entry)
      {
        return this.skip(app.createError('Not found.', 'NOT_FOUND', 400));
      }

      const input = _.pick(data, [
        'mrps',
        'oldCode', 'oldName',
        'newCode', 'newName',
        'funcs',
        'comment',
        'attachments'
      ]);
      const changed = entry.applyChanges(input, updater, updatedAt);

      if (changed)
      {
        entry.save(this.next());
      }
    },
    function(err, entry)
    {
      setImmediate(this.releaseLock);

      if (err)
      {
        return next(err);
      }

      if (!entry)
      {
        return res.sendStatus(204);
      }

      app.broker.publish(`${CompRelEntry.TOPIC_PREFIX}.updated.${entry._id}`, {
        _id: entry._id,
        socketId,
        change: _.last(entry.changes)
      });

      res.json(entry);
    }
  );
};
