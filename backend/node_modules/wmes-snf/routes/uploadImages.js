// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const fs = require('fs-extra');
const path = require('path');
const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, {config, SnfProgram}, req, res, next) =>
{
  const imageFiles = _.filter(req.files, (file) => /^[A-Z0-9]+$/.test(file.fieldname)
    && /^image\/(jpeg|gif|png)$/.test(file.mimetype));

  step(
    function findProgramStep()
    {
      if (!imageFiles.length)
      {
        return this.skip(app.createError('No valid image files.', 'INPUT', 400));
      }

      SnfProgram.findById(req.params.program).exec(this.next());
    },
    function uploadFilesStep(err, program)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!program)
      {
        return this.skip(app.createError('Unknown program.', 'INPUT', 400));
      }

      this.program = program;
      this.images = [];

      imageFiles.forEach(imageFile =>
      {
        const imageType = resolveImageType(imageFile.mimetype);
        const newFileName = imageFile.fieldname + '.' + imageType;
        const newFilePath = path.join(config.snfImagesPath, newFileName);

        fs.rename(imageFile.path, newFilePath, this.parallel());

        const image = {
          _id: imageFile.fieldname,
          type: imageType,
          label: imageFile.originalname.replace(/\..*?$/, '')
        };

        this.program.images.push(image);
        this.images.push(image);
      });
    },
    function updateProgramStep(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      this.program.save(this.next());
    },
    function sendResponseStep(err)
    {
      _.forEach(req.files, (file) =>
      {
        fs.unlink(file.path, () => {});
      });

      if (err)
      {
        return next(err);
      }

      res.sendStatus(204);

      app.broker.publish(`snf.programs.${req.params.program}.images.added`, {
        program: req.params.program,
        images: this.images
      });
    }
  );

  function resolveImageType(imageType)
  {
    switch (imageType)
    {
      case 'image/jpeg':
        return 'jpg';

      case 'image/png':
        return 'png';

      case 'image/gif':
        return 'gif';

      default:
        return 'img';
    }
  }
};
