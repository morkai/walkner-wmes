// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

exports.name = 'WiringOrder';

exports.setUp = (app, mongoose) =>
{
  const sapOrderSchema = new mongoose.Schema({
    _id: String,
    qty: Number,
    qtyDone: Number,
    mrp: String,
    leadingOrder: String
  }, {
    _id: false,
    minimize: false
  });

  const wiringOrderSchema = new mongoose.Schema({
    status: {
      type: String,
      enum: ['new', 'started', 'partial', 'finished', 'cancelled'],
      default: 'new'
    },
    startedAt: Date,
    finishedAt: Date,
    date: Date,
    nc12: String,
    name: String,
    qty: Number,
    qtyDone: Number,
    qtyOrder: Number,
    mrp: String,
    orders: [sapOrderSchema]
  }, {
    id: false,
    minimize: false
  });

  wiringOrderSchema.statics.TOPIC_PREFIX = 'wiring.orders';
  wiringOrderSchema.statics.BROWSE_LIMIT = 1000;

  wiringOrderSchema.index({date: -1});
  wiringOrderSchema.index({'orders.leadingOrder': 1});

  wiringOrderSchema.methods.act = function(input, done)
  {
    if (!_.isPlainObject(input))
    {
      return setImmediate(done, app.createError('Invalid input.', 'INPUT', 400));
    }

    const changes = {
      _id: this._id
    };

    switch (input.action)
    {
      case 'start':
        changes.status = 'started';
        changes.startedAt = new Date();
        changes.finishedAt = null;
        break;

      case 'finish':
      {
        if (typeof input.qtyDone !== 'number' || input.qtyDone < 0)
        {
          input.qtyDone = this.qty;
        }

        const newStatus = input.qtyDone >= this.qty ? 'finished' : 'partial';

        if (input.qtyDone !== this.qtyDone || newStatus !== this.status)
        {
          changes.finishedAt = new Date();
          changes.qtyDone = input.qtyDone;
          changes.status = newStatus;
        }
        break;
      }

      case 'continue':
        changes.status = 'started';
        changes.finishedAt = null;
        break;

      case 'reset':
        changes.status = 'new';
        changes.startedAt = null;
        changes.finishedAt = null;
        changes.qtyDone = 0;
        break;

      case 'cancel':
        changes.status = 'cancelled';
        break;

      case 'comment':
        break;

      default:
        return setImmediate(done, app.createError('Unknown action.', 'INPUT', 400));
    }

    if (Object.keys(changes).length === 1)
    {
      return setImmediate(done);
    }

    this.set(changes).save(err => done(err, changes));
  };

  mongoose.model(exports.name, wiringOrderSchema);
};
