// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.DEFAULT_CONFIG = {
  updaterId: 'updater',
  expressId: 'express',
  userId: 'user',
  messengerClientId: 'messenger/client'
};

exports.models = [
  require('./models/gftPcb'),
  require('./models/gftTester'),
  require('orders/models/order'),
  require('prodShiftOrders/models/prodShiftOrder')
];

exports.republishTopics = [
  'gft.pcbs.added', 'gft.pcbs.edited', 'gft.pcbs.deleted', 'gft.pcbs.imported',
  'gft.testers.added', 'gft.testers.edited', 'gft.testers.deleted',
  'gft.stations.updated.**'
];

exports.userPrivileges = [
  'GFT:VIEW', 'GFT:MANAGE'
];

exports.optionalModules = {
  'updater user messengerClient express': require('./routes')
};

exports.start = (app, module) =>
{
  app.broker.subscribe('production.synced.**', onProductionSynced);
  app.broker.subscribe('orders.quantityDone.*', onOrderQuantityDoneChanged);
  app.broker.subscribe('shiftChanged', onShiftChanged);
  app.broker.subscribe('messenger.client.connected', onMessengerClientConnected);

  function onProductionSynced({prodLine, prodShiftOrder})
  {
    if (prodShiftOrder
      && prodShiftOrder.orderId
      && !prodShiftOrder.finishedAt
      && !prodShiftOrder.mechOrder)
    {
      app.broker.publish('gft.newOrderStarted', {
        line: prodLine,
        orderNo: prodShiftOrder.orderId
      });
    }

    if (prodShiftOrder === null)
    {
      app.broker.publish('gft.workFinished', {
        line: prodLine
      });
    }
  }

  function onOrderQuantityDoneChanged(changes)
  {
    if (changes.qtyDone.total === changes.qty)
    {
      app.broker.publish('gft.orderFinished', {
        orderNo: changes._id
      });
    }
  }

  function onShiftChanged()
  {
    app.broker.publish('gft.workFinished', {
      line: null
    });
  }

  function onMessengerClientConnected({moduleName, socketType})
  {
    if (socketType === 'req' && moduleName === module.config.messengerClientId)
    {
      app.broker.publish('gft.stationsRequested');
    }
  }
};
