// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const moment = require('moment');

const LANG = {
  pl: {
    HEADER: 'Badanie OPINIA',
    COMPANY: `{COMPANY}`,
    FOOTER: `Wszelkie prawa zastrzeżone przez {COMPANY}.<br>Powielanie w całości lub w częściach bez zgody właściciela jest zabronione.`,
    COMMENT: `<strong>Dodatkowe uwagi, komentarze, które Twoim zdaniem, powinny być przeanalizowane przez kierownictwo w&nbsp;ramach badania OPINIA</strong> (sposób prowadzenia badania, zawartość ankiety, działania po badaniu, itp.):`,
    METRICS: 'Metryczka',
    HELP: 'zamaluj odpowiednie kółko:',
    EMPLOYER: 'Jestem pracownikiem:',
    SUPERIOR: 'Mój przełożony to:',
    SURVEY: 'Ankieta',
    WARNING: `<strong>UWAGA:</strong> Na poniższe pytania prosimy odpowiadać <u>w perspektywie swojego miejsca pracy</u>,<br>np. centrum produkcyjne/magazyn komponentów.`,
    NO: `Lp.`,
    QUESTION: `Pytanie`,
    DONT_AGREE: `Nie zgadzam<br>się`,
    WHATEVER: `Nie mam<br>zdania`,
    AGREE: `Zgadzam<br>się`
  },
  ua: {
    HEADER: 'Обстеження OPINIA',
    COMPANY: `{COMPANY}`,
    FOOTER: `Всі права захищені {COMPANY}.<br>Повторне відтворення повністю або частково без згоди власника заборонено.`,
    COMMENT: `<strong>Додаткові правки, коментарі, які на вашу думку, повинні бути проаналізовані керівництвом в&nbsp;рамках дослідження OPINIA</strong> (спосіб проведення дослідження, контент анкети,  дії після дослідження і тд.):`,
    METRICS: 'Вихідні дані',
    HELP: 'замалюй відповідне коло:',
    EMPLOYER: 'Я є працівником:',
    SUPERIOR: 'Мій керівник – це:',
    SURVEY: 'Ankieta',
    WARNING: `<strong>УВАГА:</strong> на подальші питання просимо відповідати <u>з перспективи свого місця роботи</u>, напр. виробничий центр/склад.`,
    NO: `№`,
    QUESTION: `Питання`,
    DONT_AGREE: `Не<br>погоджуюсь`,
    WHATEVER: `Не<br>знаю`,
    AGREE: `Погоджуюсь`
  }
};
const COMPANY = {
  ketrzyn: {
    pl: `Signify Poland Sp. z o.o.Oddział Kętrzyn`,
    ua: `Signify Poland Sp. z o.o. Філією Kętrzyn`
  },
  pila: {
    pl: `Signify Poland Sp. z o.o.`,
    ua: `Signify Poland Sp. z o.o.`
  }
};

module.exports = (app, module, req, res, next) =>
{
  const mongoose = app[module.config.mongooseId];
  const OpinionSurvey = mongoose.model('OpinionSurvey');
  const OpinionSurveyDivision = mongoose.model('OpinionSurveyDivision');

  let template = req.query.template;

  if (!_.isString(template) || !/^[a-z0-9-]+$/i.test(template))
  {
    return next(app.createError('INVALID_TEMPLATE', 400));
  }

  const id = req.params.id;
  const preview = (/^PREVIEW/.test(id));
  const language = req.query.lang || 'pl';

  step(
    function()
    {
      if (preview)
      {
        setImmediate(this.parallel(), null, module.surveyPreviews[id]);
      }
      else
      {
        OpinionSurvey.findById(req.params.id).lean().exec(this.parallel());
      }

      OpinionSurveyDivision.find({}, {short: 1}).lean().exec(this.parallel());
    },
    function(err, survey, divisions)
    {
      if (err)
      {
        return next(err);
      }

      if (!survey)
      {
        return next(app.createError('NOT_FOUND', 404));
      }

      OpinionSurvey.prepareIntro(survey);

      if (survey.template)
      {
        template = survey.template + '/' + template;
      }

      survey.superiors.forEach(superior =>
      {
        const division = divisions.find(d => d._id === superior.division);

        if (division)
        {
          superior.division = division.short;
        }
      });

      const momentLocale = language === 'ua' ? 'uk' : language;
      const templateData = {
        cache: false,
        LANG: {...LANG.pl, ...LANG[language]},
        moment: (date) => moment(date).locale(momentLocale),
        survey: null
      };

      templateData.survey = survey;

      if (!preview && survey.lang && survey.lang[language])
      {
        Object.keys(survey.lang[language]).forEach(prop =>
        {
          if (Array.isArray(survey[prop]))
          {
            survey[prop].forEach((v, i) =>
            {
              Object.assign(survey[prop][i], survey.lang[language][prop][i]);
            });
          }
          else
          {
            survey[prop] = survey.lang[language][prop];
          }
        });
      }

      const companyLang = COMPANY[survey.template] || COMPANY.ketrzyn;
      const company = survey.company || companyLang[language] || companyLang.pl;

      Object.keys(templateData.LANG).forEach(k =>
      {
        templateData.LANG[k] = templateData.LANG[k].replace('{COMPANY}', company);
      });

      if (templateData.survey.employer)
      {
        templateData.LANG.EMPLOYER = templateData.survey.employer;
      }

      if (templateData.survey.superior)
      {
        templateData.LANG.SUPERIOR = templateData.survey.superior;
      }

      templateData.referrals = null;
      templateData.questions = survey.questions.filter(q =>
      {
        if (/referral/i.test(q._id))
        {
          templateData.referrals = q;

          return false;
        }

        return true;
      });

      const superiorCount = survey.superiors.length;

      if (superiorCount <= 5)
      {
        templateData.superiorColumnLength = 5;
      }
      else if (superiorCount <= 12)
      {
        templateData.superiorColumnLength = Math.ceil(superiorCount / 2);
      }
      else
      {
        templateData.superiorColumnLength = Math.ceil(superiorCount / 3);
      }

      if (templateData.superiorColumnLength > 6)
      {
        templateData.superiorColumnLength = 6;
      }

      res.render('opinionSurveys:' + template, templateData);
    }
  );
};
