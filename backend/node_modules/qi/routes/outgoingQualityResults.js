// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, {express, User, QiResult}, req, res, next) =>
{
  req.rql.fields = {
    rid: 1,
    inspectedAt: 1,
    mrp: 1,
    errorCategory: 1,
    faultCode: 1,
    rootCause: 1,
    problem: 1,
    standard: 1,
    correctiveActions: 1
  };

  const options = {
    model: QiResult,
    prepareResult
  };

  express.crud.browseRoute(app, options, req, res, next);

  function prepareResult(totalCount, collection, formatResult)
  {
    const actionUsers = new Map();

    collection.forEach(result =>
    {
      if (!Array.isArray(result.correctiveActions))
      {
        result.correctiveActions = [];
      }

      result.correctiveActions.forEach(action =>
      {
        action.who.forEach(user =>
        {
          user.prodFunction = null;

          if (!actionUsers.has(user.id))
          {
            actionUsers.set(user.id, []);
          }

          actionUsers.get(user.id).push(user);
        });
      });
    });

    resolveProdFunctions(actionUsers, err => formatResult(err, {totalCount, collection}));
  }

  function resolveProdFunctions(actionUsers, done)
  {
    if (!actionUsers.size)
    {
      return done();
    }

    const conditions = {_id: Array.from(actionUsers.keys())};
    const fields = {prodFunction: 1};

    User.find(conditions).select(fields).lean().exec((err, users) =>
    {
      if (err)
      {
        return done(err);
      }

      users.forEach(user =>
      {
        if (!user.prodFunction)
        {
          return;
        }

        actionUsers.get(user._id.toString()).forEach(actionUser =>
        {
          actionUser.prodFunction = user.prodFunction;
        });
      });

      done();
    });
  }
};
