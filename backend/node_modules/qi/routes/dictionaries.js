// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {
    mongoose,
    settings,
    User,
    QiResult
  } = module;

  step(
    function findStep()
    {
      _.forEach(module.DICTIONARIES, modelName =>
      {
        mongoose.model(modelName).find().lean().exec(this.group());
      });

      QiResult
        .distinct('productFamily', this.group());

      const conditions = {
        $or: [
          {privileges: 'QI:INSPECTOR'},
          {prodFunction: {$in: ['master', 'leader', 'wh', 'whman']}}
        ]
      };
      const fields = {
        login: 1,
        firstName: 1,
        lastName: 1,
        active: 1,
        privileges: 1,
        prodFunction: 1
      };

      User
        .find(conditions)
        .select(fields)
        .sort({searchName: 1})
        .lean()
        .exec(this.group());

      settings
        .find({_id: /^qi/}, this.group());

      module.getActualCountForUser(req.session.user._id, this.group());
    },
    function sendResultStep(err, dictionaries)
    {
      if (err)
      {
        return this.done(next, err);
      }

      const actualCount = dictionaries.pop();
      const settings = dictionaries.pop();
      const users = dictionaries.pop();
      const result = {
        settings: settings,
        whman: [],
        leaders: [],
        masters: [],
        inspectors: [],
        counter: {
          actual: actualCount,
          required: (settings.find(s => s._id === 'qi.requiredCount') || {value: 0}).value
        },
        productFamilies: dictionaries.pop()
      };

      users.forEach(user =>
      {
        if (Array.isArray(user.privileges) && user.privileges.includes('QI:INSPECTOR'))
        {
          result.inspectors.push(user);
        }

        const prodFunction = user.prodFunction || '';

        if (prodFunction === 'master')
        {
          result.masters.push(user);
        }
        else if (prodFunction === 'leader' || prodFunction === 'wh')
        {
          result.leaders.push(user);
        }

        if (prodFunction.includes('whman'))
        {
          result.whman.push(user);
        }

        delete user.privileges;
        delete user.prodFunction;
      });

      Object.keys(module.DICTIONARIES).forEach((dictionaryName, i) =>
      {
        result[dictionaryName] = dictionaries[i];
      });

      res.json(result);
    }
  );
};
