// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');
const prepareAttachments = require('./prepareAttachments');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    QiResult
  } = module;

  const sessionUser = req.session.user;
  const input = {
    comment: req.body.comment
  };

  if (user.isAllowedTo(sessionUser, 'QI:RESULTS:MANAGE'))
  {
    Object.assign(input, req.body);
    prepareAttachments(module.tmpAttachments, input);
  }
  else
  {
    const leader = user.isAllowedTo(sessionUser, [['FN:leader'], ['FN:wh']]);
    const inspector = user.isAllowedTo(sessionUser, 'QI:INSPECTOR') || leader;
    const specialist = user.isAllowedTo(sessionUser, 'QI:SPECIALIST');
    const master = user.isAllowedTo(sessionUser, 'FN:master');
    const qualityEngineer = user.isAllowedTo(sessionUser, 'FN:quality_engineer');

    if (inspector)
    {
      Object.assign(input, _.omit(req.body, [
        'errorCategory',
        'correctiveActions'
      ]));
      prepareAttachments(module.tmpAttachments, input);
    }

    if (specialist)
    {
      Object.assign(input, _.pick(req.body, [
        'errorCategory',
        'immediateActions',
        'rootCause',
        'correctiveActions'
      ]));
    }

    if (master || leader)
    {
      Object.assign(input, _.pick(req.body, [
        'immediateActions',
        'rootCause',
        'correctiveActions'
      ]));
    }

    if (qualityEngineer)
    {
      Object.assign(input, _.pick(req.body, [
        'standard'
      ]));
    }
  }

  const releaseLock = await locks.createAsync(`${QiResult.TOPIC_PREFIX}.${req.params.id}`);

  try
  {
    const qiResult = await QiResult.findById(req.params.id).exec();

    if (!qiResult)
    {
      return next(app.createError('NOT_FOUND', 404));
    }

    const nokOwner = qiResult.nokOwner && qiResult.nokOwner.id === sessionUser._id;
    const leader = qiResult.leader && qiResult.leader.id === sessionUser._id;
    const corrector = (qiResult.correctiveActions || []).some(
      action => action.who.some(who => who.id === sessionUser._id)
    );

    if (nokOwner || leader || corrector)
    {
      Object.assign(input, _.pick(req.body, [
        'correctiveActions'
      ]));
    }

    if (Array.isArray(input.correctiveActions))
    {
      input.correctiveActions = await QiResult.prepareCorrectiveActions(input.correctiveActions);
    }

    const updater = user.createUserInfo(sessionUser, req);
    const changed = qiResult.applyChanges(input, updater);

    if (!changed)
    {
      return res.json({_id: req.params.id});
    }

    await qiResult.save();

    res.json(qiResult);

    app.broker.publish('qi.results.edited', {
      model: qiResult,
      user: updater
    });
  }
  catch (err)
  {
    next(err);
  }
  finally
  {
    releaseLock();
  }
};
