// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const multer = require('multer');

const dictionariesRoute = require('./dictionariesRoute');
const editResultRoute = require('./editResultRoute');
const sendResultPdfRoute = require('./sendResultPdfRoute');
const sendResultHtmlRoute = require('./sendResultHtmlRoute');
const findByRidRoute = require('./findByRidRoute');
const findOrderRoute = require('./findOrderRoute');
const findComponentRoute = require('./findComponentRoute');
const exportRoute = require('./exportRoute');
const countReportRoute = require('./countReportRoute');
const okRatioReportRoute = require('./okRatioReportRoute');
const nokRatioReportRoute = require('./nokRatioReportRoute');
const outgoingQualityReportRoute = require('./outgoingQualityReportRoute');
const outgoingQualityResultsRoute = require('./outgoingQualityResultsRoute');
const updateOqlWeekRoute = require('./updateOqlWeekRoute');
const sendAttachmentRoute = require('./sendAttachmentRoute');
const uploadAttachmentsRoute = require('./uploadAttachmentsRoute');
const prepareAttachments = require('./prepareAttachments');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    settings,
    reports,
    mongoose,
    QiOqlWeek,
    QiResult
  } = module;

  const canViewDictionaries = user.auth('QI:DICTIONARIES:VIEW');
  const canManageDictionaries = user.auth('QI:DICTIONARIES:VIEW');
  const canViewResults = user.auth('QI:RESULTS:VIEW', 'FN:master', 'FN:leader', 'FN:manager', 'FN:prod_whman');
  const canManageResults = user.auth('QI:INSPECTOR', 'QI:RESULTS:MANAGE');
  const canEditResults = user.auth('USER');
  const canManageOql = user.auth('QI:RESULTS:MANAGE', 'FN:quality_engineer');

  express.get('/qi/dictionaries', canViewResults, dictionariesRoute.bind(null, app, module));

  express.get(
    '/qi/settings',
    canViewResults,
    limitToQiSettings,
    express.crud.browseRoute.bind(null, app, settings.Setting)
  );
  express.put('/qi/settings/:id', canManageDictionaries, settings.updateRoute);

  express.get('/qi/results', canViewResults, express.crud.browseRoute.bind(null, app, QiResult));
  express.post('/qi/results', canManageResults, prepareForAdd, express.crud.addRoute.bind(null, app, QiResult));
  express.get('/qi/results/:id.pdf', canViewResults, sendResultPdfRoute.bind(null, app, module));
  express.get('/qi/results/:id.html', sendResultHtmlRoute.bind(null, app, module));
  express.get('/qi/results/:id', canViewResults, express.crud.readRoute.bind(null, app, {
    model: QiResult,
    idProperty: req => /^[0-9]+$/.test(req.params.id) ? 'rid' : '_id'
  }));
  express.put('/qi/results/:id', canEditResults, editResultRoute.bind(null, app, module));
  express.delete('/qi/results/:id', canManageResults, express.crud.deleteRoute.bind(null, app, QiResult));

  express.get('/qi/results;rid', canViewResults, findByRidRoute.bind(null, app, module));

  express.get('/qi/results;order', canManageResults, findOrderRoute.bind(null, app, module));
  express.get('/qi/results;component', canManageResults, findComponentRoute.bind(null, app, module));

  express.get(
    '/qi/results;export.:format?',
    canViewResults,
    exportRoute.fetchDictionaries.bind(null, app, module),
    express.crud.exportRoute.bind(null, app, {
      filename: 'QI_RESULTS',
      freezeRows: 1,
      freezeColumns: 1,
      columns: {
        rid: 10,
        source: 5,
        nc12: 12,
        name: 30,
        division: 10,
        location: 15,
        productFamily: 7,
        orderNo: 9,
        serialNumbers: 20,
        inspectedAt: 'date',
        result: 5,
        qtyOrder: 'integer',
        qtyInspected: 'integer',
        qtyNokInspected: 'integer',
        qtyToFix: 'integer',
        qtyNok: 'integer',
        faultCode: 5
      },
      serializeRow: exportRoute.serializeRow.bind(null, app, module),
      cleanUp: exportRoute.cleanUp,
      model: QiResult
    })
  );

  express.get(
    '/qi/results/:result/attachments/:attachment',
    user.auth('LOCAL', 'QI:RESULTS:VIEW'),
    sendAttachmentRoute.bind(null, app, module)
  );

  if (module.config.attachmentsDest)
  {
    express.post(
      '/qi/results;upload',
      canManageResults,
      multer({
        dest: module.config.attachmentsDest,
        limits: {
          files: 2,
          fileSize: 10 * 1024 * 1024
        }
      }).any(),
      uploadAttachmentsRoute.bind(null, app, module)
    );
  }

  express.get(
    '/qi/reports/count',
    canViewResults,
    reports.helpers.sendCachedReport.bind(null, 'qi/count'),
    countReportRoute.bind(null, app, module)
  );

  express.get(
    '/qi/reports/okRatio',
    canViewResults,
    reports.helpers.sendCachedReport.bind(null, 'qi/okRatio'),
    okRatioReportRoute.bind(null, app, module)
  );

  express.get(
    '/qi/reports/nokRatio',
    canViewResults,
    reports.helpers.sendCachedReport.bind(null, 'qi/nokRatio'),
    nokRatioReportRoute.bind(null, app, module)
  );

  express.get(
    '/qi/reports/outgoingQuality',
    canViewResults,
    reports.helpers.sendCachedReport.bind(null, 'qi/outgoingQuality'),
    outgoingQualityReportRoute.bind(null, app, module)
  );
  express.get(
    '/qi/reports/outgoingQuality/results',
    canViewResults,
    outgoingQualityResultsRoute.bind(null, app, module)
  );
  express.get(
    '/qi/reports/outgoingQuality/weeks',
    canViewResults,
    express.crud.browseRoute.bind(null, app, QiOqlWeek)
  );
  express.get(
    '/qi/reports/outgoingQuality/weeks/:id',
    canViewResults,
    express.crud.browseRoute.bind(null, app, QiOqlWeek)
  );
  express.post(
    '/qi/reports/outgoingQuality/weeks/:id',
    canManageOql,
    updateOqlWeekRoute.bind(null, app, module)
  );

  express.get('/r/qi/:filter', redirectRoute);

  _.forEach(module.DICTIONARIES, setUpDictionaryRoutes);

  function setUpDictionaryRoutes(modelName, dictionaryName)
  {
    const Model = mongoose.model(modelName);
    const urlPrefix = '/qi/' + dictionaryName;

    express.get(urlPrefix, canViewDictionaries, express.crud.browseRoute.bind(null, app, Model));
    express.post(urlPrefix, canManageDictionaries, express.crud.addRoute.bind(null, app, Model));
    express.get(urlPrefix + '/:id', canViewDictionaries, express.crud.readRoute.bind(null, app, Model));
    express.put(urlPrefix + '/:id', canManageDictionaries, express.crud.editRoute.bind(null, app, Model));
    express.delete(urlPrefix + '/:id', canManageDictionaries, express.crud.deleteRoute.bind(null, app, Model));
  }

  function limitToQiSettings(req, res, next)
  {
    req.rql.selector = {
      name: 'regex',
      args: ['_id', '^qi\\.']
    };

    return next();
  }

  function prepareForAdd(req, res, next)
  {
    const body = req.body;

    body.creator = user.createUserInfo(req.session.user, req);
    body.creator.id = body.creator.id.toString();

    prepareAttachments(module.tmpAttachments, body);

    return next();
  }

  function redirectRoute(req, res, next)
  {
    let url = '/#qiResults';

    if (req.params.filter === 'all')
    {
      url += '?sort(-inspectedAt,-rid)&limit(20)';
    }
    else if (/^[0-9]+$/.test(req.params.filter))
    {
      return redirectToDetailsRoute(req, res, next);
    }

    res.redirect(url);
  }

  function redirectToDetailsRoute(req, res, next)
  {
    QiResult.findOne({rid: parseInt(req.params.filter, 10)}, {_id: 1}).lean().exec((err, result) =>
    {
      if (err)
      {
        return next(err);
      }

      if (result)
      {
        return res.redirect('/#qiResults/' + result._id);
      }

      return res.sendStatus(404);
    });
  }
};
