// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const moment = require('moment');
const util = require('reports/util');

exports.models = [
  require('./models/qiOqlWeek'),
  require('./models/qiResult')
];

exports.report = (app, {QiOqlWeek, QiResult}, options, done) =>
{
  const weekMatch = String(options.week).match(/([0-9]{4})-W([0-9]{2})/);
  const weekMoment = moment().startOf('isoWeek');

  if (weekMatch)
  {
    weekMoment.isoWeekYear(+weekMatch[1]).isoWeek(+weekMatch[2]);
  }

  options.fromTime = weekMoment.clone().subtract(11, 'weeks').toDate();
  options.toTime = weekMoment.clone().add(1, 'weeks').toDate();
  options.topFromTime = weekMoment.clone().subtract(2, 'weeks').toDate();
  options.topCount = 3;

  let minGroupKey = Number.MAX_VALUE;
  let maxGroupKey = weekMoment.valueOf();
  let oqlWeeks = [];
  let oqlTarget = 0;

  const results = {
    options,
    totals: createGroup(),
    top: createGroup(),
    groups: {},
    results: []
  };

  step(
    function findFirstOqlWeekStep()
    {
      QiOqlWeek
        .findOne({_id: {$lte: options.fromTime}})
        .sort({_id: -1})
        .lean()
        .exec(this.next());
    },
    function findRemainingOqlWeeksStep(err, firstOqlWeek)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!firstOqlWeek)
      {
        firstOqlWeek = new QiOqlWeek({_id: options.fromTime});
      }

      setImmediate(this.parallel(), null, firstOqlWeek);

      QiOqlWeek
        .find({_id: {
          $gt: options.fromTime,
          $lt: options.toTime
        }})
        .sort({_id: 1})
        .lean()
        .exec(this.parallel());
    },
    function prepareOqlWeeksStep(err, firstOqlWeek, remainingOqlWeeks)
    {
      if (err)
      {
        return this.skip(err);
      }

      options.oqlWeeks = [firstOqlWeek].concat(remainingOqlWeeks);
      oqlWeeks = [].concat(options.oqlWeeks);
      oqlTarget = firstOqlWeek.target;
    },
    function findResultsStep()
    {
      const conditions = {
        inspectedAt: {
          $gte: options.fromTime,
          $lt: options.toTime
        },
        source: 'prod'
      };
      const sort = {
        inspectedAt: 1
      };
      const fields = {
        rid: 1,
        ok: 1,
        inspectedAt: 1,
        faultCode: 1,
        mrp: 1,
        qtyInspected: 1,
        qtyNok: 1
      };

      const stream = QiResult.find(conditions).select(fields).sort(sort).lean().cursor();
      const next = _.once(this.next());

      stream.on('error', next);
      stream.on('end', next);
      stream.on('data', handleQiResult);
    },
    function finalizeStep(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const createNextGroupKey = util.createCreateNextGroupKey(options.interval);
      const groups = [];
      let groupKey = minGroupKey;

      while (groupKey <= maxGroupKey)
      {
        const toTime = createNextGroupKey(groupKey);
        const group = results.groups[groupKey] || createGroup(groupKey);

        summarizeGroup(group);

        groups.push(group);

        groupKey = toTime;
      }

      results.groups = groups;

      summarizeGroup(results.totals);
      summarizeGroup(results.top);

      return setImmediate(this.next());
    },
    function sendResultsStep(err)
    {
      if (err)
      {
        return done(err);
      }

      options.fromTime = options.fromTime.getTime();
      options.toTime = options.toTime.getTime();
      options.topFromTime = options.topFromTime.getTime();

      options.oqlWeeks.forEach(oqlWeek => oqlWeek._id = oqlWeek._id.getTime());

      done(null, results);
    }
  );

  function calcOqlTarget(key)
  {
    while (oqlWeeks.length && oqlWeeks[0]._id <= key)
    {
      const oqlWeek = oqlWeeks.shift();

      if (oqlWeek.target)
      {
        oqlTarget = oqlWeek.target;
      }
    }
  }

  function createGroup(key)
  {
    if (key)
    {
      calcOqlTarget(key);
    }

    return {
      key,
      totalCount: 0,
      nokCount: 0,
      qtyNok: 0,
      oql: 0,
      oqlTarget,
      where: {},
      what: {}
    };
  }

  function summarizeGroup(group)
  {
    group.oql = group.totalCount ? Math.round(group.nokCount / group.totalCount * 1000000) : 0;
    group.where = sortGroup(group.where, group.qtyNok);
    group.what = sortGroup(group.what, group.qtyNok);
  }

  function sortGroup(unsorted, total)
  {
    const sorted = [];

    Object.keys(unsorted).forEach(key =>
    {
      sorted.push([
        key,
        unsorted[key],
        Math.round(unsorted[key] / total * 100)
      ]);
    });

    sorted.sort((a, b) => b[1] - a[1]);

    return sorted;
  }

  function handleQiResult(qiResult)
  {
    if (!qiResult.mrp)
    {
      return;
    }

    const groupKey = util.createGroupKey(options.interval, qiResult.inspectedAt, false);
    const {totals, top, groups} = results;
    let group = groups[groupKey];

    if (!group)
    {
      group = groups[groupKey] = createGroup(groupKey);
    }

    if (groupKey < minGroupKey)
    {
      minGroupKey = groupKey;
    }

    if (groupKey > maxGroupKey)
    {
      maxGroupKey = groupKey;
    }

    totals.totalCount += qiResult.qtyInspected;
    group.totalCount += qiResult.qtyInspected;

    const isTop = qiResult.inspectedAt >= options.topFromTime;

    if (isTop)
    {
      top.totalCount += qiResult.qtyInspected;
    }

    if (qiResult.ok)
    {
      return;
    }

    totals.nokCount += qiResult.qtyInspected;
    totals.qtyNok += qiResult.qtyNok;
    group.nokCount += qiResult.qtyInspected;
    group.qtyNok += qiResult.qtyNok;

    inc(totals, 'where', qiResult.mrp, qiResult.qtyNok);
    inc(group, 'where', qiResult.mrp, qiResult.qtyNok);

    inc(totals, 'what', qiResult.faultCode, qiResult.qtyNok);
    inc(group, 'what', qiResult.faultCode, qiResult.qtyNok);

    if (isTop)
    {
      top.nokCount += qiResult.qtyInspected;
      top.qtyNok += qiResult.qtyNok;

      inc(top, 'where', qiResult.mrp, qiResult.qtyNok);
      inc(top, 'what', qiResult.faultCode, qiResult.qtyNok);
    }

    if (qiResult.inspectedAt >= maxGroupKey)
    {
      results.results.push({
        rid: qiResult.rid,
        where: qiResult.mrp,
        what: qiResult.faultCode
      });
    }
  }

  function inc(group, prop, key, value)
  {
    if (!group[prop][key])
    {
      group[prop][key] = 0;
    }

    group[prop][key] += value;
  }
};
