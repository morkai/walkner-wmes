// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {
    sapGui,
    Order
  } = module;

  let queue = [];
  let inProgress = [];

  app.broker.subscribe('production.synced.*', handleProductionSync);

  module.scheduleMissingDocsFix = orderNo => checkOrder(orderNo, true);

  function handleProductionSync({types, prodShiftOrder})
  {
    if (!types.includes('changeOrder') && !types.includes('correctOrder'))
    {
      return;
    }

    if (!prodShiftOrder || !prodShiftOrder.orderId || prodShiftOrder.mechOrder)
    {
      return;
    }

    if (prodShiftOrder.orderData
      && Array.isArray(prodShiftOrder.orderData.documents)
      && prodShiftOrder.orderData.documents.length)
    {
      return;
    }

    checkOrder(prodShiftOrder.orderId, false);
  }

  function checkOrder(orderNo, force)
  {
    if (inProgress.includes(orderNo) || queue.some(o => o.orderNo === orderNo))
    {
      return;
    }

    queue.push({orderNo, force});

    fixNextOrder();
  }

  async function fixNextOrder()
  {
    if (!queue.length || inProgress.length)
    {
      return;
    }

    const $or = [
      {
        _id: {$in: []},
        'documents.0': {$exists: false}
      },
      {
        _id: {$in: []}
      }
    ];

    queue.forEach(({orderNo, force}) =>
    {
      inProgress.push(orderNo);
      $or[force ? 1 : 0]._id.$in.push(orderNo);
    });

    queue = [];

    try
    {
      const sapOrders = await Order
        .find({$or})
        .select({_id: 1})
        .lean()
        .exec();

      if (sapOrders.length)
      {
        await sapGui.runRemoteJob({
          name: 'docs',
          scriptTimeout: 60 * 1000,
          repeatOnFailure: 0,
          waitForResult: false,
          outputFile: 'ORDERS_DOCUMENTS_0.txt',
          orders: sapOrders.map(o => o._id)
        });
      }

      inProgress = [];

      setImmediate(fixNextOrder);
    }
    catch (err)
    {
      module.error(err, 'Failed to fix missing documents for orders.', {orders: inProgress});

      inProgress.forEach(orderNo => queue.push({orderNo, force: false}));
      inProgress = [];

      setTimeout(fixNextOrder, 60000);
    }
  }
};
