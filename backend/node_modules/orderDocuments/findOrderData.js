// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const shifts = require('util/shifts');

module.exports = (app, module, {orderNo, line}, done) =>
{
  const {
    cachedSettings,
    orderDataCache,
    Order,
    OrderEto,
    OrderDocumentFile,
    OrderDocumentConfirmation
  } = module;

  if (orderDataCache.has(orderNo))
  {
    const orderData = orderDataCache.get(orderNo);

    resolveConfirmations(orderData, null, (err) => done(err, orderData));

    return;
  }

  step(
    function()
    {
      Order
        .findById(orderNo)
        .select({
          name: 1,
          nc12: 1,
          documents: 1,
          bom: 1
        })
        .lean()
        .exec(this.next());
    },
    function(err, sapOrder)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!sapOrder)
      {
        return this.skip(app.createError('Order not found.', 'NOT_FOUND', 404));
      }

      const orderData = {
        no: sapOrder._id,
        nc12: sapOrder.nc12,
        name: sapOrder.name,
        documents: prepareDocumentsMap(sapOrder.name, sapOrder.documents, {}),
        confirmations: {},
        hasBom: !_.isEmpty(sapOrder.bom),
        hasEto: false
      };

      if (!/^[0-9]+$/.test(sapOrder.nc12))
      {
        prepareDocumentsMap(sapOrder.nc12, [], orderData.documents);
      }

      setImmediate(this.parallel(), null, orderData);

      OrderEto
        .findById(sapOrder.nc12)
        .select({_id: 1})
        .lean()
        .exec(this.parallel());

      if (!orderData.hasBom)
      {
        return setImmediate(this.parallel(), null, []);
      }

      const componentCodes = new Set();
      const componentNames = new Set();

      sapOrder.bom.forEach(component =>
      {
        if (component.nc12)
        {
          componentCodes.add(component.nc12);
        }

        if (component.name)
        {
          componentNames.add(component.name.toUpperCase().replace(/[^A-Z0-9]+/g, ''));
        }
      });

      OrderDocumentFile
        .find({
          $or: [
            {'components.nc12': {$in: Array.from(componentCodes)}},
            {'components.searchName': {$in: Array.from(componentNames)}}
          ]
        })
        .select({_id: 1, name: 1})
        .lean()
        .exec(this.parallel());
    },
    function(err, orderData, orderEto, componentFiles)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (orderEto)
      {
        orderData.hasEto = true;
      }

      setImmediate(this.parallel(), null, orderData);

      resolveConfirmations(orderData, componentFiles, this.parallel());
    },
    function(err, orderData)
    {
      if (err)
      {
        return done(err);
      }

      orderDataCache.set(orderNo, orderData);

      done(null, orderData);
    }
  );

  function prepareDocumentsMap(productName, documentsList, documentsMap)
  {
    _.forEach(documentsList, (document) =>
    {
      documentsMap[document.nc15] = document.name;
    });

    if (!_.isString(productName) || productName.length === 0)
    {
      return documentsMap;
    }

    _.forEach(cachedSettings.extra, (extra) =>
    {
      const stringMatch = typeof extra.pattern === 'string' && productName.includes(extra.pattern);
      const regexpMatch = extra.pattern instanceof RegExp && extra.pattern.test(productName);

      if (stringMatch || regexpMatch)
      {
        Object.assign(documentsMap, extra.documents);
      }
    });

    return documentsMap;
  }

  function resolveConfirmations(orderData, componentFiles, done)
  {
    if (!componentFiles)
    {
      componentFiles = [];

      Object.keys(orderData.confirmations).forEach(nc15 =>
      {
        componentFiles.push({
          _id: nc15,
          name: orderData.documents[nc15]
        });
      });
    }

    if (!componentFiles.length)
    {
      return done();
    }

    const documents = [];

    componentFiles.forEach(file =>
    {
      documents.push(file._id);

      orderData.documents[file._id] = file.name;
      orderData.confirmations[file._id] = [
        'unknown',
        'unknown',
        'unknown',
        'unknown',
        'unknown',
        'unknown',
        'unknown',
        'unknown'
      ];
    });

    if (!line)
    {
      return done();
    }

    step(
      function()
      {
        OrderDocumentFile
          .find({_id: {$in: documents}})
          .select({stations: 1})
          .lean()
          .exec(this.parallel());

        OrderDocumentConfirmation
          .find({
            nc15: {$in: documents},
            time: {$gte: shifts.getCurrentShiftInfo().date},
            orderNo,
            line
          })
          .select({nc15: 1, station: 1})
          .lean()
          .exec(this.parallel());
      },
      function(err, files, confirmations)
      {
        if (err)
        {
          return done(err);
        }

        const fileToStations = new Map();

        files.forEach(file => fileToStations.set(file._id, file.stations));

        _.forEach(orderData.confirmations, (stations, nc15) =>
        {
          const fileStations = fileToStations.get(nc15);

          stations.forEach((v, i) =>
          {
            stations[i] = fileStations && fileStations.length && !fileStations.includes(i)
              ? 'ignored'
              : 'unconfirmed';
          });
        });

        confirmations.forEach(confirmation =>
        {
          orderData.confirmations[confirmation.nc15][confirmation.station] = 'confirmed';
        });

        done();
      }
    );
  }
};
