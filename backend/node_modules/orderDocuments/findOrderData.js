// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module, orderNo, done) =>
{
  const {cachedSettings, orderDataCache, Order, OrderEto} = module;

  if (orderDataCache.has(orderNo))
  {
    return done(null, orderDataCache.get(orderNo));
  }

  step(
    function findOrderStep()
    {
      Order.findById(orderNo, {name: 1, nc12: 1, documents: 1, bom: 1}).lean().exec(this.next());
    },
    function findEtoStep(err, sapOrder)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!sapOrder)
      {
        return this.skip(new Error('NOT_FOUND'));
      }

      const order = {
        no: sapOrder._id,
        nc12: sapOrder.nc12,
        name: sapOrder.name,
        documents: prepareDocumentsMap(sapOrder.name, sapOrder.documents, {}),
        hasBom: !_.isEmpty(sapOrder.bom),
        hasEto: false
      };

      if (!/^[0-9]+$/.test(sapOrder.nc12))
      {
        prepareDocumentsMap(sapOrder.nc12, [], order.documents);
      }

      setImmediate(this.parallel(), null, order);

      OrderEto.findById(sapOrder.nc12, {_id: 1}).lean().exec(this.parallel());
    },
    function setEtoStep(err, order, orderEto)
    {
      if (!err && orderEto)
      {
        order.hasEto = true;
      }

      orderDataCache.set(orderNo, order);

      setImmediate(this.next(), null, order);
    },
    done
  );

  function prepareDocumentsMap(productName, documentsList, documentsMap)
  {
    _.forEach(documentsList, (document) =>
    {
      documentsMap[document.nc15] = document.name;
    });

    if (!_.isString(productName) || productName.length === 0)
    {
      return documentsMap;
    }

    _.forEach(cachedSettings.extra, (extra) =>
    {
      const stringMatch = typeof extra.pattern === 'string' && productName.includes(extra.pattern);
      const regexpMatch = extra.pattern instanceof RegExp && extra.pattern.test(productName);

      if (stringMatch || regexpMatch)
      {
        Object.assign(documentsMap, extra.documents);
      }
    });

    return documentsMap;
  }
};
