// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = {
  ORDER: handleOrderDocument,
  BOM: handleBomDocument,
  ETO: handleEtoDocument
};

function handleBomDocument(app, {Order}, req, res, next)
{
  step(
    function()
    {
      Order
        .findById(req.query.order)
        .select({qty: 1, bom: 1, notes: 1})
        .lean()
        .exec(this.next());
    },
    function(err, order)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!order)
      {
        return this.skip(app.createError('ORDER_NOT_FOUND', 404));
      }

      if (req.method !== 'HEAD')
      {
        Order.assignPkhdStrategies(order, this.parallel());
        Order.assignNotes(order, 'docs', this.parallel());
      }
    },
    function(err, order)
    {
      if (err)
      {
        return next(err);
      }

      if (req.method === 'HEAD')
      {
        return res.sendStatus(204);
      }

      const components = [];

      (order.bom || []).forEach(component =>
      {
        if (!component.nc12)
        {
          return;
        }

        const qty = (component.qty / order.qty).toString().split('.');

        component.qty = [
          parseInt(qty[0], 10),
          +(parseInt(qty[1], 10) || 0).toString().substring(0, 3)
        ];

        components.push(component);
      });

      res.render('orderDocuments:bom', {
        order: order._id,
        notes: order.notes,
        components,
        windowWidth: parseInt(req.query.w, 10) || 0,
        windowHeight: parseInt(req.query.h, 10) || 0
      });
    }
  );
}

function handleEtoDocument(app, {Order, OrderEto}, req, res, next)
{
  Order.findById(req.query.order, {nc12: 1}).lean().exec((err, order) =>
  {
    if (err)
    {
      return next(err);
    }

    if (!order)
    {
      return next(app.createError('Order not found.', 'NOT_FOUND', 404));
    }

    OrderEto.findById(order.nc12, {html: 1}).lean().exec((err, orderEto) =>
    {
      if (err)
      {
        return next(err);
      }

      if (!orderEto)
      {
        return next(app.createError('ETO not found.', 'NOT_FOUND', 404));
      }

      if (req.method === 'HEAD')
      {
        return res.sendStatus(204);
      }

      res.render('orderDocuments:eto', {
        order: order._id,
        nc12: order.nc12,
        etoTableHtml: orderEto.html,
        header: req.query.header !== '0'
      });
    });
  });
}

function handleOrderDocument(app, {Order}, req, res, next)
{
  Order.findById(req.query.order, {_id: 1}).lean().exec((err, order) =>
  {
    if (err)
    {
      return next(err);
    }

    if (!order)
    {
      return next(app.createError('ORDER_NOT_FOUND', 404));
    }

    if (req.method === 'HEAD')
    {
      return res.sendStatus(204);
    }

    res.redirect(`/#orders/${order._id}`);
  });
}
