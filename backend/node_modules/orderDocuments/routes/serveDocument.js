// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const fresh = require('fresh');
const specialDocuments = require('./specialDocuments');

module.exports = (app, module, req, res, next) =>
{
  const nc15 = req.params.nc15;

  if (specialDocuments[nc15])
  {
    return specialDocuments[nc15](app, module, req, res, next);
  }

  const nc15ToFreshHeaders = module.freshHeaders;
  const orderNo = /^[0-9]{9}$/.test(req.query.order) ? req.query.order : null;
  const freshHeaders = nc15ToFreshHeaders[nc15] && nc15ToFreshHeaders[nc15][orderNo];

  if (freshHeaders && fresh(req.headers, freshHeaders.headers))
  {
    res.set(freshHeaders.headers);
    res.sendStatus(304);

    return;
  }

  const hash = /^[a-f0-9]{32}$/.test(req.query.hash) ? req.query.hash : null;
  const options = {
    orderNo,
    hash,
    forceOriginal: req.query.pdf === '1' || req.query.original === '1',
    includeName: false
  };

  module.findDocumentFilePath(nc15, options, (err, results) =>
  {
    if (err)
    {
      if (err.code === 'ENOENT')
      {
        return res.sendStatus(404);
      }

      if (err.code === 'CONVERTING')
      {
        return res.render('orderDocuments:converting', {error: err.message, nc15, hash});
      }

      return next(err);
    }

    if (!results)
    {
      return res.sendStatus(404);
    }

    if (!options.forceOriginal && results.type !== 'application/pdf')
    {
      return res.render('orderDocuments:viewer/unsupported', {
        nc15: nc15,
        hash: results.hash,
        name: results.name,
        type: results.type
      });
    }

    if (results.meta)
    {
      return res.render('orderDocuments:viewer/converted', {
        nc15: nc15,
        hash: results.hash,
        meta: results.meta,
        name: results.name
      });
    }

    return res.sendFile(results.filePath, {maxAge: 60 * 1000}, (err) =>
    {
      if (err)
      {
        return next(err);
      }

      if (!nc15ToFreshHeaders[nc15])
      {
        nc15ToFreshHeaders[nc15] = {};
      }

      if (nc15ToFreshHeaders[nc15][orderNo])
      {
        clearTimeout(nc15ToFreshHeaders[nc15][orderNo].timer);
      }

      nc15ToFreshHeaders[nc15][orderNo] = {
        headers: _.pick(res.getHeaders(), ['etag', 'last-modified', 'cache-control']),
        timer: setTimeout(clearFreshHeader.bind(null, nc15, orderNo), 60 * 1000)
      };
    });
  });

  function clearFreshHeader(nc15, key)
  {
    if (nc15ToFreshHeaders[nc15] && nc15ToFreshHeaders[nc15][key])
    {
      delete nc15ToFreshHeaders[nc15][key];
    }
  }
};
