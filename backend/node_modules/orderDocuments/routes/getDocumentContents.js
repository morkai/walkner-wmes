// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {orderNo} = req.params;

  if (typeof orderNo !== 'string' || !/^[0-9]+$/.test(orderNo))
  {
    return next(app.createError('INPUT', 400));
  }

  if (module.documentContentsCache.has(orderNo))
  {
    return res.json(module.documentContentsCache.get(orderNo).items);
  }

  step(
    function()
    {
      module.findOrderData(orderNo, this.next());
    },
    function(err, orderData)
    {
      if (err)
      {
        return this.skip(err);
      }

      this.results = {
        documents: {},
        items: {}
      };

      const items = this.results.items;

      Object.keys(orderData.documents).forEach(nc15 =>
      {
        const done = this.group();
        const opts = {
          orderNo,
          hash: null,
          forcePdf: false,
          includeName: true
        };

        this.results.documents[nc15] = true;

        module.findDocumentFilePath(nc15, opts, (err, results) => // eslint-disable-line handle-callback-err
        {
          const pages = results && results.meta && results.meta.pages ? results.meta.pages : [];

          pages.forEach(page =>
          {
            page.content.forEach(text =>
            {
              const item = text.s.padStart(4, '0');

              text.p = page.info.num;

              if (!items[item])
              {
                items[item] = {};
              }

              if (!items[item][nc15])
              {
                items[item][nc15] = [];
              }

              items[item][nc15].push(text);
            });
          });

          done(null);
        });
      });
    },
    function(err)
    {
      if (err)
      {
        return next(err);
      }

      module.documentContentsCache.set(orderNo, this.results);

      res.json(this.results.items);
    }
  );
};
