// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {Order} = module;

  const {orderNo} = req.params;

  if (typeof orderNo !== 'string' || !/^[0-9]+$/.test(orderNo))
  {
    return next(app.createError('INPUT', 400));
  }

  const documentContents = {
    documents: {},
    items: {},
    bom: {
      documents: {},
      components: []
    }
  };

  if (!documentContents[req.query.result])
  {
    req.query.result = 'items';
  }

  if (module.documentContentsCache.has(orderNo))
  {
    return res.json(module.documentContentsCache.get(orderNo)[req.query.result]);
  }

  step(
    function()
    {
      module.findOrderData({orderNo}, this.parallel());

      Order
        .findById(orderNo)
        .select({
          qty: 1,
          bom: 1
        })
        .lean()
        .exec(this.parallel());
    },
    function(err, orderData, sapOrder)
    {
      if (err)
      {
        return this.skip(err);
      }

      this.orderQty = sapOrder ? sapOrder.qty : 1;
      this.bom = sapOrder && Array.isArray(sapOrder.bom) ? sapOrder.bom : [];

      const items = documentContents.items;

      Object.keys(orderData.documents).forEach(nc15 =>
      {
        const done = this.group();
        const opts = {
          orderNo,
          hash: null,
          forcePdf: false,
          includeName: true
        };

        documentContents.documents[nc15] = orderData.documents[nc15];

        module.findDocumentFilePath(nc15, opts, (err, results) => // eslint-disable-line handle-callback-err
        {
          const pages = results && results.meta && results.meta.pages ? results.meta.pages : [];

          pages.forEach(page =>
          {
            page.content.forEach(text =>
            {
              const item = text.s.padStart(4, '0');

              text.p = page.info.num;

              if (!items[item])
              {
                items[item] = {};
              }

              if (!items[item][nc15])
              {
                items[item][nc15] = [];
              }

              items[item][nc15].push(text);
            });
          });

          done(null);
        });
      });
    },
    function(err)
    {
      if (err)
      {
        return next(err);
      }

      this.bom.forEach(component =>
      {
        component.qty = Math.round(component.qty / this.orderQty * 1000) / 1000;
        component.marks = {};

        _.forEach(documentContents.items[component.item], (marks, nc15) =>
        {
          documentContents.bom.documents[nc15] = documentContents.documents[nc15];

          component.marks[nc15] = sortMarks(marks, component.item);
        });

        documentContents.bom.components.push(component);
      });

      module.documentContentsCache.set(orderNo, documentContents);

      res.json(documentContents[req.query.result]);
    }
  );
};

function sortMarks(marks, item)
{
  return marks.sort((a, b) =>
  {
    if (a.s === b.s)
    {
      return a.p - b.p;
    }

    if (a.s === item)
    {
      return -1;
    }

    if (b.s === item)
    {
      return 1;
    }

    return b.s.length - a.s.length;
  });
}
