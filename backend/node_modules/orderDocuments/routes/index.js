// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const multer = require('multer');

const redirectRoute = require('./redirect');
const serveAppRoute = require('./serveApp');
const authClientRoute = require('./authClient');
const getClientLicensingRoute = require('./getClientLicensing');
const getOrderDataRoute = require('./getOrderData');
const getDocumentContentsRoute = require('./getDocumentContents');
const getDocumentMetaRoute = require('./getDocumentMeta');
const getDocumentHeadersRoute = require('./getDocumentHeaders');
const serveDocumentRoute = require('./serveDocument');
const serveDocumentPageRoute = require('./serveDocumentPage');
const importDocumentsRoute = require('./importDocuments');
const importOrdersRoute = require('./importOrders');
const resolveImportDatesRoute = require('./resolveImportDates');
const manageTreeRoute = require('./manageTree');
const forceConvertRoute = require('./forceConvert');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    OrderDocumentFile,
    OrderDocumentFolder,
    OrderDocumentName,
    OrderDocumentClient,
    OrderDocumentChange,
    OrderDocumentConfirmation
  } = module;

  const canView = user.auth('DOCUMENTS:VIEW');
  const canViewUser = user.auth('USER', 'DOCUMENTS:VIEW');
  const canViewLocal = user.auth('LOCAL', 'USER', 'DOCUMENTS:VIEW');
  const canManage = user.auth('DOCUMENTS:MANAGE');

  //
  // Permalinks
  //
  express.get('/r/docs/:r', redirectRoute);

  //
  // App
  //
  express.get('/documents', canViewLocal, serveAppRoute.bind(null, app, module));
  express.post('/documents', canViewLocal, authClientRoute.bind(null, app, module));
  express.get('/docs/:clientId', canViewLocal, serveAppRoute.bind(null, app, module));
  express.post('/docs/:clientId', canViewLocal, authClientRoute.bind(null, app, module));

  //
  // Clients
  //
  express.get('/orderDocuments/licensing', canView, getClientLicensingRoute.bind(null, app, module));
  express.get(
    '/orderDocuments/clients',
    canViewLocal,
    express.crud.browseRoute.bind(null, app, OrderDocumentClient)
  );
  express.delete(
    '/orderDocuments/clients/:id',
    canManage,
    express.crud.deleteRoute.bind(null, app, OrderDocumentClient)
  );

  //
  // Tree
  //
  express.post('/orderDocuments/tree', canManage, manageTreeRoute.bind(null, app, module));
  express.post(
    '/orderDocuments/uploads',
    canManage,
    multer({
      storage: multer.diskStorage({
        destination: path.join(module.config.uploadedPath, '.tmp')
      }),
      fileFilter: (req, file, done) =>
      {
        done(null, file.mimetype === 'application/pdf' && /\.pdf$/i.test(file.originalname));
      }
    }).single('file'),
    (req, res, next) =>
    {
      if (req.file)
      {
        res.send(req.file.filename);
      }
      else
      {
        next(app.createError('INVALID_FILE', 400));
      }
    }
  );
  express.post('/orderDocuments/uploads;forceConvert', canManage, forceConvertRoute.bind(null, app, module));
  express.get('/orderDocuments/folders', canViewUser, express.crud.browseRoute.bind(null, app, OrderDocumentFolder));
  express.get('/orderDocuments/folders/:id', canViewUser, express.crud.readRoute.bind(null, app, OrderDocumentFolder));
  express.get('/orderDocuments/files', canViewUser, express.crud.browseRoute.bind(null, app, OrderDocumentFile));
  express.get('/orderDocuments/files/:id', canViewUser, express.crud.readRoute.bind(null, app, OrderDocumentFile));
  express.get('/orderDocuments/names', canViewUser, express.crud.browseRoute.bind(null, app, OrderDocumentName));
  express.get('/orderDocuments/changes', canView, express.crud.browseRoute.bind(null, app, OrderDocumentChange));
  express.get('/orderDocuments/changes/:id', canView, express.crud.readRoute.bind(null, app, OrderDocumentChange));

  // Confirmations
  express.get(
    '/orderDocuments/confirmations',
    canView,
    express.crud.browseRoute.bind(null, app, OrderDocumentConfirmation)
  );
  express.get(
    '/orderDocuments/confirmations/:id',
    canView,
    express.crud.readRoute.bind(null, app, OrderDocumentConfirmation)
  );

  //
  // Order data
  //
  express.get('/orders/:orderNo/documents', canViewLocal, getOrderDataRoute.bind(null, app, module));
  express.get('/orders/:orderNo/documentContents', canViewLocal, getDocumentContentsRoute.bind(null, app, module));

  //
  // Document files
  //
  express.get('/orderDocuments/:nc15/meta', canViewLocal, getDocumentMetaRoute.bind(null, app, module));
  express.head('/orderDocuments/:nc15', canViewLocal, getDocumentHeadersRoute.bind(null, app, module));
  express.get('/orderDocuments/:nc15', canViewLocal, serveDocumentRoute.bind(null, app, module));
  express.get('/orderDocuments/:nc15/:page', canViewLocal, serveDocumentPageRoute.bind(null, app, module));

  //
  // Import
  //
  express.post('/orderDocuments;import', canViewLocal, importDocumentsRoute.bind(null, app, module));
  express.get('/orderDocuments;import-orders', canViewLocal, importOrdersRoute.bind(null, app, module));
  express.get('/orderDocuments;resolve-import-dates', canViewLocal, resolveImportDatesRoute.bind(null, app, module));
};
