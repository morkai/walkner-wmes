// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const fs = require('fs');
const _ = require('lodash');
const step = require('h5.step');
const moment = require('moment');

module.exports = (app, module, nc15, options, done) =>
{
  const {Order, OrderDocumentName, OrderDocumentFile, OrderDocumentUpload} = module;

  if (!/^[0-9]+$/.test(nc15))
  {
    return done(app.createError('INVALID_NC15', 400));
  }

  if (!module.cachedSettings.useCatalog && !options.hash)
  {
    return findLegacyDocumentFilePath(nc15, options, done);
  }

  step(
    function()
    {
      OrderDocumentFile.findById(nc15, {name: 1, files: 1}).lean().exec(this.parallel());

      if (options.orderNo)
      {
        Order.findById(options.orderNo, {sapCreatedAt: 1, scheduledStartDate: 1}).lean().exec(this.parallel());
      }
    },
    function(err, orderDocumentFile, order)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!orderDocumentFile)
      {
        return this.skip(app.createError('Order document not found.', 'DOCUMENT_NOT_FOUND', 404));
      }

      if (_.isEmpty(orderDocumentFile.files))
      {
        return this.skip(app.createError('Order document does not have any files.', 'DOCUMENT_NO_FILES', 400));
      }

      const orderDate = order ? (order.sapCreatedAt || order.scheduledStartDate) : null;
      const orderTime = orderDate
        ? moment.utc(moment(orderDate).format('YYYY-MM-DD'), 'YYYY-MM-DD').valueOf()
        : moment.utc().startOf('day').valueOf();
      let file = null;

      if (options.hash)
      {
        file = _.find(orderDocumentFile.files, f => f.hash === options.hash);
      }
      else
      {
        file = _.find(orderDocumentFile.files, f => orderTime >= f.date.getTime());
      }

      if (!file)
      {
        if (options.hash)
        {
          return this.skip(app.createError('File hash not found.', 'HASH_NOT_FOUND', 404, {
            required: options.hash,
            actual: _.map(orderDocumentFile.files, 'hash')
          }));
        }

        return this.skip(app.createError('File date not found.', 'DATE_NOT_FOUND', 404, {
          required: orderTime,
          actual: _.map(orderDocumentFile.files, f => f.date.getTime())
        }));
      }

      this.hash = file.hash;
      this.name = orderDocumentFile.name;
      this.filePath = path.join(
        module.config.uploadedPath,
        nc15,
        file.hash,
        options.forcePdf ? `${nc15}.pdf` : 'meta.json'
      );
      this.pdfFilePath = options.forcePdf ? null : path.join(
        module.config.uploadedPath,
        nc15,
        file.hash,
        `${nc15}.pdf`
      );

      fs.stat(this.filePath, this.parallel());

      if (!options.forcePdf)
      {
        fs.readFile(this.filePath, 'utf8', this.parallel());
      }
      else
      {
        setImmediate(this.parallel(), null, null);
      }

      if (this.pdfFilePath)
      {
        fs.stat(this.pdfFilePath, this.parallel());
      }
    },
    function(err, stats, metaJson, pdfStats) // eslint-disable-line handle-callback-err
    {
      const meta = metaJson ? tryJsonParse(metaJson) : null;

      if (meta || (stats && stats.isFile()) || (pdfStats && pdfStats.isFile()))
      {
        return this.done(done, null, {
          filePath: stats ? this.filePath : this.pdfFilePath,
          source: 'remote',
          meta: options.forcePdf ? null : meta,
          name: this.name,
          hash: this.hash
        });
      }

      if (options.forcePdf && options.hash)
      {
        OrderDocumentUpload.findById(options.hash, this.next());
      }
    },
    function(err, upload)
    {
      if (err)
      {
        return done(err);
      }

      if (!err && upload)
      {
        return handleUploadInProgress(upload, done);
      }

      done(app.createError('Document not found.', 'NOT_FOUND', 404));
    }
  );

  function tryJsonParse(json)
  {
    try
    {
      return JSON.parse(json);
    }
    catch (err)
    {
      return null;
    }
  }

  function findLegacyDocumentFilePath(nc15, options, done)
  {
    if (_.isEmpty(module.cachedSettings.path))
    {
      return done(app.createError('NO_PATH_SETTING', 503));
    }

    if (options.hash)
    {
      return done(app.createError(`Legacy document not found: [${nc15}:${options.hash}]`, 'NOT_FOUND', 404));
    }

    const cachedFilePath = path.join(module.config.cachedPath, nc15 + '.pdf');
    const localFilePath = path.join(module.cachedSettings.path, nc15 + '.pdf');
    const convertedPath = path.join(module.config.convertedPath, nc15);

    step(
      function()
      {
        const localDone = this.parallel();
        const cachedDone = this.parallel();
        const convertedDone = this.parallel();

        fs.stat(localFilePath, localDone);

        if (_.isEmpty(module.cachedSettings.remoteServer))
        {
          cachedDone();
        }
        else
        {
          fs.stat(cachedFilePath, cachedDone);
        }

        if (options.forcePdf)
        {
          convertedDone();
        }
        else
        {
          fs.readFile(
            path.join(convertedPath, 'meta.json'),
            'utf8',
            (err, json) => convertedDone(null, json ? JSON.parse(json) : null) // eslint-disable-line handle-callback-err
          );
        }

        if (options.includeName)
        {
          OrderDocumentName.findById(nc15).lean().exec(this.parallel());
        }
      },
      function(err, localStats, cachedStats, meta, orderDocumentName)
      {
        const name = orderDocumentName ? orderDocumentName.name : null;

        if (meta)
        {
          return done(null, {
            filePath: convertedPath,
            source: cachedStats ? 'search' : 'remote',
            meta: meta,
            name: name,
            hash: ''
          });
        }

        if (cachedStats)
        {
          return done(null, {
            filePath: cachedFilePath,
            source: 'search',
            meta: null,
            name: name,
            hash: ''
          });
        }

        if (localStats)
        {
          return done(null, {
            filePath: localFilePath,
            source: 'remote',
            meta: null,
            name: name,
            hash: ''
          });
        }

        return done(err);
      }
    );
  }

  function handleUploadInProgress(upload, done)
  {
    if (upload.count < 2)
    {
      return done(app.createError(`Converting ${upload.nc15}/${upload._id}...`, 'CONVERTING', 400));
    }

    upload.count = 0;

    upload.save((err) =>
    {
      if (err)
      {
        done(err);
      }
      else
      {
        app.broker.publish('orderDocuments.tree.filesUploaded');

        done(app.createError(`Converting ${upload.nc15}/${upload._id} (again)...`, 'CONVERTING', 400));
      }
    });
  }
};
