// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const fs = require('fs');
const _ = require('lodash');
const step = require('h5.step');
const moment = require('moment');
const allowedTypes = require('./allowedTypes');

module.exports = (app, module, nc15, options, done) =>
{
  const {Order, OrderDocumentFile, OrderDocumentUpload} = module;

  if (!/^[0-9]{15}$/.test(nc15))
  {
    return done(app.createError('INVALID_NC15', 400));
  }

  let forceOriginal = !!options.forceOriginal;

  step(
    function()
    {
      OrderDocumentFile
        .findById(nc15)
        .select({name: 1, files: 1})
        .lean()
        .exec(this.parallel());

      if (options.orderNo)
      {
        Order
          .findById(options.orderNo)
          .select({sapCreatedAt: 1, scheduledStartDate: 1})
          .lean()
          .exec(this.parallel());
      }
    },
    function(err, orderDocumentFile, order)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!orderDocumentFile)
      {
        return this.skip(app.createError('Order document not found.', 'DOCUMENT_NOT_FOUND', 404));
      }

      if (_.isEmpty(orderDocumentFile.files))
      {
        return this.skip(app.createError('Order document does not have any files.', 'DOCUMENT_NO_FILES', 400));
      }

      const orderDate = order ? (order.sapCreatedAt || order.scheduledStartDate) : null;
      const orderTime = orderDate
        ? moment.utc(moment(orderDate).format('YYYY-MM-DD'), 'YYYY-MM-DD').valueOf()
        : moment.utc().startOf('day').valueOf();
      let file = null;

      if (options.hash)
      {
        file = _.find(orderDocumentFile.files, f => f.hash === options.hash);
      }
      else
      {
        file = _.find(orderDocumentFile.files, f => orderTime >= f.date.getTime());
      }

      if (!file)
      {
        if (options.hash)
        {
          return this.skip(app.createError('File hash not found.', 'HASH_NOT_FOUND', 404, {
            required: options.hash,
            actual: _.map(orderDocumentFile.files, 'hash')
          }));
        }

        return this.skip(app.createError('File date not found.', 'DATE_NOT_FOUND', 404, {
          required: orderTime,
          actual: _.map(orderDocumentFile.files, f => f.date.getTime())
        }));
      }

      this.type = file.type;
      this.ext = allowedTypes[file.type];

      if (this.ext !== 'pdf')
      {
        forceOriginal = true;
      }

      this.hash = file.hash;
      this.name = orderDocumentFile.name;
      this.filePath = path.join(
        module.config.uploadsDest,
        nc15,
        file.hash,
        forceOriginal ? `${nc15}.${this.ext}` : 'meta.json'
      );
      this.pdfFilePath = forceOriginal ? null : path.join(
        module.config.uploadsDest,
        nc15,
        file.hash,
        `${nc15}.pdf`
      );

      fs.stat(this.filePath, this.parallel());

      if (!forceOriginal)
      {
        fs.readFile(this.filePath, 'utf8', this.parallel());
      }
      else
      {
        setImmediate(this.parallel(), null, _.isEmpty(file.meta) ? null : file.meta);
      }

      if (this.pdfFilePath)
      {
        fs.stat(this.pdfFilePath, this.parallel());
      }
    },
    function(err, stats, metaJson, pdfStats) // eslint-disable-line handle-callback-err
    {
      const meta = metaJson ? (typeof metaJson === 'string' ? tryJsonParse(metaJson) : metaJson) : null;

      if (meta || (stats && stats.isFile()) || (pdfStats && pdfStats.isFile()))
      {
        return this.done(done, null, {
          filePath: stats ? this.filePath : this.pdfFilePath,
          source: 'remote',
          meta,
          name: this.name,
          hash: this.hash,
          type: this.type
        });
      }

      if (forceOriginal && options.hash && this.ext === 'pdf')
      {
        OrderDocumentUpload.findById(options.hash, this.next());
      }
    },
    function(err, upload)
    {
      if (err)
      {
        return done(err);
      }

      if (!err && upload)
      {
        return handleUploadInProgress(upload, done);
      }

      done(app.createError('Document not found.', 'NOT_FOUND', 404));
    }
  );

  function tryJsonParse(json)
  {
    try
    {
      return JSON.parse(json);
    }
    catch (err)
    {
      return null;
    }
  }

  function handleUploadInProgress(upload, done)
  {
    if (upload.count < 2)
    {
      return done(app.createError(`Converting ${upload.nc15}/${upload._id}...`, 'CONVERTING', 400));
    }

    upload.count = 0;

    upload.save((err) =>
    {
      if (err)
      {
        done(err);
      }
      else
      {
        app.broker.publish('orderDocuments.tree.filesUploaded');

        done(app.createError(`Converting ${upload.nc15}/${upload._id} (again)...`, 'CONVERTING', 400));
      }
    });
  }
};
