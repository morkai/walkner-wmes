'use strict';

const {execSync} = require('child_process');

try
{
  const cmd = `python3 ${__dirname}/extractText.py "${process.argv[2]}"`;
  const data = JSON.parse(execSync(cmd, {encoding: 'utf8'}));

  const result = {
    meta: data.meta.info,
    pages: data.pages.sort((a, b) => a.pageInfo.num - b.pageInfo.num).map(page =>
    {
      const coords = findCoords(page.pageInfo, page.content);

      return {
        info: page.pageInfo,
        content: page.content
          .filter(text =>
          {
            if (text.dir !== 'ltr' || !/^[0-9]{1,4}$/.test(text.str))
            {
              return false;
            }

            if (text.x > coords.left
              && text.x < coords.right
              && text.y > coords.top
              && text.y < coords.bottom)
            {
              return true;
            }

            return text.str.length >= 2 && !text.str.startsWith('1');
          })
          .map(text =>
          {
            return {
              x: Math.round(text.x),
              y: Math.round(text.y),
              w: Math.round(text.width),
              h: Math.round(text.height),
              s: text.str
            };
          })
      };
    })
  };

  process.stdout.write(JSON.stringify(result, null, 2));
}
catch (err)
{
  console.error(err.stack);
  process.exit(1); // eslint-disable-line no-process-exit
}

function findCoords(page, content)
{
  return {
    top: findTopCoord(page, content),
    bottom: findBottomCoord(page, content),
    right: findRightCoord(page, content),
    left: findLeftCoord(page, content)
  };
}

function findCoord(marks, defaultValue, toFind, minMax)
{
  const found = [];

  for (let i = 0; i < marks.length; ++i)
  {
    if (!toFind.length)
    {
      break;
    }

    const mark = marks[i];

    if (mark.str === toFind[0])
    {
      found.push(mark);
      toFind.shift();
    }
  }

  if (toFind.length === 0)
  {
    return Math.round(minMax(found));
  }

  return defaultValue;
}

function findTopCoord(page, content)
{
  const maxY = 50;
  const marks = content.filter(text => text.y < maxY).sort((a, b) => a.x - b.x);

  return findCoord(marks, 0, ['1', '2', '3'], (m) =>
  {
    return Math.max(m[0].y, m[1].y, m[2].y) + 10;
  });
}

function findBottomCoord(page, content)
{
  const minY = page.height - 50;
  const marks = content.filter(text => text.y > minY).sort((a, b) => a.x - b.x);

  return findCoord(marks, page.height, ['1', '2', '3'], (m) =>
  {
    return Math.min(m[0].y - m[0].height, m[1].y - m[1].height, m[2].y - m[2].height) - 10;
  });
}

function findRightCoord(page, content)
{
  const minX = page.width - 100;
  const marks = content.filter(text => text.x > minX).sort((a, b) => a.y - b.y);

  return findCoord(marks, page.width, ['a', 'b', 'c'], (m) =>
  {
    return Math.min(m[0].x, m[1].x, m[2].x) - 10;
  });
}

function findLeftCoord(page, content)
{
  const maxX = 100;
  const marks = content.filter(text => text.x < maxX).sort((a, b) => a.y - b.y);

  return findCoord(marks, 0, ['a', 'b', 'c'], (m) =>
  {
    return Math.max(m[0].x + m[0].width, m[1].x + m[1].width, m[2].x + m[2].width) + 10;
  });
}
