import sys
import re
import json
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfparser import PDFParser
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import PDFPageAggregator
from pdfminer.layout import LAParams, LTTextBox, LTTextLine, LTFigure

def decode(s):
  for encoding in "utf-8-sig", "utf-8", "utf-16":
    try:
      return s.decode(encoding)
    except UnicodeDecodeError:
      continue
  return s.decode("latin-1")

def parse_layout(layout, content):
  (_, _, _, pageHeight) = layout.bbox
  for (i, o) in enumerate(layout):
    if isinstance(o, LTTextBox) or isinstance(o, LTTextLine):
      str = o.get_text().strip()
      if re.search("^[0-9]{1,4}$", str):
        content.append({
          "x": round(o.x0),
          "y": round(pageHeight - o.y0),
          "width": round(o.width),
          "height": round(o.height),
          "dir": "ltr",
          "str": str
        })
    elif isinstance(o, LTFigure):
      parse_layout(o, content)

fp = open(sys.argv[1], 'rb')
parser = PDFParser(fp)
doc = PDFDocument(parser)
resManager = PDFResourceManager()
params = LAParams()
device = PDFPageAggregator(resManager, laparams=params)
interpreter = PDFPageInterpreter(resManager, device)

result = {
  "meta": {
    "info": {}
  },
  "pages": []
}

for p in doc.info[0]:
  try:
    result["meta"]["info"][p] = decode(doc.info[0][p]).strip()
  except:
    pass

for num, page in enumerate(PDFPage.create_pages(doc), start=1):
  interpreter.process_page(page)
  layout = device.get_result()
  page = {
    "pageInfo": {
      "num": num,
      "width": layout.width,
      "height": layout.height,
      "rotation": layout.rotate,
      "scale": 1,
      "offsetX": 0,
      "offsetY": 0
    },
    "content": []
  }
  result["pages"].append(page)
  parse_layout(layout, page["content"])

print(json.dumps(result))

