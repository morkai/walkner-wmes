// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');
const checkRemoteServer = require('./checkRemoteServer');
const findDocumentFilePath = require('./findDocumentFilePath');
const findOrderData = require('./findOrderData');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  sioId: 'sio',
  userId: 'user',
  updaterId: 'updater',
  orgUnitsId: 'orgUnits',
  settingsId: 'settings',
  productionId: 'production',
  mailSenderId: 'mail/sender',
  cachedPath: './order-documents/cached',
  convertedPath: './order-documents/converted',
  uploadedPath: './order-documents/uploaded',
  sejdaConsolePath: 'sejda-console',
  exiftoolExe: 'exiftool',
  pdfboxAppJar: 'pdfbox-app-2.0.3.jar',
  cwebpExe: 'cwebp',
  maxJavaHeapSpace: '512m'
};

exports.models = [
  require('./models/orderDocumentChange'),
  require('./models/orderDocumentClient'),
  require('./models/orderDocumentConfirmation'),
  require('./models/orderDocumentFile'),
  require('./models/orderDocumentFolder'),
  require('./models/orderDocumentName'),
  require('./models/orderDocumentStatus'),
  require('./models/orderDocumentUpload'),
  require('subscriptions/models/subscription'),
  require('user/models/user'),
  require('licenses/models/license'),
  require('orders/models/order'),
  require('orders/models/orderEto')
];

exports.recordTopics = {
  warning: [
    'orderDocuments.tree.filePurged',
    'orderDocuments.tree.folderPurged'
  ]
};

exports.republishTopics = [
  'orderDocuments.tree.**',
  'orderDocuments.clients.**',
  'orderDocuments.remoteChecked.**',
  'orderDocuments.confirmed.**',
  'orderDocuments.eto.synced'
];

exports.userPrivileges = ['DOCUMENTS:VIEW', 'DOCUMENTS:MANAGE'];

exports.optionalModules = {
  'mongoose': [
    require('./tree'),
    require('./converter'),
    require('./changes')
  ],
  'mongoose mailSender': require('./subscriptions'),
  'mongoose sio user production orgUnits': require('./commands'),
  'mongoose user updater orgUnits express': require('./routes'),
  'settings': require('./settings')
};

exports.start = (app, module) =>
{
  module.cachedSettings = {};
  module.freshHeaders = {};
  module.orderDataCache = new Map();
  module.documentContentsCache = new Map();

  module.checkRemoteServer = checkRemoteServer.bind(null, app, module);
  module.findDocumentFilePath = findDocumentFilePath.bind(null, app, module);
  module.findOrderData = findOrderData.bind(null, app, module);

  app.broker.subscribe('app.started', removeOldClients).setLimit(1);

  app.broker.subscribe('orderDocuments.tree.fileAdded', clearFreshHeaders);
  app.broker.subscribe('orderDocuments.tree.fileEdited', clearFreshHeaders);

  app.broker.subscribe('orders.bom.synced', onComponentsSynced);
  app.broker.subscribe('orderDocuments.synced', onDocumentsSynced);
  app.broker.subscribe('orderDocuments.eto.synced', onEtoSynced);
  app.broker.subscribe('orderDocuments.tree.converted', onUploadConverted);

  function clearDocumentContentsCache()
  {
    module.documentContentsCache.clear();
  }

  function clearOrderDataCache()
  {
    module.orderDataCache.clear();
  }

  function onComponentsSynced()
  {
    clearOrderDataCache();
    clearDocumentContentsCache();
  }

  function onDocumentsSynced()
  {
    clearOrderDataCache();
    clearDocumentContentsCache();
  }

  function onEtoSynced({nc12})
  {
    module.orderDataCache.forEach(order =>
    {
      if (order.nc12 === nc12)
      {
        module.orderDataCache.delete(order.no);
      }
    });
  }

  function onUploadConverted({nc15})
  {
    module.documentContentsCache.forEach(({documents}, orderNo) =>
    {
      if (documents[nc15])
      {
        module.documentContentsCache.delete(orderNo);
      }
    });
  }

  function clearFreshHeaders(message)
  {
    if (message.file && module.freshHeaders[message.file._id])
    {
      delete module.freshHeaders[message.file._id];
    }
  }

  function removeOldClients()
  {
    step(
      function()
      {
        const conditions = {
          disconnectedAt: {$lt: moment().subtract(7, 'days').toDate()}
        };

        module.OrderDocumentClient.deleteMany(conditions, this.next());
      },
      function(err)
      {
        if (err)
        {
          return this.skip(err);
        }

        const conditions = {
          connectedAt: {$lt: moment().subtract(21, 'days').toDate()}
        };

        module.OrderDocumentClient.deleteMany(conditions, this.next());
      },
      function(err)
      {
        if (err)
        {
          module.error(err, 'Failed to remove old clients.');
        }

        setTimeout(removeOldClients, 24 * 3600 * 1000);
      }
    );
  }
};
