// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const checkRemoteServer = require('./checkRemoteServer');
const findDocumentFilePath = require('./findDocumentFilePath');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  sioId: 'sio',
  userId: 'user',
  updaterId: 'updater',
  orgUnitsId: 'orgUnits',
  settingsId: 'settings',
  productionId: 'production',
  mailSenderId: 'mail/sender',
  cachedPath: './order-documents/cached',
  convertedPath: './order-documents/converted',
  uploadedPath: './order-documents/uploaded',
  sejdaConsolePath: 'sejda-console',
  exiftoolExe: 'exiftool',
  pdfboxAppJar: 'pdfbox-app-2.0.3.jar',
  cwebpExe: 'cwebp',
  maxJavaHeapSpace: '512m'
};

exports.models = [
  require('./models/orderDocumentChange'),
  require('./models/orderDocumentClient'),
  require('./models/orderDocumentFile'),
  require('./models/orderDocumentFolder'),
  require('./models/orderDocumentName'),
  require('./models/orderDocumentStatus'),
  require('./models/orderDocumentUpload'),
  require('subscriptions/models/subscription'),
  require('user/models/user'),
  require('licenses/models/license'),
  require('orders/models/order'),
  require('orders/models/orderEto')
];

exports.optionalModules = {
  'mongoose': [
    require('./tree'),
    require('./converter'),
    require('./changes')
  ],
  'mongoose mailSender': require('./subscriptions'),
  'mongoose sio production orgUnits': require('./commands'),
  'mongoose user updater orgUnits express': require('./routes'),
  'settings': require('./settings')
};

exports.start = (app, module) =>
{
  module.cachedSettings = {};
  module.freshHeaders = {};

  module.checkRemoteServer = checkRemoteServer.bind(null, app, module);
  module.findDocumentFilePath = findDocumentFilePath.bind(null, app, module);

  app.broker.subscribe('app.started', removeOldClients).setLimit(1);

  app.broker.subscribe('orderDocuments.tree.fileAdded', clearFreshHeaders);
  app.broker.subscribe('orderDocuments.tree.fileEdited', clearFreshHeaders);

  function clearFreshHeaders(message)
  {
    if (message.file && module.freshHeaders[message.file._id])
    {
      delete module.freshHeaders[message.file._id];
    }
  }

  function removeOldClients()
  {
    const conditions = {
      disconnectedAt: {$lt: moment().subtract(7, 'days').toDate()}
    };

    module.OrderDocumentClient.deleteMany(conditions, (err) =>
    {
      if (err)
      {
        module.error(err, 'Failed to remove old clients.');
      }

      setTimeout(removeOldClients, 24 * 3600 * 1000);
    });
  }
};
