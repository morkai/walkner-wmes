// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

exports.name = 'PaintShopOrder';

exports.setUp = (app, mongoose) =>
{
  const componentSchema = new mongoose.Schema({
    nc12: String,
    name: String,
    qty: Number,
    unit: String
  }, {
    _id: false,
    minimize: false
  });

  const childOrderSchema = new mongoose.Schema({
    order: String,
    nc12: String,
    name: String,
    qty: Number,
    components: [componentSchema],
    deleted: {
      type: Boolean,
      default: false
    }
  }, {
    _id: false,
    minimize: false
  });

  const paintShopOrderSchema = new mongoose.Schema({
    _id: String,
    status: {
      type: String,
      enum: ['new', 'started', 'partial', 'finished', 'cancelled'],
      default: 'new'
    },
    startedAt: Date,
    finishedAt: Date,
    comment: String,
    order: String,
    followups: [String],
    date: Date,
    nc12: String,
    name: String,
    qty: Number,
    qtyDone: Number,
    qtyPaint: Number,
    qtyDlv: Number,
    mrp: String,
    placement: String,
    startTime: Number,
    paint: {
      nc12: String,
      name: String
    },
    childOrders: [childOrderSchema]
  }, {
    id: false,
    minimize: false
  });

  paintShopOrderSchema.statics.TOPIC_PREFIX = 'paintShop.orders';
  paintShopOrderSchema.statics.BROWSE_LIMIT = 1000;

  paintShopOrderSchema.index({date: -1});
  paintShopOrderSchema.index({status: 1, date: -1});
  paintShopOrderSchema.index({order: 1});
  paintShopOrderSchema.index({'childOrders.order': 1});

  paintShopOrderSchema.methods.act = function(input, done)
  {
    if (!_.isPlainObject(input))
    {
      return setImmediate(done, app.createError('Invalid input.', 'INPUT', 400));
    }

    const changes = {
      _id: this._id,
      order: this.order
    };

    const comment = input.comment;

    if (typeof comment === 'string' && comment.length)
    {
      changes.comment = comment;
    }

    switch (input.action)
    {
      case 'start':
        changes.status = 'started';
        changes.startedAt = new Date();
        changes.finishedAt = null;
        break;

      case 'finish':
      {
        if (typeof input.qtyDone !== 'number' || input.qtyDone <= 0)
        {
          input.qtyDone = this.qty;
        }

        changes.finishedAt = new Date();
        changes.qtyDone = input.qtyDone;
        changes.status = changes.qtyDone >= this.qty ? 'finished' : 'partial';
        break;
      }

      case 'deliver':
      {
        if (typeof input.qtyDlv !== 'number' || input.qtyDlv === 0)
        {
          const diff = this.qty - this.qtyDlv;

          if (diff <= 0)
          {
            return setImmediate(done);
          }

          input.qtyDlv = diff;
        }

        if (this.qtyDlv + input.qtyDlv > this.qty)
        {
          if (this.qtyDlv === this.qty)
          {
            return setImmediate(done);
          }

          input.qtyDlv = this.qty - this.qtyDlv;
        }

        changes.qtyDlv = this.qtyDlv + input.qtyDlv;
        break;
      }

      case 'continue':
        changes.status = 'started';
        changes.finishedAt = null;
        break;

      case 'reset':
        changes.status = 'new';
        changes.startedAt = null;
        changes.finishedAt = null;
        changes.qtyDone = 0;
        changes.qtyDlv = 0;
        break;

      case 'cancel':
        changes.status = 'cancelled';
        break;

      case 'comment':
        break;

      default:
        return setImmediate(done, app.createError('Unknown action.', 'INPUT', 400));
    }

    this.set(changes).save(err => done(err, changes));
  };

  mongoose.model(exports.name, paintShopOrderSchema);
};
