// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const jsonDeepEqual = require('util/jsonDeepEqual');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  fteId: 'fte',
  settingsId: 'settings',
  updaterId: 'updater',
  reportsId: 'reports',
  generator: false,
  loadSecretKey: null
};

exports.models = [
  require('./models/paintShopDropZone'),
  require('./models/paintShopEvent'),
  require('./models/paintShopLoad'),
  require('./models/paintShopOrder'),
  require('./models/paintShopPaint'),
  require('orders/models/order'),
  require('orders/models/productNote'),
  require('prodShiftOrders/models/prodShiftOrder'),
  require('planning/models/plan'),
  require('planning/models/planSettings')
];

exports.userPrivileges = [
  'PAINT_SHOP:VIEW',
  'PAINT_SHOP:MANAGE',
  'PAINT_SHOP:PAINTER',
  'PAINT_SHOP:DROP_ZONES'
];

exports.republishTopics = [
  'paintShop.events.saved',
  'paintShop.orders.changed.*',
  'paintShop.orders.updated.*',
  'paintShop.dropZones.updated.*',
  'paintShop.paints.*',
  'paintShop.load.updated'
];

exports.recordTopics = {
  warning: ['paintShop.paints.deleted']
};

exports.optionalModules = {
  'mongoose settings': require('./generator'),
  'mongoose fte user express updater reports settings': require('paintShop/routes')
};

exports.start = (app, module) =>
{
  const {Order, PaintShopOrder} = module;

  app.broker.subscribe('orders.updated.*', onOrderUpdated);
  app.broker.subscribe('orders.productNotes.added', onNoteAdded);
  app.broker.subscribe('orders.productNotes.edited', onNoteEdited);
  app.broker.subscribe('orders.productNotes.deleted', onNoteDeleted);

  function onOrderUpdated(message)
  {
    if (message.change.newValues.notes)
    {
      updateOrderNotes(message._id);
    }
  }

  function onNoteAdded({model})
  {
    if (model.target === 'ps')
    {
      app.broker.publish('paintShop.generator.requested', {});
    }
  }

  function onNoteEdited({model})
  {
    if (model.target === 'ps' || model.lastModifiedPaths().includes('target'))
    {
      app.broker.publish('paintShop.generator.requested', {});
    }
  }

  function onNoteDeleted({model})
  {
    if (model.target === 'ps')
    {
      app.broker.publish('paintShop.generator.requested', {});
    }
  }

  function updateOrderNotes(orderNo)
  {
    step(
      function()
      {
        PaintShopOrder
          .find({
            $or: [
              {order: orderNo},
              {'childOrders.order': orderNo}
            ]
          })
          .select({order: 1, notes: 1, childOrders: 1})
          .lean()
          .exec(this.next());
      },
      function(err, psOrders)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!psOrders.length)
        {
          return this.skip();
        }

        this.psOrders = psOrders;

        Order
          .findById(orderNo)
          .select({nc12: 1, notes: 1, bom: 1})
          .lean()
          .exec(this.next());
      },
      function(err, sapOrder)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!sapOrder)
        {
          return this.skip();
        }

        this.sapOrder = sapOrder;

        Order.assignNotes(sapOrder, 'ps', this.next());
      },
      function(err)
      {
        if (err)
        {
          return this.skip(err);
        }

        const operations = [];
        const updated = [];

        this.psOrders.forEach(psOrder =>
        {
          let root = psOrder;
          let childIndex = -1;

          if (psOrder.order !== orderNo)
          {
            childIndex = root.childOrders.findIndex(o => o.order === orderNo);
            root = root.childOrders[childIndex];
          }

          const oldNotes = root.notes || [];
          const newNotes = (this.sapOrder.notes || []).map(note => ({
            priority: note.priority,
            text: note.text
          }));

          if (jsonDeepEqual(newNotes, oldNotes))
          {
            return;
          }

          root.notes = newNotes;

          const $set = {};

          if (childIndex === -1)
          {
            $set.notes = newNotes;
          }
          else
          {
            $set[`childOrders.${childIndex}.notes`] = newNotes;
          }

          updated.push(psOrder);
          operations.push({
            updateOne: {
              filter: {_id: psOrder._id},
              update: {$set}
            }
          });
        });

        if (operations.length)
        {
          this.updated = updated;

          PaintShopOrder.collection.bulkWrite(operations, this.next());
        }
      },
      function(err)
      {
        if (err)
        {
          return module.error(err, 'Failed to update notes.', {orderNo});
        }

        (this.updated || []).forEach(psOrder =>
        {
          app.broker.publish(`paintShop.orders.updated.${psOrder._id}`, psOrder);
        });
      }
    );
  }
};
