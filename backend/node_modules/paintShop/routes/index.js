// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const loadReport = require('paintShop/loadReport');
const updateOrderRoute = require('./updateOrder');
const updateDropZoneRoute = require('./updateDropZone');
const updateLoadRoute = require('./updateLoad');
const exportOrdersRoute = require('./exportOrders');
const exportPlanExecutionRoute = require('./exportPlanExecution');

module.exports = (app, module) =>
{
  const {
    updater,
    reports,
    settings,
    express,
    user,
    PaintShopEvent,
    PaintShopOrder,
    PaintShopDropZone,
    PaintShopPaint,
    PaintShopLoad
  } = module;

  const canView = user.auth('LOCAL', 'PAINT_SHOP:VIEW', 'PLANNING:VIEW');
  const canUpdate = user.auth('LOCAL', 'PAINT_SHOP:PAINTER', 'PAINT_SHOP:MANAGE');
  const canManage = user.auth('PAINT_SHOP:MANAGE');
  const canManageDropZones = user.auth('PAINT_SHOP:DROP_ZONES');

  // Apps
  ['ps-queue', 'ps-load'].forEach(appId =>
  {
    express.get(`/${appId}`, canView, (req, res) =>
    {
      res.format({
        'text/html': () =>
        {
          res.render('index', updater.getAppTemplateData(appId, req));
        }
      });
    });
  });

  // Settings
  express.get(
    '/paintShop/settings',
    canView,
    settings.browseRoute('paintShop')
  );

  express.put('/paintShop/settings/:id', canManage, settings.updateRoute);

  // Queues
  express.post('/paintShop/:id;generate', canManage, generateRoute);

  // Events
  express.get(
    '/paintShop/events',
    canView,
    express.crud.browseRoute.bind(null, app, PaintShopEvent)
  );

  // Orders
  express.get(
    '/paintShop/orders',
    canView,
    prepareCurrentDate,
    express.crud.browseRoute.bind(null, app, PaintShopOrder)
  );

  express.get(
    '/paintShop/orders;export.:format?',
    canView,
    exportOrdersRoute.bind(null, app, module)
  );

  express.get(
    '/paintShop/orders;export-plan-execution.:format?',
    canView,
    exportPlanExecutionRoute.bind(null, app, module)
  );

  express.get('/paintShop/orders/:id', canView, express.crud.readRoute.bind(null, app, PaintShopOrder));

  express.patch('/paintShop/orders/:id', canUpdate, updateOrderRoute.bind(null, app, module));

  // Drop zones
  express.get(
    '/paintShop/dropZones',
    canView,
    express.crud.browseRoute.bind(null, app, PaintShopDropZone)
  );

  express.post('/paintShop/dropZones/:date/:mrp', canManageDropZones, updateDropZoneRoute.bind(null, app, module));

  // Paints
  express.get('/paintShop/paints', canView, express.crud.browseRoute.bind(null, app, PaintShopPaint));

  express.post('/paintShop/paints', canManage, express.crud.addRoute.bind(null, app, PaintShopPaint));

  express.get('/paintShop/paints/:id', canView, express.crud.readRoute.bind(null, app, PaintShopPaint));

  express.put('/paintShop/paints/:id', canManage, express.crud.editRoute.bind(null, app, PaintShopPaint));

  express.delete('/paintShop/paints/:id', canManage, express.crud.deleteRoute.bind(null, app, PaintShopPaint));

  // Load
  express.post('/paintShop/load/update', updateLoadRoute.bind(null, app, module));

  express.get('/paintShop/load/stats', canView, getLoadStatsRoute);

  express.get('/paintShop/load/recent', canView, getRecentLoadRoute);

  express.get(
    '/paintShop/load/report',
    canView,
    reports.helpers.sendCachedReport.bind(null, 'paintShop/load'),
    loadReportRoute
  );

  function prepareCurrentDate(req, res, next)
  {
    req.rql.selector.args.forEach(term =>
    {
      if (term.name !== 'eq' || term.args[0] !== 'date')
      {
        return;
      }

      const date = term.args[1];

      if (date === 'current')
      {
        const m = moment();

        if (m.hours() < 17)
        {
          m.startOf('day').subtract(1, 'days');
        }
        else
        {
          m.startOf('day').add(1, 'days');
        }

        term.args[1] = moment.utc(m.format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate();
      }
      else if (/^[0-9]+-[0-9]+-[0-9]+$/.test(date))
      {
        term.args[1] = moment.utc(date, 'YYYY-MM-DD').toDate();
      }
    });

    next();
  }

  function generateRoute(req, res)
  {
    app.broker.publish('paintShop.generator.requested', {
      date: req.params.id
    });

    res.sendStatus(204);
  }

  function getLoadStatsRoute(req, res, next)
  {
    PaintShopLoad.getStats((err, stats) =>
    {
      if (err)
      {
        return next(err);
      }

      res.json(stats);
    });
  }

  function getRecentLoadRoute(req, res, next)
  {
    const limit = Math.min(2560, Math.max(1, req.rql.limit || 100));

    PaintShopLoad.find({}, {_id: 0, d: 1}).sort({_id: -1}).limit(limit).lean().exec((err, docs) =>
    {
      if (err)
      {
        return next(err);
      }

      res.json({
        totalCount: docs.length,
        collection: docs.map(d => Math.round(d.d / 1000)).reverse()
      });
    });
  }

  function loadReportRoute(req, res, next)
  {
    const query = req.query;
    const options = {
      fromTime: reports.helpers.getTime(query.from) || null,
      toTime: reports.helpers.getTime(query.to) || null,
      interval: reports.helpers.getInterval(query.interval, 'day')
    };

    reports.helpers.generateReport(
      app,
      reports,
      loadReport,
      'paintShop/load',
      req.reportHash,
      options,
      (err, reportJson) =>
      {
        if (err)
        {
          return next(err);
        }

        res.type('json');
        res.send(reportJson);
      }
    );
  }
};
