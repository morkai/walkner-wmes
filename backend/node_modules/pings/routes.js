// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');

module.exports = (app, module) =>
{
  const {express, user, Ping} = module;

  const canView = user.auth('LOCAL', 'SUPER');
  const canManage = user.auth('SUPER');

  express.options('/ping', setPingHeaders, (req, res) => res.end());

  express.get('/ping', setPingHeaders, (req, res) => res.format({
    text: () =>
    {
      res.send('pong');
    },
    json: () =>
    {
      res.json('pong');
    }
  }));

  express.get('/pings', canView, express.crud.browseRoute.bind(null, app, Ping));

  express.delete('/pings', canManage, deletePings);

  express.get('/pings;by-app', canView, aggregate.bind(null, {
    _id: {$ifNull: ['$headers.x-wmes-app', '']},
    min: {$min: '$time'},
    max: {$max: '$time'},
    sum: {$sum: 1},
    ip: {$addToSet: '$user.ip'}
  }));
  express.get('/pings;by-ip', canView, aggregate.bind(null, {
    _id: '$user.ip',
    min: {$min: '$time'},
    max: {$max: '$time'},
    sum: {$sum: 1},
    app: {$addToSet: {$ifNull: ['$headers.x-wmes-app', '']}}
  }));
  express.get('/pings;by-user', canView, aggregate.bind(null, {
    _id: '$user.id',
    min: {$min: '$time'},
    max: {$max: '$time'},
    sum: {$sum: 1},
    ip: {$addToSet: '$user.ip'},
    app: {$addToSet: {$ifNull: ['$headers.x-wmes-app', '']}}
  }));
  express.get('/pings;by-os', canView, aggregate.bind(null, (req, pipeline) =>
  {
    pipeline.push({
      $group: {
        _id: {
          os: {
            $cond: {
              if: {$regexMatch: {input: '$headers.user-agent', regex: /Android/}},
              then: 'android',
              else: {
                $cond: {
                  if: {$regexMatch: {input: '$headers.user-agent', regex: /Linux i686/}},
                  then: 'linux32',
                  else: {
                    $cond: {
                      if: {$regexMatch: {input: '$headers.user-agent', regex: /Linux x86_64/}},
                      then: 'linux64',
                      else: {
                        $cond: {
                          if: {$regexMatch: {input: '$headers.user-agent', regex: /Windows/}},
                          then: 'windows',
                          else: 'unknown'
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          app: {$ifNull: ['$headers.x-wmes-app', '']},
          line: {$ifNull: ['$headers.x-wmes-line', '']}
        },
        min: {$min: '$time'},
        max: {$max: '$time'},
        sum: {$sum: 1},
        ip: {$addToSet: '$user.ip'}
      }
    });

    const $match = {};

    if (req.query.os)
    {
      $match['_id.os'] = req.query.os.includes(',')
        ? {$in: req.query.os.split(',')}
        : req.query.os;
    }
    else
    {
      $match['_id.os'] = {$ne: 'unknown'};
    }

    if (req.query.app)
    {
      $match['_id.app'] = req.query.app.includes(',')
        ? {$in: req.query.app.split(',')}
        : req.query.app;
    }
    else
    {
      $match['_id.app'] = {$ne: ''};
    }

    if (req.query.line)
    {
      $match['_id.line'] = req.query.line.includes(',')
        ? {$in: req.query.line.split(',')}
        : req.query.line;
    }
    else
    {
      $match['_id.line'] = {$ne: ''};
    }

    if (Object.keys($match).length)
    {
      pipeline.push({$match});
    }

    return results =>
    {
      return results.filter(result =>
      {
        return result._id.app.length && result._id.line.length;
      });
    };
  }));

  function setPingHeaders(req, res, next)
  {
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'GET');
    res.set('Access-Control-Allow-Headers', req.headers['access-control-request-headers'] || '');

    next();
  }

  function deletePings(req, res, next)
  {
    const days = +req.query.days;

    if (isNaN(days) || days < 1)
    {
      return next(app.createError('Invalid days.', 'INPUT', 400));
    }

    Ping.deleteMany({time: moment().startOf('day').subtract(days, 'days').toDate}, err =>
    {
      if (err)
      {
        return next(err);
      }

      res.sendStatus(204);
    });
  }

  function aggregate(preparePipeline, req, res, next)
  {
    const unit = req.query.unit || 'hours';
    const time = +req.query.time || 8;

    const pipeline = [
      {
        $match: {
          time: {$gte: moment().startOf(unit).subtract(time, unit).toDate()}
        }
      }
    ];

    let prepareResults;

    if (typeof preparePipeline === 'function')
    {
      prepareResults = preparePipeline(req, pipeline);
    }
    else if (Array.isArray(preparePipeline))
    {
      pipeline.push(...preparePipeline);
    }
    else
    {
      pipeline.push({$group: preparePipeline});
    }

    Ping.aggregate(pipeline, (err, results) =>
    {
      if (err)
      {
        return next(err);
      }

      if (prepareResults)
      {
        res.json(prepareResults(results));
      }
      else
      {
        res.json(results);
      }
    });
  }
};
