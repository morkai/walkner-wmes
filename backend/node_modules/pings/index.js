// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const url = require('url');
const {ObjectId} = require('mongoose').Types;

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  recordInterval: 10000,
  recordLimit: 500
};

exports.models = [
  require('./models/ping')
];

exports.requiredModules = 'mongoose user';

exports.optionalModules = {
  'express': require('./routes')
};

exports.start = (app, module) =>
{
  let queue = [];
  let timer = null;

  module.recordHttpRequest = recordHttpRequest;

  app.broker.subscribe('ping', recordPing);

  app.broker.subscribe('express.beforeRouter').setLimit(1).on('message', (message) =>
  {
    const expressModule = message.module;
    const expressApp = expressModule.app;

    expressApp.use(expressMiddleware);
  });

  function expressMiddleware(req, res, next)
  {
    if (!req.isFrontendRequest)
    {
      module.recordHttpRequest(req);
    }

    next();
  }

  function recordHttpRequest(req, userData)
  {
    const headers = req.headers || {};
    const reqUrl = req._parsedUrl || url.parse(req.url || '/');
    const query = req.query || {};

    Object.keys(query).forEach(k =>
    {
      if (k.startsWith('X-'))
      {
        headers[k.toLowerCase()] = query[k];
      }
    });

    if (query.COMPUTERNAME && !headers['x-wmes-cname'])
    {
      headers['x-wmes-cname'] = query.COMPUTERNAME;
    }

    const user = module.user.createUserInfo(userData || req.session && req.session.user, req);

    user.id = (user.id || '').toString();

    recordPing({
      _id: new ObjectId(),
      time: new Date(),
      path: reqUrl.pathname,
      query: reqUrl.query || '',
      headers: req.headers,
      user
    });
  }

  function recordPing(ping)
  {
    if (!ping.time)
    {
      ping.time = new Date();
    }

    queue.push(ping);

    if (queue.length > module.config.recordLimit)
    {
      recordNow();
    }
    else if (!timer)
    {
      timer = setTimeout(recordNow, module.config.recordInterval);
    }
  }

  function recordNow()
  {
    clearTimeout(timer);
    timer = null;

    module.Ping.collection.insertMany(queue, err =>
    {
      if (err)
      {
        module.error(err, 'Failed to record pings.');
      }
    });

    queue = [];
  }
};
