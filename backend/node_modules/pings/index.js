// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const url = require('url');
const _ = require('lodash');
const resolveIpAddress = require('util/resolveIpAddress');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user'
};

exports.models = [
  require('./models/ping')
];

exports.optionalModules = {
  'mongoose user express': require('./routes')
};

exports.start = (app, module) =>
{
  module.recordHttpRequest = recordHttpRequest;

  app.broker.subscribe('ping', recordPing);

  app.broker.subscribe('express.beforeRouter').setLimit(1).on('message', (message) =>
  {
    const expressModule = message.module;
    const expressApp = expressModule.app;

    expressApp.use(expressMiddleware);
  });

  function recordHttpRequest(req)
  {
    if (!req.socket || !req.headers || !req.url)
    {
      return;
    }

    if (!req.query)
    {
      req.query = url.parse(req.url, true).query;
    }

    Object.keys(req.query).forEach(k =>
    {
      if (k.startsWith('X-'))
      {
        req.headers[k.toLowerCase()] = req.query[k];
      }
    });

    recordPing({
      _id: resolveIpAddress(req),
      host: req.query.COMPUTERNAME || req.headers['x-wmes-cname'] || '',
      headers: req.headers,
      url: req.url,
      user: req.session && req.session.user ? req.session.user.login : undefined
    });
  }

  function recordPing(data)
  {
    const mongoose = app[module.config.mongooseId];

    if (!mongoose)
    {
      return;
    }

    const conditions = {
      _id: data._id
    };
    const update = {
      time: new Date()
    };

    ['host', 'user', 'headers', 'url'].forEach((p) =>
    {
      if (!_.isEmpty(data[p]))
      {
        update[p] = data[p];
      }
    });

    module.Ping.updateOne(conditions, {$set: update}, {upsert: true}, (err) =>
    {
      if (err)
      {
        module.error(err, `Failed to record ping`, {conditions, update});
      }
    });
  }

  function expressMiddleware(req, res, next)
  {
    if (!req.isFrontendRequest)
    {
      module.recordHttpRequest(req);
    }

    next();
  }
};
