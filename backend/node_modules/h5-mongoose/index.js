// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const mongoose = require('mongoose');
const expressMiddleware = require('./expressMiddleware');

exports.DEFAULT_CONFIG = {
  maxConnectTries: 10,
  connectAttemptDelay: 500,
  uri: 'mongodb://localhost/test',
  mongoClient: {},
  models: null,
  keepAliveQueryInterval: 30000,
  stopOnConnectError: true
};

exports.onModuleSetUp = (app, {module, setUpModule, setUpAppModule}) =>
{
  if (!setUpAppModule.models || typeof setUpAppModule.models !== 'object')
  {
    return;
  }

  if (!module.modelsToLoad)
  {
    module.modelsToLoad = [];
  }

  module.modelsToLoad.push({
    setUpModule,
    setUpModels: setUpAppModule.models
  });
};

exports.start = (app, module, done) =>
{
  let keepAliveFailed = false;
  let initialized = false;

  module = app[module.name] = Object.assign(mongoose, module);

  module.Promise = global.Promise;

  module.set('objectIdGetter', false);
  module.set('strict', true);

  module.connection.on('connecting', () => module.debug('Connecting...'));
  module.connection.on('connected', () => module.debug('Connected.'));
  module.connection.on('open', () => module.debug('Open.'));
  module.connection.on('reconnected', () => module.debug('Reconnected.'));
  module.connection.on('disconnecting', () => module.warn('Disconnecting...'));
  module.connection.on('disconnected', () => module.warn('Disconnected.'));
  module.connection.on('close', () => module.warn('Closed.'));
  module.connection.on('unauthorized', () => module.warn('Unauthorized.'));
  module.connection.on('error', (err) => module.error(err));

  app.broker.subscribe('app.started', setUpKeepAliveQuery).setLimit(1);

  app.broker.subscribe('express.beforeMiddleware', setUpExpressMiddleware).setLimit(1);

  tryToConnect(0);

  /**
   * @private
   * @param {number} i
   */
  function tryToConnect(i)
  {
    if (module.connection.readyState === mongoose.Connection.STATES.connected
      || module.connection.readyState === mongoose.Connection.STATES.connecting)
    {
      return;
    }

    module.connect(module.config.uri, module.config.mongoClient)
      .then(() => setImmediate(initialize))
      .catch(err =>
      {
        if (i >= module.config.maxConnectTries)
        {
          initialize(err);

          return;
        }

        setTimeout(tryToConnect.bind(null, i + 1), module.config.connectAttemptDelay);
      });
  }

  function initialize(err)
  {
    if (err)
    {
      if (module.config.stopOnConnectError)
      {
        return done(err);
      }

      module.error(err);

      setTimeout(tryToConnect, 10000, 0);
    }

    if (!initialized)
    {
      initialized = true;

      loadModels();
    }
  }

  /**
   * @private
   */
  function loadModels()
  {
    module.debug(`Loading models...`);

    const setUps = new Set();
    const setUpToName = new Map();

    module.modelsToLoad.forEach(({setUpModels}) =>
    {
      (Array.isArray(setUpModels) ? setUpModels : Object.values(setUpModels)).forEach((setUp) => setUps.add(setUp));
    });

    setUps.forEach(({name, setUp}) =>
    {
      setUpToName.set(setUp, name);
      setUp(app, module);
    });

    module.modelsToLoad.forEach(({setUpModule, setUpModels}) =>
    {
      (Array.isArray(setUpModels) ? setUpModels : Object.values(setUpModels)).forEach(({setUp}) =>
      {
        const name = setUpToName.get(setUp);

        setUpModule[name] = module.model(name);
      });
    });

    module.modelsToLoad = [];

    setImmediate(done);
  }

  function setUpKeepAliveQuery()
  {
    if (!module.config.keepAliveQueryInterval)
    {
      return;
    }

    module.connection.db.stats((err, stats) =>
    {
      if (err)
      {
        if (!keepAliveFailed)
        {
          module.error(err, `Keep alive query failed.`);
        }

        keepAliveFailed = true;
      }
      else
      {
        if (keepAliveFailed)
        {
          module.debug(`Kept alive.`, {stats});
        }

        keepAliveFailed = false;
      }

      setTimeout(setUpKeepAliveQuery, module.config.keepAliveQueryInterval);
    });
  }

  function setUpExpressMiddleware(message)
  {
    const expressModule = message.module;
    const expressApp = expressModule.app;

    expressApp.use(expressMiddleware.bind(null, app, module));
  }
};
