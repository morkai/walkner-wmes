// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const mongoose = require('mongoose');
const expressMiddleware = require('./expressMiddleware');

exports.DEFAULT_CONFIG = {
  maxConnectTries: 10,
  connectAttemptDelay: 500,
  uri: 'mongodb://localhost/test',
  mongoClient: {},
  models: null,
  keepAliveQueryInterval: 30000,
  stopOnConnectError: true
};

exports.onModuleSetUp = (app, {module, setUpModule, setUpAppModule}) =>
{
  if (setUpAppModule.models && typeof setUpAppModule.models === 'object')
  {
    if (!module.modelsToLoad)
    {
      module.modelsToLoad = [];
    }

    module.modelsToLoad.push({
      setUpModule,
      setUpModels: setUpAppModule.models
    });
  }

  if (setUpAppModule.modelPlugins && typeof setUpAppModule.modelPlugins === 'object')
  {
    if (!module.modelPlugins)
    {
      module.modelPlugins = [];
    }

    module.modelPlugins.push({
      setUpModule,
      setUpPlugins: setUpAppModule.modelPlugins
    });
  }
};

exports.start = (app, module, done) =>
{
  const noFreeConnectionState = {
    lastMinuteCount: 0,
    totalCount: 0,
    interval: null
  };
  let keepAliveFailed = false;
  let initialized = false;

  module = app[module.name] = Object.assign(mongoose, module);

  module.Promise = global.Promise;

  module.set('objectIdGetter', false);
  module.set('strict', true);
  module.set('debug', false);

  module.connection.on('connecting', () => module.info('Connecting...'));
  module.connection.on('connected', () => module.info('Connected.'));
  module.connection.on('open', onOpen);
  module.connection.on('reconnected', () => module.info('Reconnected.'));
  module.connection.on('disconnecting', () => module.warn('Disconnecting...'));
  module.connection.on('disconnected', () => module.warn('Disconnected.'));
  module.connection.on('close', () => module.warn('Closed.'));
  module.connection.on('unauthorized', () => module.warn('Unauthorized.'));
  module.connection.on('error', (err) => module.error(err));

  app.broker.subscribe('app.started', setUpKeepAliveQuery).setLimit(1);
  app.broker.subscribe('express.beforeMiddleware', setUpExpressMiddleware).setLimit(1);

  tryToConnect(0);

  /**
   * @private
   */
  function onOpen()
  {
    module.info('Open.');

    const {topology} = module.connection.db.s;

    if (!topology || topology.listenerCount('noFreeConnection'))
    {
      return;
    }

    topology.on('noFreeConnection', onNoFreeConnection);

    if (!noFreeConnectionState.interval)
    {
      noFreeConnectionState.interval = setInterval(logNoFreeConnectionCount, 60000);
    }
  }

  /**
   * @private
   * @param {number} i
   */
  function tryToConnect(i)
  {
    if (module.connection.readyState === mongoose.Connection.STATES.connected
      || module.connection.readyState === mongoose.Connection.STATES.connecting)
    {
      return;
    }

    module.connect(module.config.uri, module.config.mongoClient)
      .then(() => setImmediate(initialize))
      .catch(err =>
      {
        if (i >= module.config.maxConnectTries)
        {
          initialize(err);

          return;
        }

        setTimeout(tryToConnect.bind(null, i + 1), module.config.connectAttemptDelay);
      });
  }

  function initialize(err)
  {
    if (err)
    {
      if (module.config.stopOnConnectError)
      {
        return done(err);
      }

      module.error(err);

      setTimeout(tryToConnect, 10000, 0);
    }

    if (!initialized)
    {
      initialized = true;

      loadModels();
    }
  }

  /**
   * @private
   */
  function loadModels()
  {
    module.debug(`Loading models...`);

    if (!module.modelPlugins)
    {
      module.modelPlugins = [];
    }

    if (!module.modelsToLoad)
    {
      module.modelsToLoad = [];
    }

    const nameToPlugins = {
      '*': []
    };

    module.modelPlugins.forEach(({setUpModule, setUpPlugins}) =>
    {
      if (Array.isArray(setUpPlugins))
      {
        setUpPlugins.forEach(setUpPlugin => nameToPlugins['*'].push(setUpPlugin.bind(null, app, setUpModule)));
      }
      else
      {
        Object.keys(setUpPlugins).forEach(schemaName =>
        {
          if (!nameToPlugins[schemaName])
          {
            nameToPlugins[schemaName] = [];
          }

          if (Array.isArray(setUpPlugins[schemaName]))
          {
            setUpPlugins[schemaName].forEach(setUpPlugin =>
            {
              nameToPlugins[schemaName].push(setUpPlugin.bind(null, app, setUpModule));
            });
          }
          else
          {
            nameToPlugins[schemaName].push(setUpPlugins[schemaName].bind(null, app, setUpModule));
          }
        });
      }
    });

    const setUps = new Set();
    const setUpToName = new Map();

    module.modelsToLoad.forEach(({setUpModels}) =>
    {
      (Array.isArray(setUpModels) ? setUpModels : Object.values(setUpModels)).forEach((setUp) => setUps.add(setUp));
    });

    setUps.forEach(({name, setUp}) =>
    {
      setUpToName.set(setUp, name);

      const schema = setUp(app, module);

      if (!schema)
      {
        return;
      }

      nameToPlugins['*'].concat(nameToPlugins[name] || []).forEach(setUpPlugin =>
      {
        setUpPlugin(schema, {name});
      });

      module.model(name, schema);
    });

    module.modelsToLoad.forEach(({setUpModule, setUpModels}) =>
    {
      (Array.isArray(setUpModels) ? setUpModels : Object.values(setUpModels)).forEach(({setUp}) =>
      {
        const name = setUpToName.get(setUp);

        setUpModule[name] = module.model(name);
      });
    });

    module.modelsToLoad = [];

    module.info('Loaded models.', {modelCount: setUps.size});

    setImmediate(done);
  }

  function setUpKeepAliveQuery()
  {
    if (!module.config.keepAliveQueryInterval)
    {
      return;
    }

    if (!module.connection.db)
    {
      return setTimeout(setUpKeepAliveQuery, module.config.keepAliveQueryInterval);
    }

    module.connection.db.stats((err, stats) =>
    {
      if (err)
      {
        if (!keepAliveFailed)
        {
          module.error(err, `Keep alive query failed.`);
        }

        keepAliveFailed = true;
      }
      else
      {
        if (keepAliveFailed)
        {
          module.info(`Kept alive.`, {stats});
        }

        keepAliveFailed = false;
      }

      setTimeout(setUpKeepAliveQuery, module.config.keepAliveQueryInterval);
    });
  }

  function setUpExpressMiddleware(message)
  {
    const expressModule = message.module;
    const expressApp = expressModule.app;

    expressApp.use(expressMiddleware.bind(null, app, module));
  }

  function onNoFreeConnection()
  {
    noFreeConnectionState.totalCount += 1;
    noFreeConnectionState.lastMinuteCount += 1;
  }

  function logNoFreeConnectionCount()
  {
    if (!noFreeConnectionState.lastMinuteCount)
    {
      return;
    }

    module.warn(`No free connections.`, {
      totalCount: noFreeConnectionState.totalCount,
      lastMinuteCount: noFreeConnectionState.lastMinuteCount
    });

    noFreeConnectionState.lastMinuteCount = 0;
  }
};
