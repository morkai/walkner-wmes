// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const os = require('os');
const path = require('path');
const {URL} = require('url');
const fs = require('fs-extra');
const step = require('h5.step');
const request = require('request');
const checkOutputFile = require('./checkOutputFile');

let inProgress = false;

module.exports = (app, sapGui, job, done) =>
{
  if (inProgress)
  {
    return setImmediate(done, app.createError('Job already running.', 'IN_PROGRESS', 400));
  }

  inProgress = true;

  const jobId = job.id;

  step(
    function()
    {
      const req = {
        method: 'GET',
        url: Object.assign(new URL(job.baseUrl), {
          pathname: '/orders;incomplete'
        }).toString(),
        json: true
      };

      request(req, this.next());
    },
    function(err, response, result)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to fetch orders: ${err.message}`,
          'FETCH_ORDERS_FAILURE'
        ));
      }

      if (!result || !Array.isArray(result.orders))
      {
        return this.skip(app.createError(
          `Failed to fetch orders: unexpected response.`,
          'FETCH_ORDERS_FAILURE'
        ));
      }

      const totalCount = result.orders.length;

      if (totalCount === 0)
      {
        sapGui.info(`Orders not found.`, {jobId});

        return this.skip();
      }

      sapGui.info(`Orders found.`, {jobId, totalCount});

      const batches = [];

      while (result.orders.length)
      {
        batches.push(result.orders.splice(0, Number.MAX_SAFE_INTEGER));
      }

      runNextBatch(batches, 0, totalCount, this.next());
    },
    function(err, exitCode, output)
    {
      if (!err)
      {
        sapGui.info(`OK!`, {jobId});
      }

      done(err, exitCode, output);
    }
  );

  function runNextBatch(batches, count, totalCount, done)
  {
    const startTime = Date.now();

    step(
      function()
      {
        const orders = batches.shift();

        count += orders.length;

        sapGui.info(`Batch started...`, {jobId, count, totalCount});

        this.inputDir = os.tmpdir();
        this.inputFile = `WMES_STATUSES_ORDERS_${count}.txt`;
        this.inputPath = path.join(this.inputDir, this.inputFile);

        fs.writeFile(this.inputPath, orders.join('\r\n'), this.next());
      },
      function(err)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to write orders input file: ${err.message}`,
            'INPUT_FILE_FAILURE'
          ));
        }

        const args = [
          '--input-path',
          this.inputDir,
          '--input-file',
          this.inputFile,
          '--output-file',
          Math.floor(Date.now() / 1000) + '@' + (job.outputFile || 'T_DOCS.txt')
        ];

        sapGui.runScript(job, 'T_STATUSES.exe', args, this.next());
      },
      function(err, exitCode, output)
      {
        if (output && output.includes('NO_ORDERS'))
        {
          setImmediate(this.next(), null, 0, output);
        }
        else
        {
          checkOutputFile(this.next(), err, exitCode, output);
        }
      },
      function(err, exitCode, output)
      {
        if (this.inputPath)
        {
          fs.unlink(this.inputPath, () => {});
        }

        if (err)
        {
          return done(err, exitCode, output);
        }

        const duration = (Date.now() - startTime) / 1000;

        sapGui.info(`Batch OK!`, {jobId, count, totalCount, duration});

        if (batches.length)
        {
          setImmediate(runNextBatch, batches, count, totalCount, done);
        }
        else
        {
          done(err, exitCode, output);
        }
      }
    );
  }
};
