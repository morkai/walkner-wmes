// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, sapGui, job, done) =>
{
  const salesOrders = !Array.isArray(job.salesOrders)
    ? []
    : job.salesOrders.filter(v => !!v.no && !!v.item);

  if (salesOrders.length === 0)
  {
    return done(app.createError('No valid sales orders.', 'INPUT', 400));
  }

  const logger = sapGui.logger.create({jobId: job.id});

  step(
    function()
    {
      logger.info('Looking for sales order characteristics...');

      const grouped = {};

      salesOrders.forEach(salesOrder =>
      {
        if (!grouped[salesOrder.no])
        {
          grouped[salesOrder.no] = {};
        }

        grouped[salesOrder.no][salesOrder.item] = 1;
      });

      const args = [];

      Object.keys(grouped).forEach(no =>
      {
        args.push(`${no}/${Object.keys(grouped[no]).join('/')}`);
      });

      sapGui.runScript(job, 'T_DP_CH.exe', args, this.next());
    },
    function(err, exitCode, output)
    {
      if (err)
      {
        return this.skip(err, exitCode, output);
      }

      const data = {};

      let no = null;
      let item = null;

      (output || '').split(/\r\n/).forEach(line =>
      {
        if (line.startsWith('SALES_ORDER_NO='))
        {
          no = line.split('=')[1];
          item = null;

          data[no] = {
            error: '',
            items: {}
          };

          return;
        }

        if (no === null)
        {
          return;
        }

        if (line.startsWith('SALES_ORDER_ITEM='))
        {
          item = line.split('=')[1];

          data[no].items[item] = {
            error: '',
            config: {}
          };

          return;
        }

        if (line.startsWith('ERROR='))
        {
          const error = line.substring('ERROR='.length);

          if (item === null)
          {
            data[no].error = error;
          }
          else
          {
            data[no].items[item].error = error;
          }

          return;
        }

        if (item === null)
        {
          return;
        }

        if (line.startsWith('CONFIG_FOUND='))
        {
          const parts = line.split('=');
          parts.shift();
          const key = parts.shift().replace(/^[A-Z0-9]+_/, '');
          const val = parts.join('=');

          data[no].items[item].config[key] = val;

          return;
        }
      });

      logger.info('Orders found.', {
        orderCount: Object.keys(data).length
      });

      setImmediate(this.next(), null, 0, JSON.stringify(data));
    },
    done
  );
};
