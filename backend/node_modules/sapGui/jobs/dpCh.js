// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, sapGui, job, done) =>
{
  const salesOrders = !Array.isArray(job.salesOrders)
    ? []
    : job.salesOrders.filter(v => !!v.no && !!v.item);

  if (salesOrders.length === 0)
  {
    return done(app.createError('No valid sales orders.', 'INPUT', 400));
  }

  const logger = sapGui.logger.create({jobId: job.id});
  const data = {};

  step(
    function()
    {
      logger.info('Looking for sales order characteristics...');

      const grouped = {};

      salesOrders.forEach(salesOrder =>
      {
        if (!grouped[salesOrder.no])
        {
          grouped[salesOrder.no] = {};
        }

        grouped[salesOrder.no][salesOrder.item] = 1;
      });

      const args = [];

      Object.keys(grouped).forEach(no =>
      {
        args.push(`${no}/${Object.keys(grouped[no]).join('/')}`);
      });

      sapGui.runScript(job, 'T_DP_CH.exe', args, this.next());
    },
    function(err, exitCode, output)
    {
      if (err)
      {
        return this.skip(err, exitCode, output);
      }

      const inquiries = {};

      parseChOutput(output, data, inquiries);

      const inquiryNos = Object.keys(inquiries);

      if (!inquiryNos.length)
      {
        return;
      }

      logger.info('Looking for sales orders of inquiries...');

      const args = [];

      Object.keys(inquiries).forEach(no =>
      {
        args.push(`${no}/${Object.keys(inquiries[no]).join('/')}`);
      });

      sapGui.runScript(job, 'T_DP_INQ.exe', args, this.next());
    },
    function(err, exitCode, output)
    {
      if (err)
      {
        return this.skip(err, exitCode, output);
      }

      if (!output)
      {
        return;
      }

      const inquiries = parseInqOutput(output);
      const salesToInquiry = {};
      const grouped = [];

      Object.keys(inquiries).forEach(no =>
      {
        if (inquiries[no].error)
        {
          data[no].error = inquiries[no].error;

          return;
        }

        Object.keys(inquiries[no].items).forEach(item =>
        {
          const {error, documents} = inquiries[no].items[item];

          if (error)
          {
            data[no].items[item].error = error;

            return;
          }

          const inquiryDoc = `Inquiry ${no.padStart(10, '0')} / ${item}`;
          const salesDocRe = /(Project Order|Free of Charge order) ([0-9]{10}) \/ ([0-9]{1,4})/;
          let inquiryFound = false;

          for (let i = 0; i < documents.length; ++i)
          {
            const doc = documents[i];

            if (doc.startsWith('Inquiry'))
            {
              inquiryFound = doc === inquiryDoc;

              continue;
            }

            if (!inquiryFound)
            {
              continue;
            }

            const matches = doc.match(salesDocRe);

            if (!matches)
            {
              continue;
            }

            const override = {
              salesNo: matches[2].replace(/0+/, ''),
              salesItem: matches[3]
            };

            data[no].items[item].override = override;

            if (!grouped[override.salesNo])
            {
              grouped[override.salesNo] = {};
            }

            grouped[override.salesNo][override.salesItem] = 1;

            salesToInquiry[`${override.salesNo}/${override.salesItem}`] = data[no].items[item];
          }
        });
      });

      const args = [];

      Object.keys(grouped).forEach(no =>
      {
        args.push(`${no}/${Object.keys(grouped[no]).join('/')}`);
      });

      if (!args.length)
      {
        return;
      }

      this.salesToInquiry = salesToInquiry;

      logger.info('Looking for inquiry sales order characteristics...');

      sapGui.runScript(job, 'T_DP_CH.exe', args, this.next());
    },
    function(err, exitCode, output)
    {
      if (err)
      {
        return this.skip(err, exitCode, output);
      }

      const inquiryData = {};

      parseChOutput(output, inquiryData);

      Object.keys(inquiryData).forEach(no =>
      {
        Object.keys(inquiryData[no].items).forEach(item =>
        {
          Object.assign(this.salesToInquiry[`${no}/${item}`], inquiryData[no].items[item]);
        });
      });
    },
    function()
    {
      logger.info('Orders found.', {
        orderCount: Object.keys(data).length
      });

      setImmediate(this.next(), null, 0, JSON.stringify(data));
    },
    done
  );

  function parseChOutput(output, data, inquiries)
  {
    let no = null;
    let item = null;

    (output || '').split(/\r\n/).forEach(line =>
    {
      if (line.startsWith('SALES_ORDER_NO='))
      {
        no = line.split('=')[1];
        item = null;

        data[no] = {
          error: '',
          items: {}
        };

        return;
      }

      if (no === null)
      {
        return;
      }

      if (line.startsWith('SALES_ORDER_ITEM='))
      {
        item = line.split('=')[1];

        data[no].items[item] = {
          error: '',
          config: {}
        };

        return;
      }

      if (line.startsWith('ERROR='))
      {
        const error = line.substring('ERROR='.length);

        if (item === null)
        {
          data[no].error = error;
        }
        else
        {
          if (inquiries && error.includes('Process sales document type ZINI with transaction VA13'))
          {
            if (!inquiries[no])
            {
              inquiries[no] = {};
            }

            inquiries[no][item] = 1;
          }

          data[no].items[item].error = error;
        }

        return;
      }

      if (item === null)
      {
        return;
      }

      if (line.startsWith('CONFIG_FOUND='))
      {
        const parts = line.split('=');
        parts.shift();
        const key = parts.shift().replace(/^[A-Z0-9]+_/, '');
        const val = parts.join('=');

        data[no].items[item].config[key] = val;

        return;
      }
    });
  }

  function parseInqOutput(output)
  {
    const data = {};
    let no = null;
    let item = null;

    (output || '').split(/\r\n/).forEach(line =>
    {
      if (line.startsWith('INQUIRY_NO='))
      {
        no = line.split('=')[1];
        item = null;

        data[no] = {
          error: '',
          items: {}
        };

        return;
      }

      if (no === null)
      {
        return;
      }

      if (line.startsWith('INQUIRY_ITEM='))
      {
        item = line.split('=')[1];

        data[no].items[item] = {
          error: '',
          documents: []
        };

        return;
      }

      if (line.startsWith('ERROR='))
      {
        const error = line.substring('ERROR='.length);

        if (item === null)
        {
          data[no].error = error;
        }
        else
        {
          data[no].items[item].error = error;
        }

        return;
      }

      if (item === null)
      {
        return;
      }

      if (line.startsWith('DOCUMENT='))
      {
        data[no].items[item].documents.push(line.replace('DOCUMENT=', ''));

        return;
      }
    });

    return data;
  }
};
