// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const os = require('os');
const path = require('path');
const fs = require('fs-extra');
const step = require('h5.step');
const parseSapTextTable = require('sap/util/parseSapTextTable');

module.exports = (app, sapGui, job, done) =>
{
  const logger = sapGui.logger.create({jobId: job.id});

  const outputPath = sapGui.config.outputPath;
  const inputPath = os.tmpdir();
  const usedFiles = [];
  const fileUuid = `${Date.now()}@${Math.random()}`;

  step(
    function()
    {
      logger.info('Looking for dummy paints of orders...');

      if (Array.isArray(job.orders) && job.orders.length)
      {
        this.orderFile = `${fileUuid}@WMES_DP_BOM_ORDERS.txt`;

        const orderFile = path.join(inputPath, this.orderFile);

        usedFiles.push(orderFile);

        fs.writeFile(orderFile, job.orders.join('\r\n'), this.parallel());
      }

      if (Array.isArray(job.components) && job.components.length)
      {
        this.componentFile = `${fileUuid}@WMES_DP_BOM_COMPONENTS.txt`;

        const componentFile = path.join(inputPath, this.componentFile);

        usedFiles.push(componentFile);

        fs.writeFile(componentFile, job.components.join('\r\n'), this.parallel());
      }
    },
    function(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      this.outputFile = `${fileUuid}@WMES_DP_BOM_OUTPUT.txt`;

      usedFiles.push(path.join(outputPath, this.outputFile));

      const args = [
        '--output-path', outputPath,
        '--output-file', this.outputFile,
        '--input-path', inputPath
      ];

      if (this.orderFile)
      {
        args.push('--order-file', this.orderFile);
      }

      if (this.componentFile)
      {
        args.push('--component-file', this.componentFile);
      }

      sapGui.runScript(job, 'T_DP_BOM.exe', args, this.next());
    },
    function(err, exitCode, output)
    {
      if (err)
      {
        if (err.message === 'NO_DATA')
        {
          return this.skip(null, 0, '{}');
        }

        return this.skip(err, exitCode, output);
      }

      setImmediate(this.parallel(), null, output);

      fs.readFile(path.join(outputPath, this.outputFile), 'utf8', this.parallel());
    },
    function(err, output, sapTextTable) // eslint-disable-line handle-callback-err
    {
      const data = {};

      parseSapTextTable(sapTextTable || '', {
        columnMatchers: {
          order: /^Order$/,
          component: /^Material$/
        },
        valueParsers: {
          component: input => input.trim().replace(/^0+/, '')
        },
        itemDecorator: obj =>
        {
          data[obj.order] = obj.component;
        }
      });

      logger.info('Components found.', {
        componentCount: Object.keys(data).length
      });

      setImmediate(this.next(), null, 0, JSON.stringify(data));
    },
    function(err, exitCode, output)
    {
      usedFiles.forEach(filePath => fs.unlink(filePath, () => {}));

      done(err, exitCode, output);
    }
  );
};
