// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const os = require('os');
const path = require('path');
const {URL} = require('url');
const fs = require('fs-extra');
const step = require('h5.step');
const request = require('request');
const moment = require('moment');
const checkOutputFile = require('./checkOutputFile');

let inProgress = false;

module.exports = (app, sapGuiModule, job, done) =>
{
  if (inProgress)
  {
    return setImmediate(done, app.createError('Job already running.', 'IN_PROGRESS', 400));
  }

  inProgress = true;

  let emptyDays = 0;
  const nextDate = moment();

  if (nextDate.hours() < 6)
  {
    nextDate.subtract(1, 'days');
  }

  nextDate.startOf('day');

  runNext((err, exitCode, output) =>
  {
    inProgress = false;

    done(err, exitCode, output);
  });

  function runNext(done)
  {
    const date = nextDate.format('YYYY-MM-DD');

    sapGuiModule.info(`[${job.id}] [${date}] Started...`);

    step(
      function()
      {
        const req = {
          method: 'GET',
          url: Object.assign(new URL(job.baseUrl), {
            pathname: '/orderDocuments;import-orders',
            search: `date=${date}`
          }).toString(),
          json: true
        };

        request(req, this.next());
      },
      function(err, response, result)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to fetch orders for ${date}: ${err.message}`,
            'FETCH_ORDERS_FAILURE'
          ));
        }

        if (!result || !Array.isArray(result.orders))
        {
          return this.skip(app.createError(
            `Failed to fetch orders for ${date}: unexpected response.`,
            'FETCH_ORDERS_FAILURE'
          ));
        }

        if (result.orders.length === 0)
        {
          emptyDays += 1;

          return this.skip();
        }

        emptyDays = 0;

        sapGuiModule.info(`[${job.id}] [${date}] Found ${result.orders.length} orders`);

        this.inputDir = os.tmpdir();
        this.inputFile = `WMES_DOCS_ORDERS_${date}.txt`;
        this.inputPath = path.join(this.inputDir, this.inputFile);

        fs.writeFile(this.inputPath, result.orders.join('\r\n'), this.next());
      },
      function(err)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to write orders input file for ${date}: ${err.message}`,
            'INPUT_FILE_FAILURE'
          ));
        }

        const args = [
          '--input-path',
          this.inputDir,
          '--input-file',
          this.inputFile,
          '--output-file',
          Math.floor(Date.now() / 1000) + '@' + (job.outputFile || 'T_DOCS.txt')
        ];

        sapGuiModule.runScript(job, 'T_DOCS.exe', args, checkOutputFile.bind(null, this.next()));
      },
      function(err, exitCode, output)
      {
        if (this.inputPath)
        {
          fs.unlink(this.inputPath, () => {});
        }

        if (err)
        {
          sapGuiModule.error(`[${job.id}] [${date}] ${err.message}`);

          return done(err, exitCode, output);
        }

        sapGuiModule.info(`[${job.id}] [${date}] OK!`);

        if (emptyDays === 5)
        {
          done(err, exitCode, output);
        }
        else
        {
          nextDate.add(1, 'days');

          setImmediate(runNext, done);
        }
      }
    );
  }
};
