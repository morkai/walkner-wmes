// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const os = require('os');
const path = require('path');
const {URL} = require('url');
const fs = require('fs-extra');
const step = require('h5.step');
const request = require('request');
const checkOutputFile = require('./checkOutputFile');

let inProgress = false;

module.exports = (app, sapGui, job, done) =>
{
  if (inProgress)
  {
    return setImmediate(done, app.createError('Job already running.', 'IN_PROGRESS', 400));
  }

  inProgress = true;

  const nextDate = [];
  const jobId = job.id;

  step(
    function()
    {
      const req = {
        method: 'GET',
        url: Object.assign(new URL(job.baseUrl), {
          pathname: '/orderDocuments;resolve-import-dates'
        }).toString(),
        json: true
      };

      request(req, this.next());
    },
    function(err, response, result)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to fetch dates: ${err.message}`,
          'FETCH_DATES_FAILURE'
        ));
      }

      if (!result || !Array.isArray(result.dates))
      {
        return this.skip(app.createError(
          `Failed to fetch dates: unexpected response.`,
          'FETCH_DATES_FAILURE'
        ));
      }

      if (result.dates.length)
      {
        sapGui.info(`Dates found.`, {jobId, dates: result.dates});

        result.dates.slice(0, 4).forEach(date => nextDate.push(date));
      }
      else
      {
        sapGui.info(`Dates not found.`, {jobId, dates: result.dates});
      }

      runNext(this.next());
    },
    function(err, exitCode, output)
    {
      inProgress = false;

      done(err, exitCode, output);
    }
  );

  function runNext(done)
  {
    const date = nextDate.shift();

    if (!date)
    {
      sapGui.info(`Completed.`, {jobId});

      return done();
    }

    sapGui.info(`Started...`, {jobId, date});

    step(
      function()
      {
        const req = {
          method: 'GET',
          url: Object.assign(new URL(job.baseUrl), {
            pathname: '/orderDocuments;import-orders',
            search: `date=${date}`
          }).toString(),
          json: true
        };

        request(req, this.next());
      },
      function(err, response, result)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to fetch orders for ${date}: ${err.message}`,
            'FETCH_ORDERS_FAILURE'
          ));
        }

        if (!result || !Array.isArray(result.orders))
        {
          return this.skip(app.createError(
            `Failed to fetch orders for ${date}: unexpected response.`,
            'FETCH_ORDERS_FAILURE'
          ));
        }

        const totalCount = result.orders.length;

        if (totalCount === 0)
        {
          sapGui.info(`Orders not found.`, {jobId, date});

          return this.skip();
        }

        sapGui.info(`Orders found.`, {jobId, date, totalCount});

        const batches = [];

        while (result.orders.length)
        {
          batches.push(result.orders.splice(0, 100));
        }

        runNextBatch(date, batches, 0, totalCount, this.next());
      },
      function(err, exitCode, output)
      {
        if (err)
        {
          return done(err, exitCode, output);
        }

        sapGui.info(`OK!`, {jobId, date});

        setImmediate(runNext, done);
      }
    );
  }

  function runNextBatch(date, batches, count, totalCount, done)
  {
    const startTime = Date.now();

    step(
      function()
      {
        const orders = batches.shift();

        count += orders.length;

        sapGui.info(`Batch started...`, {jobId, date, count, totalCount});

        this.inputDir = os.tmpdir();
        this.inputFile = `WMES_DOCS_ORDERS_${date}_${count}.txt`;
        this.inputPath = path.join(this.inputDir, this.inputFile);

        fs.writeFile(this.inputPath, orders.join('\r\n'), this.next());
      },
      function(err)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to write orders input file for ${date}: ${err.message}`,
            'INPUT_FILE_FAILURE'
          ));
        }

        const args = [
          '--input-path',
          this.inputDir,
          '--input-file',
          this.inputFile,
          '--output-file',
          Math.floor(Date.now() / 1000) + '@' + (job.outputFile || 'T_DOCS.txt')
        ];

        sapGui.runScript(job, 'T_DOCS.exe', args, this.next());
      },
      function(err, exitCode, output)
      {
        if (output && output.includes('NO_DOCS_FOR_ORDERS'))
        {
          setImmediate(this.next(), null, 0, output);
        }
        else
        {
          checkOutputFile(this.next(), err, exitCode, output);
        }
      },
      function(err, exitCode, output)
      {
        const duration = (Date.now() - startTime) / 1000;

        if (this.inputPath)
        {
          fs.unlink(this.inputPath, () => {});
        }

        if (err)
        {
          if (err.code === 'MISSING_OUTPUT_FILE')
          {
            err = null;

            sapGui.warn('Batch NOK: missing output file.', {jobId, date, count, totalCount, duration});
          }
          else
          {
            return done(err, exitCode, output);
          }
        }
        else
        {
          sapGui.info(`Batch OK!`, {jobId, date, count, totalCount, duration});
        }

        if (batches.length)
        {
          setImmediate(runNextBatch, date, batches, count, totalCount, done);
        }
        else
        {
          done(err, exitCode, output);
        }
      }
    );
  }
};
