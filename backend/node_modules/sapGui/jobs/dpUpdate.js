// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const os = require('os');
const path = require('path');
const fs = require('fs');
const step = require('h5.step');

module.exports = (app, sapGui, job, done) =>
{
  const items = !Array.isArray(job.items)
    ? []
    : job.items.filter(item =>
      /^[0-9]{9}$/.test(item.orderNo)
      && /^[0-9]{12}$/.test(item.searchComponent)
      && /^[0-9]{12}$/.test(item.replaceComponent)
    );

  if (items.length === 0)
  {
    return done(app.createError('No valid items.', 'INPUT', 400));
  }

  const logger = sapGui.logger.create({jobId: job.id});

  step(
    function()
    {
      if (items.length > 20)
      {
        this.inputFile = path.join(os.tmpdir(), `WMES_DP_UPDATE_${Date.now()}_${Math.random()}.txt`);

        const input = items
          .map(item => `${item.orderNo}/${item.searchComponent}/${item.replaceComponent}`)
          .join('\r\n');

        fs.writeFile(this.inputFile, input, this.next());
      }
    },
    function(err)
    {
      if (err)
      {
        return this.skip(app.createError(`Failed to create the input file: ${err.message}`, 'FS', 500));
      }

      logger.info('Updating dummy components...');

      const args = [];

      if (job.phased)
      {
        args.push('--phased');
      }

      if (job.verify)
      {
        args.push('--verify');
      }

      if (this.inputFile)
      {
        args.push('--input-file', this.inputFile);
      }
      else
      {
        items.forEach(item =>
        {
          args.push(`${item.orderNo}/${item.searchComponent}/${item.replaceComponent}`);
        });
      }

      sapGui.runScript(job, 'T_DP_UPDATE.exe', args, this.next());
    },
    function(err, exitCode, output)
    {
      if (err)
      {
        return this.skip(err, exitCode, output);
      }

      const items = [];
      let item = null;

      (output || '').split(/\r\n/).forEach(line =>
      {
        const matches = line.match(/^([A-Z0-9_]+)=(.*?)$/);

        if (!matches)
        {
          return;
        }

        const k = matches[1];
        const v = matches[2];

        if (k === 'ORDER')
        {
          item = {
            orderNo: v,
            searchComponent: null,
            replaceComponent: null,
            changed: false,
            verified: false,
            error: null
          };

          items.push(item);

          return;
        }

        if (!item)
        {
          return;
        }

        switch (k)
        {
          case 'SEARCH_COMPONENT':
            item.searchComponent = v;
            break;

          case 'REPLACE_COMPONENT':
            item.replaceComponent = v;
            break;

          case 'COMPONENT_NOT_SET':
            item.error = v;
            break;

          case 'COMPONENT_SET':
            item.changed = true;
            break;

          case 'VERIFIED':
            item.verified = true;
            break;
        }
      });

      logger.info('Items updated.', {
        itemCount: items.length
      });

      setImmediate(this.next(), null, 0, JSON.stringify(items));
    },
    function(err, exitCode, output)
    {
      if (this.inputFile)
      {
        fs.unlink(this.inputFile, () => {});
      }

      done(err, exitCode, output);
    }
  );
};
