// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const {exec} = require('child_process');
const fs = require('fs');
const path = require('path');
const step = require('h5.step');
const parseOrderZlf1 = require('sapGui/util/parseOrderZlf1');

module.exports = (app, module, job, done) =>
{
  const {OrderZlf1} = module;

  step(
    function()
    {
      module.runScript(job, 'T_ZLF1.exe', [], this.next());
    },
    function(err, exitCode, output)
    {
      this.err = err;
      this.exitCode = exitCode;
      this.output = output;

      if (err && !output.includes('No order numbers'))
      {
        return this.skip();
      }

      fs.readdir(job.sourceDestination.replace('*', ''), this.next());
    },
    function(err, files)
    {
      if (err)
      {
        return this.skip(app.createError(`Failed to readdir 1: ${err.message}`));
      }

      const orderDatFiles = files.filter((file) => /^[0-9]{9}\.(DAT|TXT)$/i.test(file));
      const sourceDestination = job.sourceDestination.replace('*', '');

      for (let i = 0; i < orderDatFiles.length; ++i)
      {
        fs.readFile(path.join(sourceDestination, orderDatFiles[i]), 'utf8', this.group());
        OrderZlf1.loadOrderDatFile(path.join(sourceDestination, orderDatFiles[i]), this.group());
      }
    },
    function(err, orderFileContents)
    {
      if (err)
      {
        return this.skip(app.createError(`Failed to parse orders DAT files: ${err.message}`));
      }

      const filePath = path.join(job.outputPath, Math.floor(Date.now() / 1000) + '@' + job.outputFile);
      const fileContents = JSON.stringify((orderFileContents || []).map(f => parseOrderZlf1(f)));

      fs.writeFile(filePath, fileContents, this.next());
    },
    function(err)
    {
      if (err)
      {
        return this.skip(app.createError(`Failed to write orders JSON file: ${err.message}`));
      }

      exec(`MOVE /Y "${job.sourceDestination}" "${job.targetDestination}"`, this.next());
    },
    function(err, stdout, stderr)
    {
      if (err)
      {
        this.output += `\r\nMOVE (stdout):\r\n${stdout}\r\nMOVE (stderr):\r\n${stderr}`;

        return this.skip(err);
      }

      fs.readdir(job.sourceDestination.replace('*', ''), this.next());
    },
    function(err, files)
    {
      if (err)
      {
        return this.skip(app.createError(`Failed to readdir 2: ${err.message}`));
      }

      if (files.length !== 0)
      {
        return this.skip(app.createError(`${files.length} ZLF1 files still remaining in the source dir!`));
      }
    },
    function(err, output)
    {
      done(err || this.err, this.exitCode || 0, output || this.output);
    }
  );
};
