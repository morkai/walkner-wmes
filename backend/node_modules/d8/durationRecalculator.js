// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const later = require('later');

module.exports = (app, module) =>
{
  const {D8Entry} = module;
  const logger = module.logger.create({
    submodule: 'durationRecalculator'
  });

  let inProgress = false;

  app.broker.subscribe('app.started', recalcDurations).setLimit(1);

  later.setInterval(recalcDurations, later.parse.text('at 00:02 am'));

  module.recalcDurations = recalcDurations;

  function recalcDurations(all)
  {
    if (inProgress)
    {
      return;
    }

    const startedAt = new Date();

    logger.info(`Started...`);

    inProgress = true;

    const conditions = {
      status: 'open'
    };
    const fields = {
      rid: 1,
      crsRegisterDate: 1,
      createdAt: 1,
      'strips.date': 1,
      duration: 1
    };

    if (all === true)
    {
      delete conditions.status;
    }

    const stream = D8Entry.find(conditions, fields).lean().cursor();

    stream.on('error', function(err)
    {
      inProgress = false;

      logger.error(err, `Failed to recalc.`);
    });

    stream.on('data', function(doc)
    {
      recalcNext(doc, startedAt);
    });

    stream.on('end', function()
    {
      inProgress = false;

      logger.info(`Done.`, {duration: Date.now() - startedAt});
    });
  }

  function recalcNext(doc, startedAt)
  {
    const newDuration = D8Entry.recalcDuration(doc, startedAt);

    if (newDuration === doc.duration)
    {
      return;
    }

    D8Entry.updateOne({_id: doc._id}, {$set: {duration: newDuration}}, function(err)
    {
      if (err)
      {
        logger.error(err, `Failed to recalc.`, {rid: doc.rid});
      }
    });
  }
};
