// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const updateOrderRoute = require('./updateOrder');
const exportOrdersRoute = require('./exportOrders');

module.exports = (app, module) =>
{
  const {
    updater,
    settings,
    express,
    user,
    DrillingEvent,
    DrillingOrder
  } = module;

  const canView = user.auth('LOCAL', 'DRILLING:VIEW', 'PLANNING:VIEW', 'PAINT_SHOP:VIEW');
  const canUpdate = user.auth('LOCAL', 'DRILLING:DRILLER', 'DRILLING:MANAGE');
  const canManage = user.auth('DRILLING:MANAGE');

  // Apps
  ['drilling'].forEach(appId =>
  {
    express.get(`/${appId}`, canView, (req, res) =>
    {
      res.format({
        'text/html': () =>
        {
          res.render('index', updater.getAppTemplateData(appId, req));
        }
      });
    });
  });

  // Settings
  express.get(
    '/drilling/settings',
    canView,
    settings.browseRoute('drilling')
  );

  express.put('/drilling/settings/:id', canManage, settings.updateRoute);

  // Queues
  express.post('/drilling/:id;generate', canManage, generateRoute);

  // Events
  express.get(
    '/drilling/events',
    canView,
    express.crud.browseRoute.bind(null, app, DrillingEvent)
  );

  // Orders
  express.get(
    '/drilling/orders',
    canView,
    prepareCurrentDate,
    express.crud.browseRoute.bind(null, app, DrillingOrder)
  );

  express.get(
    '/drilling/orders;export.:format?',
    canView,
    exportOrdersRoute.bind(null, app, module)
  );

  express.get('/drilling/orders/:id', canView, express.crud.readRoute.bind(null, app, DrillingOrder));

  express.patch('/drilling/orders/:id', canUpdate, updateOrderRoute.bind(null, app, module));

  function prepareCurrentDate(req, res, next)
  {
    req.rql.selector.args.forEach(term =>
    {
      if (term.name !== 'eq' || term.args[0] !== 'date')
      {
        return;
      }

      const date = term.args[1];

      if (date === 'current')
      {
        const m = moment();

        if (m.hours() < 17)
        {
          m.startOf('day').subtract(1, 'days');
        }
        else
        {
          m.startOf('day').add(1, 'days');
        }

        term.args[1] = moment.utc(m.format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate();
      }
      else if (/^[0-9]+-[0-9]+-[0-9]+$/.test(date))
      {
        term.args[1] = moment.utc(date, 'YYYY-MM-DD').toDate();
      }
    });

    next();
  }

  function generateRoute(req, res)
  {
    app.broker.publish('drilling.generator.requested', {
      date: req.params.id
    });

    res.sendStatus(204);
  }
};
