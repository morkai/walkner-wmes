// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {ProdShiftOrder, Plan} = module;

  const mrp = typeof req.query.mrp === 'string' && /^[A-Za-z0-9]{1,10}$/.test(req.query.mrp)
    ? req.query.mrp
    : null;

  step(
    function()
    {
      const orders = [];
      let termPresent = false;

      req.rql.selector.args.forEach(term =>
      {
        if (term.name === 'eq' && term.args[0] === 'orders')
        {
          termPresent = true;

          if (/^[0-9]+$/.test(term.args[1]))
          {
            orders.push({_id: String(term.args[1])});
          }
        }
        else if (term.name === 'in' && term.args[0] === 'orders' && Array.isArray(term.args[1]))
        {
          termPresent = true;

          term.args[1].forEach(orderNo =>
          {
            if (/^[0-9]+$/.test(orderNo))
            {
              orders.push({_id: String(orderNo)});
            }
          });
        }
      });

      if (termPresent)
      {
        if (orders.length)
        {
          setImmediate(this.next(), null, {orders});
        }
        else
        {
          this.skip(null, []);
        }
      }
      else
      {
        Plan
          .findById(req.params.id)
          .select({'orders._id': 1})
          .lean()
          .exec(this.next());
      }
    },
    function(err, plan)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!plan)
      {
        return this.skip(null, []);
      }

      const orders = plan.orders.map(o => o._id);
      const conditions = {
        orderId: {$in: orders},
        mechOrder: false
      };

      if (mrp)
      {
        conditions['orderData.mrp'] = mrp;
      }

      ProdShiftOrder
        .find(conditions)
        .select({
          prodLine: 1,
          orderId: 1,
          operationNo: 1,
          quantityDone: 1,
          startedAt: 1,
          finishedAt: 1,
          shift: 1
        })
        .sort({startedAt: 1})
        .lean()
        .hint({orderId: 1})
        .exec(this.next());
    },
    function(err, shiftOrders)
    {
      if (err)
      {
        return next(err);
      }

      res.json({
        totalCount: shiftOrders.length,
        collection: shiftOrders
      });
    }
  );
};
