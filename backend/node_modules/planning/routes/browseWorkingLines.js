// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');

module.exports = async (app, {Plan}, req, res, next) =>
{
  try
  {
    const planDate = moment.utc(req.params.id, 'YYYY-MM-DD').toDate();
    const [nextPlans, prevPlans] = await Promise.all([
      Plan
        .find({
          _id: {$gt: planDate},
          'stats.quantity': {$gt: 0}
        })
        .select({
          _id: 0,
          'lines._id': 1,
          'lines.shiftData.startAt': 1
        })
        .sort({_id: 1})
        .limit(5)
        .lean()
        .exec(),
      Plan
        .find({
          _id: {$lt: planDate},
          'stats.quantity': {$gt: 0}
        })
        .select({
          _id: 0,
          'lines._id': 1,
          'lines.shiftData.finishAt': 1
        })
        .sort({_id: -1})
        .limit(5)
        .lean()
        .exec()
    ]);

    const workingLines = new Map();

    for (const plan of prevPlans)
    {
      for (const line of plan.lines)
      {
        const workingLine = getWorkingLine(workingLines, line._id);
        const finishAt = line.shiftData[0].finishAt;

        if (!workingLine.prevAt && finishAt)
        {
          workingLine.prevAt = finishAt.getTime();
        }
      }
    }

    for (const plan of nextPlans)
    {
      for (const line of plan.lines)
      {
        const workingLine = getWorkingLine(workingLines, line._id);
        const startAt = line.shiftData[0].startAt;

        if (!workingLine.nextAt && startAt)
        {
          workingLine.nextAt = startAt.getTime();
        }
      }
    }

    res.json({
      totalCount: workingLines.size,
      collection: Array.from(workingLines.values())
    });
  }
  catch (err)
  {
    next(err);
  }

  function getWorkingLine(workingLines, id)
  {
    if (workingLines.has(id))
    {
      return workingLines.get(id);
    }

    const workingLine = {
      _id: id,
      prevAt: 0,
      nextAt: 0
    };

    workingLines.set(id, workingLine);

    return workingLine;
  }
};
