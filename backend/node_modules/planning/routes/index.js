// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const readPlanRoute = require('./readPlan');
const searchPlanOrderRoute = require('./searchPlanOrder');
const addPlanOrdersRoute = require('./addPlanOrders');
const addPlanOrderRoute = require('./addPlanOrder');
const editPlanOrderRoute = require('./editPlanOrder');
const removePlanOrderRoute = require('./removePlanOrder');
const editPlanLineRoute = require('./editPlanLine');
const browseSapOrdersRoute = require('./browseSapOrders');
const browseShiftOrdersRoute = require('./browseShiftOrders');
const browsePlanOrdersRoute = require('./browsePlanOrders');
const browseLateOrdersRoute = require('./browseLateOrders');
const browseWorkingLinesRoute = require('./browseWorkingLines');
const editSettingsRoute = require('./editSettings');
const editWhOrderStatusRoute = require('./editWhOrderStatus');
const executionReportRoute = require('./executionReport');
const transportReportRoute = require('./transportReport');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    settings,
    Component,
    Plan,
    PlanSettings,
    PlanChange,
    PlanOrderGroup,
    WhOrderStatus
  } = module;

  const canView = user.auth('LOCAL', 'PLANNING:VIEW', 'WH:VIEW');
  const canManage = user.auth('PLANNING:MANAGE', 'PLANNING:PLANNER');

  express.get('/planning/plans', canView, express.crud.browseRoute.bind(null, app, Plan));
  express.post('/planning/plans/:id;generate', canManage, generatePlanRoute);
  express.get('/planning/plans/:id', canView, readPlanRoute.bind(null, app, module));

  express.post('/planning/plans/:plan/orders', canManage, addPlanOrdersRoute.bind(null, app, module));
  express.get('/planning/plans/:plan/orders/:order', canManage, searchPlanOrderRoute.bind(null, app, module));
  express.post('/planning/plans/:plan/orders/:order', canManage, addPlanOrderRoute.bind(null, app, module));
  express.patch('/planning/plans/:plan/orders/:order', canManage, editPlanOrderRoute.bind(null, app, module));
  express.delete('/planning/plans/:plan/orders/:order', canManage, removePlanOrderRoute.bind(null, app, module));

  express.patch('/planning/plans/:plan/lines/:line', canManage, editPlanLineRoute.bind(null, app, module));

  express.get('/planning/sapOrders/:id', canView, browseSapOrdersRoute.bind(null, app, module));
  express.get('/planning/shiftOrders/:id', canView, browseShiftOrdersRoute.bind(null, app, module));
  express.get('/planning/planOrders/:id', canView, browsePlanOrdersRoute.bind(null, app, module));
  express.get('/planning/lateOrders/:id', canView, browseLateOrdersRoute.bind(null, app, module));
  express.get('/planning/workingLines/:id', canView, browseWorkingLinesRoute.bind(null, app, module));

  express.get('/planning/settings', canView, browseSettingsRoute);
  express.get('/planning/settings/:id', canView, beforeSettingsRead, express.crud.readRoute.bind(null, app, {
    model: PlanSettings,
    prepareResult: getGlobalSettings
  }));
  express.put('/planning/settings/:id', canManage, editSettingsRoute.bind(null, app, module));

  express.get('/planning/changes', canView, express.crud.browseRoute.bind(null, app, PlanChange));
  express.get('/planning/changes/:id', canView, express.crud.readRoute.bind(null, app, PlanChange));

  express.get(
    '/planning/whOrderStatuses',
    canView,
    express.crud.browseRoute.bind(null, app, WhOrderStatus)
  );
  express.post(
    '/planning/whOrderStatuses',
    user.auth('PLANNING:WHMAN'),
    editWhOrderStatusRoute.bind(null, app, module)
  );

  const canViewGroups = user.auth('LOCAL', 'PLANNING:VIEW', 'WH:VIEW', 'FN:process-engineer');
  const canManageGroups = user.auth('PLANNING:MANAGE', 'FN:process-engineer');

  express.get(
    '/planning/orderGroups',
    canViewGroups,
    prepareSearchFilter,
    express.crud.browseRoute.bind(null, app, PlanOrderGroup)
  );
  express.post(
    '/planning/orderGroups',
    canManageGroups,
    prepareOrderGroupNames,
    express.crud.addRoute.bind(null, app, PlanOrderGroup)
  );
  express.get(
    '/planning/orderGroups/:id',
    canViewGroups,
    express.crud.readRoute.bind(null, app, PlanOrderGroup)
  );
  express.put(
    '/planning/orderGroups/:id',
    canManageGroups,
    prepareOrderGroupNames,
    express.crud.editRoute.bind(null, app, PlanOrderGroup)
  );
  express.delete(
    '/planning/orderGroups/:id',
    canManageGroups,
    restrictSpecialOrderGroup,
    express.crud.deleteRoute.bind(null, app, PlanOrderGroup)
  );

  express.get(
    '/planning/reports/execution',
    canView,
    executionReportRoute.bind(null, app, module)
  );
  express.get(
    '/planning/reports/transport',
    canView,
    transportReportRoute.bind(null, app, module)
  );

  function generatePlanRoute(req, res)
  {
    app.broker.publish('planning.generator.requested', {
      date: req.params.id
    });

    res.sendStatus(204);
  }

  function browseSettingsRoute(req, res, next)
  {
    if (req.headers['x-global'] === '1')
    {
      req.rql.selector = {
        name: 'regex',
        args: ['_id', '^planning\\.']
      };

      express.crud.browseRoute(app, settings.Setting, req, res, next);
    }
    else
    {
      express.crud.browseRoute(app, PlanSettings, req, res, next);
    }
  }

  function beforeSettingsRead(req, res, next)
  {
    if (req.params.id === '0000-00-00')
    {
      req.model = {
        _id: '0000-00-00'
      };
    }

    return next();
  }

  function getGlobalSettings(planSettings, done)
  {
    settings.findValues('planning.', (err, globalSettings) =>
    {
      if (err)
      {
        return done(err);
      }

      planSettings.global = globalSettings;

      done(null, planSettings);
    });
  }

  function prepareOrderGroupNames(req, res, next)
  {
    const codes = new Set();
    let bom = [];

    if (Array.isArray(req.body.bomInclude))
    {
      bom = req.body.bomInclude;
    }

    if (Array.isArray(req.body.bomExclude))
    {
      bom = bom.concat(req.body.bomExclude);
    }

    bom.forEach(patterns =>
    {
      if (!Array.isArray(patterns))
      {
        return;
      }

      patterns.forEach(pattern =>
      {
        if (/^[0-9]{12}$/.test(pattern))
        {
          codes.add(pattern);
        }
      });
    });

    req.body.names = {};

    if (codes.size === 0)
    {
      return next();
    }

    Component
      .find({_id: {$in: Array.from(codes)}})
      .select({name: 1})
      .lean()
      .exec((err, components) =>
      {
        if (err)
        {
          return next(err);
        }

        components.forEach(component =>
        {
          req.body.names[component._id] = component.name;
        });

        next();
      });
  }

  function restrictSpecialOrderGroup(req, res, next)
  {
    if (req.params.id === '000000000000000000000000')
    {
      return next(app.createError('Special group cannot be deleted.', 'INPUT', 400));
    }

    next();
  }

  function prepareSearchFilter(req, res, next)
  {
    const search = req.query.search;

    if (typeof search !== 'string' || search.length === 0)
    {
      return next();
    }

    req.rql.selector.args.forEach(term =>
    {
      if (term.name === 'eq' && term.args[0] === 'search')
      {
        term.name = 'in';
        term.args = ['$text', [search]];
      }
    });

    next();
  }
};
