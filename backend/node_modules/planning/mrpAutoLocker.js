// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {PlanSettings} = module;

  const locked = new Set();
  const toLock = new Map();
  let timer = null;
  let locking = false;

  app.broker.subscribe('old.wh.newSetStarted', ({date, mrps}) =>
  {
    const time = date.getTime();

    mrps.forEach(mrp =>
    {
      const key = `${time}:${mrp}`;

      if (locked.has(key))
      {
        return;
      }

      locked.add(key);

      if (!toLock.has(time))
      {
        toLock.set(time, []);
      }

      toLock.get(time).push(mrp);
    });

    if (!locking && toLock.size)
    {
      clearImmediate(timer);

      timer = setImmediate(lockMrps);
    }
  });

  function lockMrps()
  {
    locking = true;

    const queue = Array.from(toLock.keys())
      .sort((a, b) => a - b)
      .map(time => ({date: new Date(time), mrps: toLock.get(time)}));

    toLock.clear();

    queue.forEach(async ({date, mrps}) =>
    {
      try
      {
        await lockDateMrps(date, mrps);
      }
      catch (err)
      {
        module.error(err, 'Failed to lock MRPs due to WH pickup.', {date, mrps});
      }
    });
  }

  async function lockDateMrps(date, mrps)
  {
    const planSettings = await PlanSettings.findById(date).lean().exec();

    if (!planSettings)
    {
      return;
    }

    const time = date.getTime();
    let anyLocked = false;

    planSettings.mrps.forEach(mrpSettings =>
    {
      const key = `${time}:${mrpSettings._id}`;

      if (mrpSettings.locked)
      {
        locked.add(key);

        return;
      }

      if (mrps.includes(mrpSettings._id))
      {
        mrpSettings.locked = true;
        anyLocked = true;
      }
    });

    if (!anyLocked)
    {
      return;
    }

    return new Promise((resolve, reject) =>
    {
      PlanSettings.edit(date, {id: null, label: 'System'}, planSettings, (err) =>
      {
        if (err)
        {
          return reject(err);
        }

        resolve();
      });
    });
  }
};
