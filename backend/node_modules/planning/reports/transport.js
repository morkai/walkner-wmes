// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');

exports.id = 'planning/transport';

exports.models = [
  require('planning/models/plan'),
  require('orders/models/order')
];

exports.report = (app, {Plan, Order}, options, done) =>
{
  const results = {
    options,
    data: []
  };

  const usedMrps = new Set(options.mrps);
  const usedLines = new Set(options.lines);

  step(
    function()
    {
      const dateQueue = [];
      const nextMoment = moment.utc(options.fromTime);

      while (nextMoment.valueOf() < options.toTime)
      {
        dateQueue.push(new Date(nextMoment.valueOf()));
        nextMoment.add(1, 'days');
      }

      doNextDate(dateQueue, this.next());
    },
    function(err)
    {
      done(err, results);
    }
  );

  function doNextDate(dateQueue, done)
  {
    const date = dateQueue.shift();

    if (!date)
    {
      return done();
    }

    step(
      function()
      {
        Plan
          .findById(date)
          .select({
            _id: 0,
            'orders._id': 1,
            'orders.mrp': 1,
            'lines._id': 1,
            'lines.orders.orderNo': 1,
            'lines.orders.startAt': 1,
            'lines.orders.quantity': 1
          })
          .lean()
          .exec(this.next());
      },
      function(err, plan)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!plan)
        {
          return this.skip();
        }

        this.planOrders = new Map();
        this.lineOrders = new Map();
        this.usedOrders = new Set();

        plan.orders.forEach(planOrder =>
        {
          if (isUsedMrp(planOrder.mrp))
          {
            this.planOrders.set(planOrder._id, planOrder);
          }
        });

        plan.lines.forEach(planLine =>
        {
          if (!planLine.orders.length)
          {
            return;
          }

          if (!isUsedLine(planLine._id))
          {
            return;
          }

          const lineOrders = [];

          planLine.orders.forEach(lineOrder =>
          {
            if (!this.planOrders.has(lineOrder.orderNo))
            {
              return;
            }

            lineOrders.push(lineOrder);

            this.usedOrders.add(lineOrder.orderNo);
          });

          if (lineOrders.length)
          {
            this.lineOrders.set(planLine._id, lineOrders);
          }
        });

        setImmediate(this.next());
      },
      function()
      {
        const orderIds = Array.from(this.usedOrders);

        Order
          .find({
            _id: {$in: orderIds}
          })
          .select({
            salesOrder: 1,
            salesOrderItem: 1
          })
          .lean()
          .exec(this.next());
      },
      function(err, sapOrders)
      {
        if (err)
        {
          return this.skip(err);
        }

        this.sapOrders = new Map();

        sapOrders.forEach(sapOrder =>
        {
          this.sapOrders.set(sapOrder._id, sapOrder);
        });

        setImmediate(this.next());
      },
      function()
      {
        this.lineOrders.forEach((lineOrders, line) =>
        {
          lineOrders.forEach(lineOrder =>
          {
            const planOrder = this.planOrders.get(lineOrder.orderNo);
            const sapOrder = this.sapOrders.get(lineOrder.orderNo);
            const shiftNo = getShiftNo(lineOrder.startAt);

            results.data.push({
              startAt: lineOrder.startAt,
              shiftNo,
              line,
              mrp: planOrder.mrp,
              orderNo: lineOrder.orderNo,
              salesOrderNo: sapOrder && sapOrder.salesOrder || '',
              salesOrderItem: sapOrder && sapOrder.salesOrderItem || '',
              quantity: lineOrder.quantity
            });
          });
        });
      },
      function(err)
      {
        if (err)
        {
          return done(err);
        }

        setImmediate(doNextDate, dateQueue, done);
      }
    );
  }

  function isUsedMrp(mrp)
  {
    return usedMrps.size === 0 || usedMrps.has(mrp);
  }

  function isUsedLine(line)
  {
    return usedLines.size === 0 || usedLines.has(line);
  }

  function getShiftNo(date)
  {
    const h = date.getUTCHours();

    return h >= 6 && h < 14 ? 1 : h >= 14 && h < 22 ? 2 : 3;
  }
};
