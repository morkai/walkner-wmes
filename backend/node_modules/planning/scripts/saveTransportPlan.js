// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const os = require('os');
const fs = require('fs-extra');
const request = require('request');
const moment = require('moment');
const step = require('h5.step');

const options = {
  host: 'wmes.pl',
  src: os.tmpdir(),
  dst: os.tmpdir(),
  key: ''
};

for (let i = 0; i < process.argv.length; ++i)
{
  const thisArg = process.argv[i];
  const nextArg = process.argv[i + 1];

  if (!thisArg.startsWith('--'))
  {
    continue;
  }

  const option = thisArg.substring(2);

  if (typeof options[option] === 'undefined')
  {
    continue;
  }

  options[option] = nextArg;
  i += 1;
}

const headers = {
  'X-API-KEY': options.key
};

step(
  function()
  {
    const from = moment();

    if (from.hours() < 6)
    {
      from.substract(1, 'days');
    }

    const to = from.startOf('day').clone().add(14, 'days');
    const req = {
      url: `https://${options.host}/reports/businessDays?from=${from.valueOf()}&to=${to.valueOf()}`,
      json: true,
      headers
    };

    request(req, this.next());
  },
  function(err, res)
  {
    if (err)
    {
      return this.skip(err);
    }

    if (!res.body || !Array.isArray(res.body.days))
    {
      return this.skip(new Error(`Invalid /reports/businessDays response.`));
    }

    if (res.body.days.length < 3)
    {
      return this.skip();
    }

    const from = res.body.days[0];
    const to = res.body.days.slice(0, 4).pop();

    const req = {
      url: `https://${options.host}/planning/reports/transport?from=${from}&to=${to}`,
      json: true,
      headers
    };

    request(req, this.next());
  },
  function(err, res)
  {
    if (err)
    {
      return this.skip(err);
    }

    if (!res.body || !Array.isArray(res.body.data))
    {
      return this.skip(new Error(`Invalid /planning/reports/transport response.`));
    }

    const data = res.body.data;
    const columns = {
      date: {
        type: 'date+utc',
        caption: 'Data',
        position: 1
      },
      time: {
        type: 'time+utc',
        caption: 'Czas',
        position: 2
      },
      shiftNo: {
        type: 'integer',
        width: 7,
        caption: 'Zmiana'
      },
      line: {
        type: 'string',
        width: 10,
        caption: 'Linia'
      },
      mrp: {
        type: 'string',
        width: 5,
        caption: 'MRP'
      },
      orderNo: {
        type: 'string',
        width: 10,
        caption: 'Zlecenie produkcyjne'
      },
      salesOrderNo: {
        type: 'string',
        width: 10,
        caption: 'Zlecenie sprzedaży'
      },
      salesOrderItem: {
        type: 'string',
        width: 5,
        caption: 'Poz. zlecenia sprzedaży'
      },
      quantity: {
        type: 'integer',
        width: 10,
        caption: 'Ilość sztuk'
      }
    };

    data.forEach(function(row)
    {
      row.time = Date.parse(row.startAt);
      row.startAt = undefined;
      row.date = moment.utc(row.time);

      if (row.date.hours() < 6)
      {
        row.date.subtract(1, 'days');
      }

      row.date = row.date.startOf('day').valueOf();
    });

    const req = {
      method: 'POST',
      url: `https://${options.host}/xlsxExporter`,
      json: true,
      body: {
        filename: 'WMES_Plan_Transportu',
        sheetName: 'WMES_Plan_Transportu',
        freezeRows: 1,
        columns: columns,
        data: data
      },
      headers
    };

    request(req, this.next());
  },
  function(err, res)
  {
    if (err)
    {
      return this.skip(err);
    }

    if (!res.body || typeof res.body !== 'string')
    {
      return this.skip(new Error(`Invalid /xlsxExporter response.`));
    }

    const req = {
      url: `https://${options.host}/xlsxExporter/${res.body}`,
      json: true,
      headers
    };

    request(req, this.next());
  },
  function(err, res)
  {
    if (err)
    {
      return this.skip(err);
    }

    fs.copyFile(
      path.join(options.src, `WMES_EXPORT__${res.body}.xlsx`),
      path.join(options.dst, 'WMES_Plan_Transportu.xlsx'),
      this.next()
    );
  },
  function(err)
  {
    if (err)
    {
      console.error(`Failed to save the transport plan: ${err.message}`);
      process.exit(1); // eslint-disable-line no-process-exit
    }
    else
    {
      console.log(`Saved the transport plan.`);
    }
  }
);
