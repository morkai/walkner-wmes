// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module) =>
{
  const {express, mongoose, user, settings, ToolCalTool} = module;

  const canView = user.auth('TOOLCAL:VIEW');
  const canManage = user.auth('TOOLCAL:MANAGE');
  const canViewDictionaries = user.auth('TOOLCAL:DICTIONARIES:VIEW');
  const canManageDictionaries = user.auth('TOOLCAL:DICTIONARIES:VIEW');

  express.get('/toolcal/settings', canView, settings.browseRoute('toolcal'));
  express.put('/toolcal/settings/:id', canManageDictionaries, settings.updateRoute);

  express.get('/toolcal/dictionaries', canView, dictionariesRoute);

  express.get('/toolcal/tools', canView, express.crud.browseRoute.bind(null, app, ToolCalTool));
  express.get('/toolcal/tools;rid', canView, findByRidRoute);
  express.get('/toolcal/tools;export.:format?', canView, fetchDictionaries, express.crud.exportRoute.bind(null, app, {
    filename: 'WMES_TOOLCAL_TOOLS',
    freezeRows: 1,
    freezeColumns: 1,
    columns: {
      rid: 6,
      type: 15,
      name: 20,
      sn: 20,
      lastDate: 'date',
      nextDate: 'date',
      interval: 'integer',
      intervalUnit: 5,
      users: 40
    },
    serializeRow: exportTool,
    cleanUp: cleanUpExport,
    model: ToolCalTool
  }));
  express.post('/toolcal/tools', canManage, express.crud.addRoute.bind(null, app, ToolCalTool));
  express.get('/toolcal/tools/:id', canView, express.crud.readRoute.bind(null, app, {
    model: ToolCalTool,
    idProperty: req => /^[0-9]+$/.test(req.params.id) ? 'rid' : '_id'
  }));
  express.put('/toolcal/tools/:id', canView, editRoute);
  express.delete('/toolcal/tools/:id', canManage, express.crud.deleteRoute.bind(null, app, ToolCalTool));

  express.get('/r/toolcal/:filter', redirectRoute);

  _.forEach(module.DICTIONARIES, setUpDictionaryRoutes);

  function setUpDictionaryRoutes(modelName, dictionaryName)
  {
    const Model = mongoose.model(modelName);
    const urlPrefix = `/toolcal/${dictionaryName}`;

    express.get(urlPrefix, canViewDictionaries, express.crud.browseRoute.bind(null, app, Model));
    express.post(urlPrefix, canManageDictionaries, express.crud.addRoute.bind(null, app, Model));
    express.get(`${urlPrefix}/:id`, canViewDictionaries, express.crud.readRoute.bind(null, app, Model));
    express.put(`${urlPrefix}/:id`, canManageDictionaries, express.crud.editRoute.bind(null, app, Model));
    express.delete(`${urlPrefix}/:id`, canManageDictionaries, express.crud.deleteRoute.bind(null, app, Model));
  }

  function dictionariesRoute(req, res, next)
  {
    step(
      function()
      {
        _.forEach(module.DICTIONARIES, modelName => mongoose.model(modelName).find().lean().exec(this.group()));
      },
      function(err, dictionaries)
      {
        if (err)
        {
          return next(err);
        }

        const result = {};

        Object.keys(module.DICTIONARIES).forEach((dictionaryName, i) =>
        {
          result[dictionaryName] = dictionaries[i];
        });

        res.json(result);
      }
    );
  }

  function findByRidRoute(req, res, next)
  {
    const rid = parseInt(req.query.rid, 10);

    if (isNaN(rid) || rid <= 0)
    {
      return res.sendStatus(400);
    }

    ToolCalTool.findOne({rid: rid}, {_id: 1}).lean().exec((err, model) =>
    {
      if (err)
      {
        return next(err);
      }

      if (model)
      {
        return res.json(model._id);
      }

      return res.sendStatus(404);
    });
  }

  function redirectRoute(req, res, next)
  {
    if (/^[0-9]+$/.test(req.params.filter))
    {
      req.params.rid = req.params.filter;

      redirectToDetailsRoute(req, res, next);
    }
    else
    {
      redirectToListRoute(req, res, next);
    }
  }

  function redirectToListRoute(req, res)
  {
    let url = '/#toolcal/tools';

    if (req.params.filter === 'mine')
    {
      url += '?users.id=mine&sort(nextDate)&limit(20)';
    }

    res.redirect(url);
  }

  function redirectToDetailsRoute(req, res, next)
  {
    ToolCalTool.findOne({rid: parseInt(req.params.rid, 10)}, {_id: 1}).lean().exec((err, tool) =>
    {
      if (err)
      {
        return next(err);
      }

      if (tool)
      {
        return res.redirect(`/#toolcal/tools/${tool._id}`);
      }

      res.sendStatus(404);
    });
  }

  function editRoute(req, res, next)
  {
    const userData = req.session.user;
    const userInfo = user.createUserInfo(userData, req);

    userInfo.id = userInfo.id.toString();

    step(
      function()
      {
        ToolCalTool.findById(req.params.id).exec(this.next());
      },
      function(err, tool)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!tool)
        {
          return this.skip(app.createError('NOT_FOUND', 404));
        }

        const manager = user.isAllowedTo(userData, 'TOOLCAL:MANAGE');
        const owner = tool.users.some(u => u.id === userInfo.id);

        let body = {
          comment: req.body.comment
        };

        if (manager || owner)
        {
          body = req.body;
        }

        if (!manager)
        {
          delete body.users;
        }

        if (tool.applyChanges(body, userInfo))
        {
          tool.save(this.next());
        }
      },
      function(err, tool)
      {
        if (err)
        {
          return next(err);
        }

        if (tool)
        {
          res.json(tool);

          app.broker.publish('toolcal.tools.edited', {
            model: tool,
            user: userInfo
          });
        }
        else
        {
          res.json({_id: req.params.id});
        }
      }
    );
  }

  function fetchDictionaries(req, res, next)
  {
    req.dictionaries = {};

    step(
      function()
      {
        _.forEach(module.DICTIONARIES, (modelName) =>
        {
          mongoose.model(modelName).find({}, {name: 1}).lean().exec(this.group());
        });
      },
      function(err, dictionaries)
      {
        if (err)
        {
          return next(err);
        }

        Object.keys(module.DICTIONARIES).forEach((dictionaryName, i) =>
        {
          req.dictionaries[dictionaryName] = {};

          dictionaries[i].forEach((dictionaryModel) =>
          {
            req.dictionaries[dictionaryName][dictionaryModel._id] = dictionaryModel.name;
          });
        });

        setImmediate(next);
      }
    );
  }

  function cleanUpExport(req)
  {
    req.dictionaries = null;
  }

  function exportTool(doc, req)
  {
    return {
      rid: doc.rid,
      type: req.dictionaries.types[doc.type] || doc.type,
      name: doc.name,
      sn: doc.sn,
      lastDate: doc.lastDate,
      nextDate: doc.nextDate,
      interval: doc.interval,
      intervalUnit: doc.intervalUnit,
      users: doc.users.map(u => u.label).join('; ')
    };
  }
};
