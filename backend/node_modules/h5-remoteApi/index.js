// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const request = require('request');

exports.DEFAULT_CONFIG = {
  apiUrl: null,
  apiKey: null
};

exports.start = (app, module) =>
{
  const jars = new Map();

  setInterval(cleanJars, 2 * 3600 * 1000);

  function getJar(id)
  {
    if (!jars.has(id))
    {
      jars.set(id, request.jar());
    }

    const jar = jars.get(id);

    jar.lastUsedAt = Date.now();

    return jar;
  }

  function cleanJars()
  {
    jars.forEach((jar, id) =>
    {
      if (Date.now() - jar.lastUsedAt > 8 * 3600 * 1000)
      {
        jars.delete(id);
      }
    });
  }

  function prepareUrl(reqUrl, prepareApiUrl, req)
  {
    const {pathname, search} = new URL(reqUrl, module.config.apiUrl);
    const apiUrl = new URL(module.config.apiUrl);

    apiUrl.pathname = pathname;
    apiUrl.search = search;

    if (prepareApiUrl)
    {
      prepareApiUrl(apiUrl, req);
    }

    return apiUrl;
  }

  module.request = (options, done) =>
  {
    if (!module.config.apiUrl || !module.config.apiKey)
    {
      return done(app.createError('No API config.', 'CONFIG'));
    }

    const apiReq = {
      headers: {},
      ...options,
      url: prepareUrl(options.url, options.prepareUrl).toString()
    };

    apiReq.headers['x-api-key'] = module.config.apiKey;

    if (options.apiUser)
    {
      apiReq.headers['x-api-user'] = options.apiUser;
    }

    if (!apiReq.jar)
    {
      apiReq.jar = getJar(options.apiUser || 'global');
    }

    request(apiReq, (err, res) => done(err, res));
  };

  module.createRedirect = (options) =>
  {
    if (!options)
    {
      options = {};
    }

    return function redirectToRemoteApi(req, res, next)
    {
      if (!module.config.apiUrl || !module.config.apiKey)
      {
        return next();
      }

      const url = prepareUrl(req.url, options.prepareUrl, req);

      const apiReq = {
        method: req.method,
        url: url.toString(),
        headers: {
          'x-api-key': module.config.apiKey,
          'x-api-user': req.session && req.session.user && req.session.user._id || ''
        },
        encoding: null,
        jar: getJar(req.session.id),
        agentOptions: {
          rejectUnauthorized: false
        }
      };

      ['user-agent', 'accept', 'accept-language', 'content-type'].forEach(header =>
      {
        if (req.headers[header])
        {
          apiReq.headers[header] = req.headers[header];
        }
      });

      if (req.is('application/json'))
      {
        apiReq.body = JSON.stringify(req.body);
      }
      else if (req.is('text/plain'))
      {
        apiReq.body = req.body;
      }

      request(apiReq, (err, apiRes, body) =>
      {
        if (err)
        {
          return next(err);
        }

        if (options.responseHandler && options.responseHandler({url, apiRes, body}, req, res, next))
        {
          return;
        }

        res.status(apiRes.statusCode);
        res.type(apiRes.headers['content-type'] || 'application/json');
        res.end(body);
      });
    };
  };
};
