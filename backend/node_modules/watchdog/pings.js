// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const request = require('request');

module.exports = (app, module) =>
{
  const logger = module.logger.create({submodule: 'ping'});
  const services = {};

  Object.keys(module.config.pings).forEach(serviceId =>
  {
    const config = module.config.pings[serviceId];

    if (!config.secretKey)
    {
      return;
    }

    const service = services[serviceId] = {
      id: serviceId,
      config,
      lastNotifyAt: 0,
      notifyTimer: null
    };

    if (service.config.window > 0)
    {
      if (!setUpReceiver.called)
      {
        setUpReceiver.called = true;
        app.onModuleReady(module.config.expressId, setUpReceiver);
      }

      app.broker.subscribe('app.started', () => scheduleNotify(service, 1)).setLimit(1);
    }

    if (service.config.interval > 0)
    {
      app.broker.subscribe('app.started', () => ping(service)).setLimit(1);
    }
  });

  function ping(service)
  {
    step(
      function sendPingRequestStep()
      {
        request({url: service.config.localUrl, timeout: 5000}, this.next());
      },
      function handlePingResponseStep(err, res, body)
      {
        if (err)
        {
          logger.info(err, `Failed local request.`);

          return this.skip();
        }

        if (res.statusCode === 200 && body === 'pong')
        {
          request({
            url: service.config.remoteUrl,
            timeout: 5000,
            method: 'POST',
            json: {secretKey: service.config.secretKey}
          }, this.next());
        }
        else
        {
          logger.info(`Invalid local response.`, {
            statusCode: res.statusCode,
            body: typeof body === 'string' ? body.substring(0, 100) : '-'
          });
        }
      },
      function(err, res)
      {
        if (err)
        {
          logger.warn(err, `Failed remote request`);
        }
        else if (res && res.statusCode >= 300)
        {
          logger.warn(`Invalid remote response status code`, {statusCode: res.statusCode});
        }

        setTimeout(ping, service.config.interval, service);
      }
    );
  }

  function setUpReceiver()
  {
    app[module.config.expressId].post('/watchdog/ping', (req, res, next) =>
    {
      const service = services[req.body.serviceId];

      if (!service)
      {
        return next(app.createError('Unknown service.', 'INPUT', 400));
      }

      if (req.body.secretKey !== service.config.secretKey)
      {
        return next(app.createError('Invalid secret key.', 'INPUT', 403));
      }

      scheduleNotify(service, 1);

      res.end();
    });
  }

  function scheduleNotify(service, delayMultiplier)
  {
    clearTimeout(service.notifyTimer);
    service.notifyTimer = setTimeout(notify, service.config.window * delayMultiplier, service);
  }

  function notify(service)
  {
    logger.info('Service unavailable: notifying!', {serviceId: service.id});

    const subject = `[${app.options.id}:${module.name}:ping] Service unavailable: ${service.id}`;
    const window = Math.round(service.config.window / 1000);
    const text = [
      `No ping request received in ${window}s: the Internet or the local server is down!`,
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    if (service.mail !== false)
    {
      mail(subject, text);
    }

    if (service.call)
    {
      const now = Date.now();

      if (now - service.lastNotifyAt > 60 * 60 * 1000)
      {
        service.lastNotifyAt = now;

        call(`Service unavailable: ${service.id}`);
      }
    }

    scheduleNotify(service, 30);
  }

  function mail(subject, text)
  {
    const mailSender = app[module.config.mailSenderId];

    if (!mailSender)
    {
      return;
    }

    const to = _.uniq([].concat(
      module.config.recipients,
      module.config.appStartedRecipients
    ));

    if (!to.length)
    {
      return;
    }

    mailSender.send(to, subject, text.join('\r\n'), (err) =>
    {
      if (err)
      {
        logger.error(err, 'Failed to e-mail.', {recipients: to});
      }
      else
      {
        logger.info(`E-mailed!`, {recipients: to});
      }
    });
  }

  function call(text)
  {
    const twilio = app[module.config.twilioId];

    if (!twilio || !module.config.appStartedCallRecipient)
    {
      return;
    }

    const sayOptions = {
      to: module.config.appStartedCallRecipient,
      message: text,
      voice: 'alice',
      language: 'en-US'
    };

    twilio.say(sayOptions, (err) =>
    {
      if (err)
      {
        logger.error(err, 'Failed to call.', {recipients: [sayOptions.to]});
      }
      else
      {
        logger.info(`Called!`, {recipients: [sayOptions.to]});
      }
    });
  }
};
