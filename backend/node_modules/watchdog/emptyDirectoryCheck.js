// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const fs = require('fs');
const format = require('util').format;
const path = require('path');
const _ = require('lodash');

module.exports = function setUpEmptyDirectoryCheck(app, watchdogModule)
{
  const lastResultMap = {};

  app.broker.subscribe('app.started', createDirectoryWatchers).setLimit(1);

  function createDirectoryWatchers()
  {
    _.forEach(watchdogModule.config.emptyDirectories, function(config)
    {
      if (!config.id)
      {
        config.id = path.basename(config.path);
      }

      checkDirectory(config);
    });
  }

  function checkDirectory(config)
  {
    fs.readdir(config.path, function(err, files)
    {
      if (err)
      {
        watchdogModule.error('[emptyDirectory] [%s] Failed to read dir: %s', config.id, err.message);

        return scheduleNextCheck(config);
      }

      if (files.length === 0)
      {
        return scheduleNextCheck(config);
      }

      const lastResult = lastResultMap[config.path];

      if (_.isEmpty(lastResult))
      {
        lastResultMap[config.path] = files[0];

        watchdogModule.info('[emptyDirectory] [%s] Stored: %s', config.id, files[0]);

        return scheduleNextCheck(config);
      }

      lastResultMap[config.path] = '';

      if (_.includes(files, lastResult))
      {
        watchdogModule.info('[emptyDirectory] [%s] Not empty :(', config.id);

        notify(config);

        return scheduleNextCheck(config, true);
      }

      watchdogModule.info('[emptyDirectory] [%s] Changing :)', config.id);

      return scheduleNextCheck(config);
    });
  }

  function scheduleNextCheck(config, notified)
  {
    setTimeout(checkDirectory, notified ? config.notifiedDelay : config.checkInterval, config);
  }

  function notify(config)
  {
    const to = _.uniq([].concat(
      watchdogModule.config.recipients,
      config.emailRecipients || []
    ));

    if (to.length === 0 && _.isEmpty(config.callRecipient))
    {
      return watchdogModule.warn('[emptyDirectory] [%s] Nobody to notify :(', config.id);
    }

    const subject = format('[%s:emptyDirectory] %s', app.options.id, config.id);
    const text = [
      "Directory '" + config.id + "' is not empty!",
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ].join('\r\n');

    const mailSender = app[watchdogModule.config.mailSenderId];

    if (mailSender && to.length)
    {
      mailSender.send(to, subject, text, function(err)
      {
        if (err)
        {
          watchdogModule.error('[emptyDirectory] [%s] Failed to notify [%s]: %s', config.id, to, err.message);
        }
        else
        {
          watchdogModule.info('[emptyDirectory] [%s] Notified [%s].', to, config.id);
        }
      });
    }

    const twilio = app[watchdogModule.config.twilioId];

    if (twilio && config.callRecipient)
    {
      const sayOptions = {
        to: config.callRecipient,
        message: text,
        voice: 'alice',
        language: 'en-US'
      };

      twilio.say(sayOptions, function(err)
      {
        if (err)
        {
          watchdogModule.error(
            '[emptyDirectory] [%s] Failed to notify [%s]: %s', config.id, sayOptions.to, err.message
          );
        }
        else
        {
          watchdogModule.info('[emptyDirectory] [%s] Notified [%s].', config.id, sayOptions.to);
        }
      });
    }
  }
};
