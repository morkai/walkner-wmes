// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const {spawn} = require('child_process');
const _ = require('lodash');

module.exports = (app, module) =>
{
  const config = module.config.dnsCheck;

  if (!config.dnsServer
    || config.dnsServer === '0.0.0.0'
    || !config.domainToCheck
    || !config.addressToExpect)
  {
    return;
  }

  const logger = module.logger.create({submodule: 'dnsCheck'});

  let nokCount = 0;
  let wasOk = true;
  let lastChangeAt = Date.now();

  app.broker.subscribe('app.started', checkDnsStatus).setLimit(1);

  function checkDnsStatus()
  {
    const p = spawn(process.platform === 'win32' ? 'nslookup' : 'host', [config.domainToCheck, config.dnsServer]);
    let output = '';

    p.stderr.setEncoding('utf8');
    p.stdout.setEncoding('utf8');

    p.stderr.on('data', d => output += d);
    p.stdout.on('data', d => output += d);
    p.on('error', err => output += err.message);
    p.on('exit', () =>
    {
      const addresses = [...output.matchAll(/([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})/g)].map(m => m[0]);
      const ok = addresses.includes(config.addressToExpect);

      if (ok)
      {
        handleOk();
      }
      else
      {
        handleNok(output);
      }

      setTimeout(checkDnsStatus, 60000);
    });
  }

  function handleOk()
  {
    if (wasOk)
    {
      return;
    }

    const downAt = lastChangeAt;

    nokCount = 0;
    wasOk = true;
    lastChangeAt = Date.now();

    notifyUp(downAt);
  }

  function handleNok(output)
  {
    nokCount += 1;

    if (!wasOk)
    {
      return;
    }

    if (nokCount === 3)
    {
      const upAt = lastChangeAt;

      wasOk = false;
      lastChangeAt = Date.now();

      notifyDown(upAt, output);
    }
  }

  function notifyUp(downAt)
  {
    const duration = Math.round((Date.now() - downAt) / 60000 * 10) / 10;
    const subject = `[${app.options.id}:${module.name}:dnsCheck] [OK]`
      + ` ${config.dnsServer} resolving ${config.domainToCheck}`;
    const text = [
      `DNS server ${config.dnsServer} successfully resolved ${config.domainToCheck} to ${config.addressToExpect}`
        + ` after being down for ${duration} minutes.`,
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    mail(subject, text);
  }

  function notifyDown(upAt, output)
  {
    const duration = Math.round((Date.now() - upAt) / 60000 * 10) / 10;
    const subject = `[${app.options.id}:${module.name}:dnsCheck] [NOK]`
      + ` ${config.dnsServer} not resolving ${config.domainToCheck}`;
    const text = [
      `DNS server ${config.dnsServer} failed to resolve ${config.domainToCheck} to ${config.addressToExpect}`
      + ` after being up for ${duration} minutes.`,
      '',
      output,
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    mail(subject, text);
  }

  function mail(subject, text)
  {
    const mailSender = app[module.config.mailSenderId];

    if (!mailSender)
    {
      return;
    }

    const recipients = _.uniq([].concat(
      module.config.recipients,
      config.recipients || []
    ));

    if (!recipients.length)
    {
      return;
    }

    mailSender.send(recipients, subject, text.join('\r\n').trim(), (err) =>
    {
      if (err)
      {
        logger.error(err, `Failed to e-mail.`, {subject, recipients});
      }
      else
      {
        logger.info(`E-mailed!`, {subject, recipients});
      }
    });
  }
};
