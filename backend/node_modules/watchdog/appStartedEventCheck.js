// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const {formatDateTime} = require('util/dateFormatter');

module.exports = (app, module) =>
{
  const logger = module.logger.create({submodule: 'appStartedEventCheck'});

  let lastAppStartedCheckAt = -1;
  let consecutiveChecks = 0;

  app.broker.subscribe('app.started', () => setTimeout(checkAppStartedEvents, 10000)).setLimit(1);

  function checkAppStartedEvents()
  {
    const now = Date.now();

    if (lastAppStartedCheckAt === -1)
    {
      lastAppStartedCheckAt = now;
    }

    module.Event.find({type: 'app.started', time: {$gte: lastAppStartedCheckAt}}).lean().exec((err, events) =>
    {
      if (err)
      {
        logger.error(err, `Failed to find app.started events.`);

        return setTimeout(checkAppStartedEvents, 60 * 1000);
      }

      lastAppStartedCheckAt = now;

      if (!events.length)
      {
        consecutiveChecks = 0;

        return setTimeout(checkAppStartedEvents, 60 * 1000);
      }

      notifyAppStartedEvent(events);

      ++consecutiveChecks;

      setTimeout(checkAppStartedEvents, consecutiveChecks * 15 * 60 * 1000);
    });
  }

  function notifyAppStartedEvent(events)
  {
    const to = _.uniq([].concat(
      module.config.recipients,
      module.config.appStartedRecipients
    ));

    if (to.length === 0 && _.isEmpty(module.config.appStartedCallRecipient))
    {
      return module.warn(`Nobody to notify.`);
    }

    const restarts = {};

    events.forEach((event) =>
    {
      const appId = event.data.id;

      if (!restarts[appId])
      {
        restarts[appId] = {
          count: 0,
          time: event.time
        };
      }

      ++restarts[appId].count;
    });

    const subject = `[${app.options.id}:${module.name}:appStarted] ${Object.keys(restarts).join(', ')}`;
    let text = [
      'Detected server restarts:'
    ];

    _.forEach(restarts, (appRestart, appId) =>
    {
      text.push(`  - ${appRestart.count}x ${appId} @ ${formatDateTime(appRestart.time)}`);
    });

    text.push(
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    );

    text = text.join('\r\n');

    const mailSender = app[module.config.mailSenderId];

    if (mailSender && to.length)
    {
      mailSender.send(to, subject, text, (err) =>
      {
        if (err)
        {
          logger.error(err, `Failed to e-mail.`, {recipients: to});
        }
        else
        {
          logger.error(err, `E-mailed!`, {recipients: to});
        }
      });
    }

    const twilio = app[module.config.twilioId];

    if (twilio && module.config.appStartedCallRecipient)
    {
      const sayOptions = {
        to: module.config.appStartedCallRecipient,
        message: text,
        voice: 'alice',
        language: 'en-US'
      };

      twilio.say(sayOptions, function(err)
      {
        if (err)
        {
          logger.error(err, `Failed to call.`, {recipients: [sayOptions.to]});
        }
        else
        {
          logger.info(`Called!`, {recipients: [sayOptions.to]});
        }
      });
    }
  }
};
