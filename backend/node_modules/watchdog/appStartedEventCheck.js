// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const dgram = require('dgram');
const _ = require('lodash');
const {formatDateTime} = require('util/dateFormatter');

module.exports = (app, module) =>
{
  const logger = module.logger.create({submodule: 'appStartedEventCheck'});

  const restarting = {};
  let lastAppStartedCheckAt = -1;
  let consecutiveChecks = 0;

  app.broker.subscribe('app.started', () => setTimeout(checkAppStartedEvents, 60000)).setLimit(1);

  setUpRestartBroadcast();

  function checkAppStartedEvents()
  {
    const now = Date.now();

    if (lastAppStartedCheckAt === -1)
    {
      lastAppStartedCheckAt = now;
    }

    const conditions = {
      type: 'app.started',
      time: {$gte: lastAppStartedCheckAt},
      'data.id': {$nin: Object.keys(restarting)}
    };

    module.Event.find(conditions).lean().exec((err, events) =>
    {
      if (err)
      {
        logger.error(err, `Failed to find app.started events.`);

        return setTimeout(checkAppStartedEvents, 60 * 1000);
      }

      lastAppStartedCheckAt = now;

      if (!events.length)
      {
        consecutiveChecks = 0;

        return setTimeout(checkAppStartedEvents, 60 * 1000);
      }

      notifyAppStartedEvent(events);

      ++consecutiveChecks;

      setTimeout(checkAppStartedEvents, consecutiveChecks * 15 * 60 * 1000);
    });
  }

  function notifyAppStartedEvent(events)
  {
    const to = _.uniq([].concat(
      module.config.recipients,
      module.config.appStartedRecipients
    ));

    if (to.length === 0 && _.isEmpty(module.config.appStartedCallRecipient))
    {
      return logger.warn(`Nobody to notify.`);
    }

    const restarts = {};

    events.forEach((event) =>
    {
      const appId = event.data.id;

      if (!restarts[appId])
      {
        restarts[appId] = {
          count: 0,
          time: event.time
        };
      }

      ++restarts[appId].count;
    });

    const subject = `[${app.options.id}:${module.name}:appStarted] ${Object.keys(restarts).join(', ')}`;
    const email = ['Detected server restarts:'];

    _.forEach(restarts, (appRestart, appId) =>
    {
      email.push(`  - ${appRestart.count}x ${appId} @ ${formatDateTime(appRestart.time)}`);
    });

    email.push(
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    );

    const mailSender = app[module.config.mailSenderId];

    if (mailSender && to.length)
    {
      mailSender.send(to, subject, email.join('\r\n'), (err) =>
      {
        if (err)
        {
          logger.error(err, `Failed to e-mail.`, {recipients: to});
        }
        else
        {
          logger.info(`E-mailed!`, {recipients: to});
        }
      });
    }

    const twilio = app[module.config.twilioId];

    if (twilio && module.config.appStartedCallRecipient)
    {
      const sayOptions = {
        to: module.config.appStartedCallRecipient,
        message: `Detected server restarts: ${Object.keys(restarts).join(', ')}`,
        voice: 'alice',
        language: 'en-US'
      };

      twilio.say(sayOptions, function(err)
      {
        if (err)
        {
          logger.error(err, `Failed to call.`, {recipients: [sayOptions.to]});
        }
        else
        {
          logger.info(`Called!`, {recipients: [sayOptions.to]});
        }
      });
    }
  }

  function setUpRestartBroadcast()
  {
    if (module.config.restartBroadcastPort <= 0)
    {
      return;
    }

    const restartSocket = dgram.createSocket('udp4');

    restartSocket.on('message', data =>
    {
      try
      {
        const message = JSON.parse(data.toString('utf8'));

        if (message.topic === 'updater.restarting')
        {
          logger.info(`Received a restart notification.`, {restart: message.payload});

          const appId = message.payload.appId;

          if (restarting[appId])
          {
            clearTimeout(restarting[appId]);
          }

          restarting[appId] = setTimeout(() => delete restarting[appId], message.payload.delay + 1200000);
        }
      }
      catch (err) {} // eslint-disable-line no-empty
    });

    restartSocket.once('listening', () => restartSocket.setBroadcast(true));
    restartSocket.bind(module.config.restartBroadcastPort, '0.0.0.0');
  }
};
