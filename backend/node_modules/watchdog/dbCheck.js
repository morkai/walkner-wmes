// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const format = require('util').format;
const _ = require('lodash');
const {STATES} = require('mongoose').Connection;

module.exports = (app, module) =>
{
  const {mongoose} = module;
  const logger = module.logger.create({submodule: 'dbCheck'});

  let disconnects = 0;
  let wasDisconnected = mongoose.connection.readyState !== STATES.connected;
  let lastDisconnectCallAt = 0;

  app.broker.subscribe('app.started', checkConnectionStatus).setLimit(1);

  mongoose.connection.on('connected', checkConnectionStatus);
  mongoose.connection.on('disconnected', checkConnectionStatus);

  function checkConnectionStatus()
  {
    if (mongoose.connection.readyState === STATES.connected)
    {
      if (wasDisconnected)
      {
        wasDisconnected = false;

        notifyReconnect();
      }

      return;
    }

    if (disconnects === 0 || !wasDisconnected)
    {
      disconnects += 1;
      wasDisconnected = true;

      notifyDisconnect();
    }
  }

  function notifyReconnect()
  {
    const subject = `[${app.options.id}:${module.name}:dbCheck] Reconnected`;
    const text = [
      'Connection to the database was reestablished successfully!',
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    mail(subject, text);
  }

  function notifyDisconnect()
  {
    const subject = `[${app.options.id}:${module.name}:dbCheck] Disconnected`;
    const text = [
      'Connection to the database was lost!',
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    mail(subject, text);

    sms(`[${app.options.id}:${module.name}] db connection lost`);

    const now = Date.now();

    if (now - lastDisconnectCallAt > 30 * 60 * 1000)
    {
      lastDisconnectCallAt = now;

      call('Lost the database connection!');
    }
  }

  function mail(subject, text)
  {
    const mailSender = app[module.config.mailSenderId];

    if (!mailSender)
    {
      return;
    }

    const to = _.uniq([].concat(
      module.config.recipients,
      module.config.appStartedRecipients
    ));

    if (!to.length)
    {
      return;
    }

    mailSender.send(to, subject, text.join('\r\n'), (err) =>
    {
      if (err)
      {
        logger.error(err, `Failed to e-mail.`, {recipients: to});
      }
      else
      {
        logger.info(`E-mailed!`, {recipients: to});
      }
    });
  }

  function sms(text)
  {
    const smsSender = app[module.config.smsSenderId];

    if (!smsSender || !module.config.appStartedCallRecipient)
    {
      return;
    }

    const to = module.config.appStartedCallRecipient;

    smsSender.send(to, text, function(err)
    {
      if (err)
      {
        logger.error(err, `Failed to text.`, {recipients: [to]});
      }
      else
      {
        logger.info(`Texted!`, {recipients: [to]});
      }
    });
  }

  function call(text)
  {
    const twilio = app[module.config.twilioId];

    if (!twilio || !module.config.appStartedCallRecipient)
    {
      return;
    }

    const sayOptions = {
      to: module.config.appStartedCallRecipient,
      message: text,
      voice: 'alice',
      language: 'en-US'
    };

    twilio.say(sayOptions, function(err)
    {
      if (err)
      {
        logger.error(err, `Failed to call.`, {recipients: [sayOptions.to]});
      }
      else
      {
        logger.info(`Called!`, {recipients: [sayOptions.to]});
      }
    });
  }
};
