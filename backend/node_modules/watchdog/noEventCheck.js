// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const format = require('util').format;
const _ = require('lodash');
const later = require('later');
const moment = require('moment');
const {formatDateTime} = require('util/dateFormatter');

module.exports = function setUpNoEventCheck(app, watchdogModule)
{
  const mailSender = app[watchdogModule.config.mailSenderId];
  const Event = app[watchdogModule.config.mongooseId].model('Event');

  _.forEach(watchdogModule.config.events, function(event)
  {
    _.defaults(event, {
      checkDelay: 30,
      checkWindow: Math.round((event.checkDelay || 30) * 1.5)
    });

    watchdogModule.info(
      '[noEvent] [%s] Setting up... next occurrence at %s!',
      event.id,
      formatDateTime(later.schedule(event.schedule).next(1))
    );

    later.setInterval(scheduleEventCheck.bind(null, event), event.schedule);
  });

  function scheduleEventCheck(event)
  {
    watchdogModule.info('[noEvent] [%s] Scheduling next check to be in %d minutes...', event.id, event.checkDelay);

    setTimeout(checkEvent, event.checkDelay * 60 * 1000, event);
  }

  function checkEvent(event)
  {
    watchdogModule.info('[noEvent] [%s] Checking...', event.id);

    const conditions = _.assign({type: event.type}, event.conditions);

    Event.find(conditions, {time: 1}).sort({time: -1}).limit(1).exec(function(err, docs)
    {
      if (err)
      {
        return watchdogModule.error('[noEvent] [%s] Failed to find events: %s', event.id, err.message);
      }

      const lastOccurrenceAt = docs.length ? docs[0].time : 0;
      const requiredOccurrenceAt = moment().subtract(event.checkWindow, 'minutes').valueOf();

      if (lastOccurrenceAt >= requiredOccurrenceAt)
      {
        return watchdogModule.info("[noEvent] [%s] Event occurred! We're fine, everything is fine :)", event.id);
      }

      watchdogModule.warn('[noEvent] [%s] Event not occurred :( Notifying concerned parties!', event.id);

      notifyNoEvent(event, lastOccurrenceAt);
    });
  }

  function notifyNoEvent(event, lastOccurrenceAt)
  {
    const to = _.uniq([].concat(
      event.recipients || [],
      watchdogModule.config.recipients,
      watchdogModule.config.noEventRecipients
    ));

    if (to.length === 0)
    {
      return watchdogModule.warn('[noEvent] [%s] Nobody to notify :(', event.id);
    }

    const subject = format('[%s:%s:noEvent] %s', app.options.id, watchdogModule.name, event.id);
    const text = [
      format(
        "Expected an event of type '%s' in the last %d minutes, but no event occurred :(",
        event.type,
        event.checkWindow
      ),
      format('The last occurrence was at %s.', formatDateTime(lastOccurrenceAt)),
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    mailSender.send(to, subject, text.join('\r\n'), function(err)
    {
      if (err)
      {
        watchdogModule.error('[noEvent] [%s] Failed to notify [%s]: %s', event.id, to, err.message);
      }
      else
      {
        watchdogModule.info('[noEvent] [%s] Notified: %s', event.id, to);
      }
    });
  }
};
