// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const later = require('later');
const moment = require('moment');
const {formatDateTime} = require('util/dateFormatter');

module.exports = (app, module) =>
{
  const logger = module.logger.create({submodule: 'noEventCheck'});

  module.config.events.forEach((event) =>
  {
    event = {
      checkDelay: 30,
      checkWindow: Math.round((event.checkDelay || 30) * 1.5),
      callRecipient: null,
      callDelay: 0,
      ...event,
      lastCallAt: 0
    };

    logger.info(`Setting up...`, {
      eventId: event.id,
      nextEventAt: later.schedule(event.schedule).next(1)
    });

    later.setInterval(scheduleEventCheck.bind(null, event), event.schedule);
  });

  function scheduleEventCheck(event)
  {
    logger.info(`Scheduling the next check...`, {
      eventId: event.id,
      checkDelay: event.checkDelay
    });

    setTimeout(checkEvent, event.checkDelay * 60 * 1000, event);
  }

  function checkEvent(event)
  {
    logger.info(`Checking...`, {eventId: event.id});

    const conditions = Object.assign({type: event.type}, event.conditions);

    module.Event.find(conditions, {time: 1}).sort({time: -1}).limit(1).exec((err, docs) =>
    {
      if (err)
      {
        return logger.error(err, `Failed to find events.`, {eventId: event.id});
      }

      const lastOccurrenceAt = docs.length ? docs[0].time : 0;
      const requiredOccurrenceAt = moment().subtract(event.checkWindow, 'minutes').valueOf();

      if (lastOccurrenceAt >= requiredOccurrenceAt)
      {
        return logger.info(`Event occurred!`, {eventId: event.id});
      }

      logger.warn(`Event not occurred. Notifying concerned parties!`, {eventId: event.id});

      emailNoEvent(event, lastOccurrenceAt);

      if (event.callDelay > 0 && lastOccurrenceAt < moment().subtract(event.callDelay, 'minutes').valueOf())
      {
        callNoEvent(event, lastOccurrenceAt);
      }
    });
  }

  function emailNoEvent(event, lastOccurrenceAt)
  {
    const mailSender = app[module.config.mailSenderId];

    if (!mailSender)
    {
      return logger.warn(`Not e-mailing: no mailSender module.`, {eventId: event.id});
    }

    const to = _.uniq([].concat(
      event.recipients || [],
      module.config.recipients,
      module.config.noEventRecipients
    ));

    if (to.length === 0)
    {
      return logger.warn(`Nobody to e-mail.`, {eventId: event.id});
    }

    const subject = `[${app.options.id}:${module.name}:noEvent] ${event.id}`;
    const text = [
      `Expected an event of type '${event.type}' in the last ${event.checkWindow} minutes, but no event occurred :(`,
      `The last occurrence was at ${formatDateTime(lastOccurrenceAt)}.`,
      '',
      'This message was generated automatically.',
      'Sincerely, WMES Bot'
    ];

    mailSender.send(to, subject, text.join('\r\n'), (err) =>
    {
      if (err)
      {
        logger.error(err, `Failed to e-mail.`, {eventId: event.id, recipients: to});
      }
      else
      {
        logger.info(`E-mailed!`, {eventId: event.id, recipients: to});
      }
    });
  }

  function callNoEvent(event, lastOccurrenceAt)
  {
    const twilio = app[module.config.twilioId];

    if (!twilio)
    {
      return logger.warn(`Not calling: no twilio module.`, {eventId: event.id});
    }

    if (!event.callRecipient)
    {
      return logger.warn(`Nobody to call.`, {eventId: event.id});
    }

    const lastCallDiff = Date.now() - event.lastCallAt;

    if (lastCallDiff < (3 * event.callDelay * 60 * 1000))
    {
      return logger.info(`Not calling: no spam!`, {eventId: event.id});
    }

    const duration = Math.floor((Date.now() - lastOccurrenceAt) / 3600000 * 10) / 10;
    const sayOptions = {
      to: event.callRecipient,
      message: `Missing event '${event.type}' for ${duration} hours.`,
      voice: 'alice',
      language: 'en-US'
    };

    twilio.say(sayOptions, function(err)
    {
      if (err)
      {
        module.error(err, `Failed to call.`, {eventId: event.id, recipients: [sayOptions.to]});
      }
      else
      {
        module.info(`Called!`, {eventId: event.id, recipients: [sayOptions.to]});
      }

      event.lastCallAt = Date.now();
    });
  }
};
