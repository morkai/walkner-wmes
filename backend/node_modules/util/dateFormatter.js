// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.formatDate = (date) =>
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const month = date.getMonth() + 1;
  const day = date.getDate();
  let result = date.getFullYear() + '-';

  if (month < 10)
  {
    result += '0' + month;
  }
  else
  {
    result += month;
  }

  if (day < 10)
  {
    result += '-0' + day;
  }
  else
  {
    result += '-' + day;
  }

  return result;
};

exports.formatTime = (date, ms) =>
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = date.getSeconds();
  let result = hours < 10 ? ('0' + hours) : hours;

  if (minutes < 10)
  {
    result += ':0' + minutes;
  }
  else
  {
    result += ':' + minutes;
  }

  if (seconds < 10)
  {
    result += ':0' + seconds;
  }
  else
  {
    result += ':' + seconds;
  }

  if (ms)
  {
    result += '.' + date.getMilliseconds().toString().padStart(3, '0');
  }

  return result;
};

exports.formatDateTime = (date, ms) =>
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = date.getSeconds();
  let result = date.getFullYear();

  if (month < 10)
  {
    result += '-0' + month;
  }
  else
  {
    result += '-' + month;
  }

  if (day < 10)
  {
    result += '-0' + day;
  }
  else
  {
    result += '-' + day;
  }

  if (hours < 10)
  {
    result += ' 0' + hours;
  }
  else
  {
    result += ' ' + hours;
  }

  if (minutes < 10)
  {
    result += ':0' + minutes;
  }
  else
  {
    result += ':' + minutes;
  }

  if (seconds < 10)
  {
    result += ':0' + seconds;
  }
  else
  {
    result += ':' + seconds;
  }

  if (ms)
  {
    result += '.' + date.getMilliseconds().toString().padStart(3, '0');
  }

  return result;
};

exports.formatDateUtc = (date) =>
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const month = date.getUTCMonth() + 1;
  const day = date.getUTCDate();
  let result = date.getUTCFullYear() + '-';

  if (month < 10)
  {
    result += '0' + month;
  }
  else
  {
    result += month;
  }

  if (day < 10)
  {
    result += '-0' + day;
  }
  else
  {
    result += '-' + day;
  }

  return result;
};

exports.formatTimeUtc = (date, ms) =>
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const hours = date.getUTCHours();
  const minutes = date.getUTCMinutes();
  const seconds = date.getUTCSeconds();
  let result = hours < 10 ? ('0' + hours) : hours;

  if (minutes < 10)
  {
    result += ':0' + minutes;
  }
  else
  {
    result += ':' + minutes;
  }

  if (seconds < 10)
  {
    result += ':0' + seconds;
  }
  else
  {
    result += ':' + seconds;
  }

  if (ms)
  {
    result += '.' + date.getUTCMilliseconds().toString().padStart(3, '0');
  }

  return result;
};

exports.formatDateTimeUtc = (date, ms) =>
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const month = date.getUTCMonth() + 1;
  const day = date.getUTCDate();
  const hours = date.getUTCHours();
  const minutes = date.getUTCMinutes();
  const seconds = date.getUTCSeconds();
  let result = date.getUTCFullYear();

  if (month < 10)
  {
    result += '-0' + month;
  }
  else
  {
    result += '-' + month;
  }

  if (day < 10)
  {
    result += '-0' + day;
  }
  else
  {
    result += '-' + day;
  }

  if (hours < 10)
  {
    result += ' 0' + hours;
  }
  else
  {
    result += ' ' + hours;
  }

  if (minutes < 10)
  {
    result += ':0' + minutes;
  }
  else
  {
    result += ':' + minutes;
  }

  if (seconds < 10)
  {
    result += ':0' + seconds;
  }
  else
  {
    result += ':' + seconds;
  }

  if (ms)
  {
    result += '.' + date.getUTCMilliseconds().toString().padStart(3, '0');
  }

  return result;
};

exports.formatDuration = (time, compact, ms) =>
{
  if (typeof time !== 'number' || time <= 0 || isNaN(time))
  {
    return compact ? '00:00:00' : '0s';
  }

  time = Math.round(time * 1000) / 1000;

  const hours = Math.floor(time / 3600);
  let str = '';

  if (hours > 0)
  {
    str += compact ? (rpad0(hours, 2) + ':') : (' ' + hours + 'h');
    time %= 3600;
  }
  else if (compact)
  {
    str += '00:';
  }

  const minutes = Math.floor(time / 60);

  if (minutes > 0)
  {
    str += compact ? (rpad0(minutes, 2) + ':') : (' ' + minutes + 'min');
    time %= 60;
  }
  else if (compact)
  {
    str += '00:';
  }

  const seconds = time;

  if (seconds >= 1)
  {
    str += compact
      ? rpad0(Math[ms ? 'floor' : 'round'](seconds), 2)
      : (' ' + Math[ms ? 'floor' : 'round'](seconds) + 's');

    if (ms && seconds % 1 !== 0)
    {
      str += compact
        ? ('.' + rpad0(Math.round(seconds % 1 * 1000), 3))
        : (' ' + (Math.round(seconds % 1 * 1000) + 'ms'));
    }
  }
  else if (seconds > 0 && str === '')
  {
    str += ' ' + (seconds * 1000) + 'ms';
  }
  else if (compact)
  {
    str += '00';
  }

  return compact ? str : str.substr(1);
};

function rpad0(val, length)
{
  val = String(val);

  while (val.length < length)
  {
    val = '0' + val;
  }

  return val;
}
