// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const util = require('../reports/util');

exports.models = [
  require('./models/oshAudit'),
  require('kaizen/models/kaizenSection'),
  require('user/models/user')
];

exports.report = (app, module, options, done) =>
{
  const {
    User,
    KaizenSection,
    OshAudit
  } = module;

  const groupProperty = 'date';
  const results = {
    options,
    categories: {},
    sections: {},
    users: {},
    totals: createGroup(),
    groups: {}
  };

  let minGroupKey = Number.MAX_VALUE;
  let maxGroupKey = Number.MIN_VALUE;

  step(
    async function findSectionsStep()
    {
      const sections = await KaizenSection
        .find({})
        .select({name: 1})
        .lean()
        .exec();

      sections.forEach(s =>
      {
        results.sections[s._id] = s.name;
      });
    },
    function findAuditsStep()
    {
      const conditions = {};
      const fields = {
        status: 1,
        date: 1,
        auditor: 1,
        section: 1,
        results: 1
      };

      if (options.fromTime)
      {
        conditions[groupProperty] = {$gte: new Date(options.fromTime)};
      }

      if (options.toTime)
      {
        if (!conditions[groupProperty])
        {
          conditions[groupProperty] = {};
        }

        conditions[groupProperty].$lt = new Date(options.toTime);
      }

      if (options.sections.length === 1)
      {
        conditions.section = options.sections[0];
      }
      else if (options.sections.length)
      {
        conditions.section = {$in: options.sections};
      }

      if (options.auditor)
      {
        conditions['auditor.id'] = options.auditor;
      }

      const stream = OshAudit.find(conditions).select(fields).lean().cursor();
      const next = _.once(this.next());

      stream.on('error', next);
      stream.on('end', next);
      stream.on('data', handleAudit);
    },
    function finalizeStep(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const createNextGroupKey = util.createCreateNextGroupKey(options.interval);
      const groups = [];
      let groupKey = minGroupKey;

      while (groupKey <= maxGroupKey)
      {
        groups.push(results.groups[groupKey] || groupKey);

        groupKey = createNextGroupKey(groupKey);
      }

      results.groups = groups;

      _.forEach([
        'countBySection',
        'countByStatus',
        'okBySection',
        'okByCategory',
        'nokBySection',
        'nokByCategory',
        'auditors',
        'owners'
      ], sortTotals);
    },
    function sendResultsStep(err)
    {
      done(err, results);
    }
  );

  function createGroup(key)
  {
    return {
      key: key,
      count: 0,
      countBySection: {},
      countByStatus: {},
      ok: 0,
      okBySection: {},
      okByCategory: {},
      nok: 0,
      nokBySection: {},
      nokByCategory: {},
      auditors: {}
    };
  }

  function handleAudit(audit)
  {
    const auditor = User.transliterateName(audit.auditor.label);
    const totals = results.totals;
    const groupKey = util.createGroupKey(options.interval, audit[groupProperty], false);
    let group = results.groups[groupKey];

    if (groupKey < minGroupKey)
    {
      minGroupKey = groupKey;
    }

    if (groupKey > maxGroupKey)
    {
      maxGroupKey = groupKey;
    }

    if (!group)
    {
      group = results.groups[groupKey] = createGroup(groupKey);
    }

    if (!results.sections[audit.section])
    {
      results.sections[audit.section] = audit.section;
    }

    inc('count', audit.section);
    incGroup('countByStatus', audit.status);

    results.users[auditor] = audit.auditor.label;

    if (!totals.auditors[auditor])
    {
      totals.auditors[auditor] = 0;
    }

    if (!group.auditors[auditor])
    {
      group.auditors[auditor] = 0;
    }

    totals.auditors[auditor] += 1;
    group.auditors[auditor] += 1;

    audit.results.forEach(r =>
    {
      if (r.ok === null)
      {
        return;
      }

      results.categories[r.category] = r.shortName;

      inc(r.ok ? 'ok' : 'nok', audit.section, r.category);
    });

    function inc(metricKey, section, category)
    {
      totals[metricKey] += 1;
      group[metricKey] += 1;

      if (section)
      {
        incGroup(`${metricKey}BySection`, section);
      }

      if (category)
      {
        incGroup(`${metricKey}ByCategory`, category);
      }
    }

    function incGroup(metricKey, id)
    {
      if (!totals[metricKey][id])
      {
        totals[metricKey][id] = 0;
      }

      if (!group[metricKey][id])
      {
        group[metricKey][id] = 0;
      }

      totals[metricKey][id] += 1;
      group[metricKey][id] += 1;
    }
  }

  function sortTotals(property)
  {
    const totals = [];

    _.forEach(results.totals[property], (value, key) =>
    {
      totals.push([key, value]);
    });

    results.totals[property] = totals.sort((a, b) => b[1] - a[1]);
  }
};
