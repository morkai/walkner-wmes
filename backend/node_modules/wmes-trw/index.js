// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  userId: 'user',
  expressId: 'express',
  updaterId: 'updater'
};

exports.models = [
  require('./models/trwTester'),
  require('./models/trwProgram'),
  require('./models/trwTest'),
  require('./models/trwCounter')
];

exports.republishTopics = ['trw.**'];

exports.recordTopics = {
  debug: ['trw.testers.added', 'trw.testers.edited', 'trw.programs.added', 'trw.programs.edited'],
  warning: ['trw.*.deleted']
};

exports.userPrivileges = ['TRW:VIEW', 'TRW:MANAGE'];

exports.optionalModules = {
  'mongoose user updater express': require('./routes')
};

exports.start = (app, module) =>
{
  module.DICTIONARIES = {
    testers: 'TrwTester',
    programs: 'TrwProgram'
  };

  app.broker.subscribe('trw.testers.deleted', (message) =>
  {
    const tester = message.model;

    step(
      function()
      {
        module.TrwProgram.find({tester: tester._id}).exec(this.next());
      },
      function(err, programs)
      {
        if (err)
        {
          return this.skip(err);
        }

        if (!programs.length)
        {
          return this.skip(null, []);
        }

        setImmediate(this.parallel(), null, programs);

        module.TrwProgram.deleteMany({tester: tester._id}).exec(this.parallel());
      },
      function(err, programs)
      {
        if (err)
        {
          return module.error(err, "Failed to delete programs of deleted tester.", {deletedTester: tester._id});
        }

        programs.forEach(program =>
        {
          app.broker.publish('trw.programs.deleted', {
            model: program,
            user: message.user
          });
        });
      }
    );
  });
};
