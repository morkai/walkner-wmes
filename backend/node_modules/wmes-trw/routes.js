// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module) =>
{
  const {express, mongoose, user, updater, TrwTest, TrwCounter} = module;

  const canView = user.auth('TRW:VIEW');
  const canViewLocal = user.auth('LOCAL', 'TRW:VIEW');
  const canManage = user.auth('TRW:MANAGE');

  express.get('/trw', canViewLocal, (req, res) =>
  {
    res.format({
      'text/html': () =>
      {
        res.render('index', updater.getAppTemplateData('trw', req));
      }
    });
  });

  express.get('/trw/dictionaries', canView, dictionariesRoute);

  express.get('/trw/tests', canView, express.crud.browseRoute.bind(null, app, TrwTest));
  express.post('/trw/tests', canViewLocal, saveTestRoute);
  express.get('/trw/tests/:id', canView, express.crud.readRoute.bind(null, app, TrwTest));
  express.get('/trw/tests;export.:format?', canView, express.crud.exportRoute.bind(null, app, {
    filename: 'WMES-TRW-RESULTS',
    serializeRow: exportTest,
    model: TrwTest,
    freezeRows: 1,
    freezeColumns: 2,
    columns: {
      order: 9,
      pce: 'integer',
      line: 12,
      workstation: 'integer',
      startedAt: 'datetime',
      finishedAt: 'datetime',
      duration: 'integer',
      tester: 40,
      program: 40
    }
  }));

  express.get('/trw/counters', canViewLocal, express.crud.browseRoute.bind(null, app, TrwCounter));

  _.forEach(module.DICTIONARIES, setUpDictionaryRoutes);

  function setUpDictionaryRoutes(modelName, dictionaryName)
  {
    const Model = mongoose.model(modelName);
    const urlPrefix = `/trw/${dictionaryName}`;

    express.get(urlPrefix, canViewLocal, express.crud.browseRoute.bind(null, app, Model));
    express.post(urlPrefix, canManage, express.crud.addRoute.bind(null, app, Model));
    express.get(`${urlPrefix}/:id`, canViewLocal, express.crud.readRoute.bind(null, app, Model));
    express.put(`${urlPrefix}/:id`, canManage, express.crud.editRoute.bind(null, app, Model));
    express.delete(`${urlPrefix}/:id`, canManage, express.crud.deleteRoute.bind(null, app, Model));
  }

  function dictionariesRoute(req, res, next)
  {
    step(
      function()
      {
        _.forEach(module.DICTIONARIES, modelName =>
        {
          const Model = mongoose.model(modelName);

          Model
            .find()
            .select(Model.DICTIONARY_FIELDS || {})
            .lean()
            .exec(this.group());
        });
      },
      function(err, dictionaries)
      {
        if (err)
        {
          return next(err);
        }

        const result = {};

        Object.keys(module.DICTIONARIES).forEach((dictionaryName, i) =>
        {
          result[dictionaryName] = dictionaries[i];
        });

        res.json(result);
      }
    );
  }

  function saveTestRoute(req, res, next)
  {
    step(
      function()
      {
        this.test = new TrwTest(req.body);

        const conditions = {
          order: this.test.order,
          program: this.test.program._id
        };
        const update = {
          $inc: {count: 1}
        };
        const options = {
          upsert: true,
          new: true
        };

        TrwCounter.findOneAndUpdate(conditions, update, options).exec(this.next());
      },
      function(err, counter)
      {
        if (err)
        {
          return this.skip(err);
        }

        this.test.user = user.createUserInfo(req.session.user, req);
        this.test.pce = counter.count;

        this.test.save(this.next());
      },
      function(err)
      {
        if (err)
        {
          return next(err);
        }

        res.sendStatus(204);

        app.broker.publish(`${TrwTest.TOPIC_PREFIX}.saved`, {
          test: {
            _id: this.test,
            startedAt: this.test.startedAt,
            order: this.test.order,
            program: {
              _id: this.test.program._id,
              tester: {
                _id: this.test.program.tester._id
              }
            }
          }
        });

        app.broker.publish(`${TrwCounter.TOPIC_PREFIX}.updated.${this.test.order}.${this.test.program._id}`, {
          count: this.test.pce
        });
      }
    );
  }

  function exportTest(doc)
  {
    return {
      order: doc.order,
      pce: doc.pce,
      line: doc.line,
      workstation: doc.workstation,
      startedAt: doc.startedAt,
      finishedAt: doc.finishedAt,
      duration: doc.finishedAt ? ((doc.finishedAt - doc.startedAt) / 1000) : 0,
      tester: doc.program.tester.name,
      program: doc.program.name
    };
  }
};
