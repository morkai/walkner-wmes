// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

module.exports = (app, {LucaEvent}, req, res, next) =>
{
  const lucaEvents = req.body.events;

  if (!_.isArray(lucaEvents) || lucaEvents.length === 0)
  {
    return next(app.createError('No events specified.', 'INPUT', 400));
  }

  const wmesEvents = [];
  const eventTypes = new Set();
  const eventLines = new Set();

  lucaEvents.forEach(event =>
  {
    const time = new Date(event.time);

    if (_.isString(event.line) && event.line.length > 0 && event.line.length < 20
      && _.isString(event.type) && event.type.length > 0 && event.type.length < 20
      && !isNaN(time.getTime())
      && _.isString(event.orderNo) && event.orderNo.length <= 9)
    {
      eventTypes.add(event.type);
      eventLines.add(event.line);

      wmesEvents.push({
        line: event.line,
        type: event.type,
        time,
        station: event.workstationNo >= 1 && event.workstationNo <= 7 ? event.workstationNo : -1,
        order: event.orderNo,
        data: _.isPlainObject(event.data) ? event.data : {}
      });
    }
  });

  if (wmesEvents.length !== lucaEvents.length)
  {
    return next(app.createError('Invalid events specified.', 'INPUT', 400));
  }

  LucaEvent.collection.insertMany(wmesEvents, {ordered: false, rawResult: true}, (err, result) =>
  {
    if (err && err.code !== 11000)
    {
      return next(app.createError('Failed to record events.', 'DB_FAILURE', 500, {events: wmesEvents}));
    }

    const count = result ? result.insertedCount : err && err.result ? err.result.nInserted : 0;

    if (count)
    {
      app.broker.publish('luca.events.saved', {
        line: Array.from(eventLines),
        type: Array.from(eventTypes),
        count
      });
    }

    res.sendStatus(204);
  });
};
