// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const recordEventsRoute = require('./recordEvents');
const dictionariesRoute = require('./dictionaries');

module.exports = (app, module) =>
{
  const {
    user,
    express,
    messengerClient,
    production,
    settings,
    LucaEvent
  } = module;

  const canView = user.auth('LUCA:VIEW');
  const canManage = user.auth('LUCA:MANAGE');

  express.get('/luca;get-line-order', canView, getLineOrderRoute);
  express.post('/luca;set-line-order', canManage, setLineOrderRoute);
  express.post('/luca;show-message', canManage, showMessageRoute);
  express.post('/luca;record-events', canManage, recordEventsRoute.bind(null, app, module));

  express.get('/luca/settings', canView, settings.browseRoute('luca'));
  express.put('/luca/settings/:id', canManage, settings.updateRoute);

  express.get('/luca/dictionaries', canView, dictionariesRoute.bind(null, app, module));

  express.get('/luca/events', canView, express.crud.browseRoute.bind(null, app, LucaEvent));
  express.get('/luca/events/:id', canView, express.crud.readRoute.bind(null, app, LucaEvent));
  express.get('/luca/events;export.:format?', canView, express.crud.exportRoute.bind(null, app, {
    filename: 'WMES-LUCA-EVENTS',
    freezeRows: 0,
    freezeColumns: 1,
    columns: {
      time: 'datetime',
      type: 20,
      line: 10,
      station: {
        type: 'integer',
        width: 3
      },
      order: 9
    },
    serializeRow: exportEvent,
    model: LucaEvent
  }));

  function getLineOrderRoute(req, res, next)
  {
    const data = {
      lineId: req.query.line,
      orderNo: req.query.order
    };

    messengerClient.request('luca.getLineOrder', data, (err, result) =>
    {
      if (err)
      {
        return next(err);
      }

      res.json(result);
    });
  }

  function setLineOrderRoute(req, res, next)
  {
    const data = {
      lineId: req.body.line || req.query.line,
      orderNo: req.body.order || req.query.order
    };

    messengerClient.request('luca.setLineOrder', data, (err, result) =>
    {
      if (err)
      {
        return next(err);
      }

      res.json(result);
    });
  }

  function showMessageRoute(req, res, next)
  {
    const {line, message} = req.body;
    const lineState = production.getProdLineState(line);

    if (!lineState)
    {
      return next(app.createError('Invalid line.', 'INPUT', 400));
    }

    if (!_.isPlainObject(message))
    {
      return next(app.createError('Invalid message.', 'INPUT', 400));
    }

    if (!lineState.online)
    {
      return next(app.createError('Line offline.', 'OFFLINE', 500));
    }

    app.broker.publish(`production.messageRequested.${line}`, {line, message});

    res.sendStatus(204);
  }

  function exportEvent(doc)
  {
    return {
      time: doc.time,
      type: doc.type,
      line: doc.line,
      station: doc.station,
      order: doc.order
    };
  }
};
