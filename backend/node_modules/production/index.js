// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const setUpProdData = require('./prodData');
const setUpProdState = require('./prodState');
const recreate = require('./recreate');
const syncLogEntryStream = require('./syncLogEntryStream');
const checkSerialNumber = require('./checkSerialNumber');
const getOrderQueue = require('./getOrderQueue');
const logEntryHandlers = require('./logEntryHandlers');
const orderFinder = require('./orderFinder');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  sioId: 'sio',
  subdivisionsId: 'subdivisions',
  prodLinesId: 'prodLines',
  downtimeReasonsId: 'downtimeReasons',
  fteId: 'fte',
  orgUnitsId: 'orgUnits',
  settingsId: 'settings',
  updaterId: 'updater',
  isaId: 'isa',
  mysqlId: 'mysql',
  orderBomMatchersId: 'orderBomMatchers',
  dictionaryModules: []
};

exports.models = [
  require('factoryLayout/models/factoryLayout'),
  require('hourlyPlans/models/hourlyPlan'),
  require('orders/models/order'),
  require('orders/models/mechOrder'),
  require('orderBomMatchers/models/orderBomMatcher'),
  require('planning/models/plan'),
  require('planning/models/planSettings'),
  require('planning/models/whOrderStatus'),
  require('pressWorksheets/models/pressWorksheet'),
  require('prodDowntimes/models/prodDowntime'),
  require('prodLines/models/prodLine'),
  require('prodLogEntries/models/prodLogEntry'),
  require('prodSerialNumbers/models/prodSerialNumber'),
  require('prodShiftOrders/models/prodShiftOrder'),
  require('prodShifts/models/prodShift'),
  require('settings/models/setting'),
  require('xiconf/models/xiconfHidLamp'),
  require('user/models/user')
];

exports.recordTopics = {
  info: ['production.unlocked', 'production.locked'],
  warning: ['production.unlockFailure', 'production.lockFailure']
};

exports.republishTopics = [
  'production.synced.**',
  'production.edited.**',
  'production.stateChanged.**',
  'production.autoDowntimes.**',
  'production.taktTime.snChecked.**',
  'production.messageRequested.**',
  'production.spigotCheck.**'
];

exports.userPrivileges = [
  'OPERATOR:ACTIVATE', 'OPERATOR:ORDER_UNLOCK',
  'PROD_DATA:VIEW', 'PROD_DATA:MANAGE',
  'PROD_DATA:MANAGE:SPIGOT_ONLY', 'PROD_DATA:VIEW:EFF'
];

exports.requiredModules = 'mongoose';

exports.optionalModules = {
  'fte orgUnits': require('./activeProdLines'),
  'settings orgUnits': require('./autoDowntimes'),
  'user settings fte orgUnits express updater': require('./routes'),
  'user settings fte orgUnits sio': require('./commands'),
  'subdivisions prodLines downtimeReasons orgUnits': require('./logEntryHandler')
};

exports.start = (app, module) =>
{
  module.secretKeys = {};
  module.settingsCache = {};
  module.bomMatcherCache = new Map();

  module.recreating = false;
  module.recreate = recreate.bind(null, app, module);
  module.syncLogEntryStream = syncLogEntryStream.bind(null, app, module);
  module.checkSerialNumber = checkSerialNumber.bind(null, app, module);
  module.getOrderQueue = getOrderQueue.bind(null, app, module);
  module.logEntryHandlers = logEntryHandlers;
  module.orderFinder = orderFinder.create(app, module);

  setUpProdData(app, module);

  app.onModuleReady(
    [
      module.config.orgUnitsId
    ],
    function()
    {
      cacheSecretKeys();
      setUpProdState(app, module);
    }
  );

  app.onModuleReady(
    [
      module.config.settingsId
    ],
    cacheSettings
  );

  app.broker.subscribe('shiftChanged', () =>
  {
    setTimeout(module.clearStaleProdData, 30000);

    module.bomMatcherCache.clear();
  });

  app.broker.subscribe('orderBomMatchers.**', () => module.bomMatcherCache.clear());

  app.broker.subscribe('hourlyPlans.quantitiesPlanned', (message) =>
  {
    if (!module.recreating)
    {
      app.broker.publish(`production.edited.shift.${message.prodShift}`, {
        quantitiesDone: message.quantitiesDone
      });
    }
  });

  app.broker.subscribe('prodLines.*', cacheSecretKeys);

  function cacheSecretKeys()
  {
    module.secretKeys = {};

    _.forEach(app[module.config.orgUnitsId].getAllByType('prodLine'), (prodLine) =>
    {
      const secretKey = prodLine.secretKey;

      if (secretKey)
      {
        module.secretKeys[prodLine._id] = secretKey;
      }
    });
  }

  function cacheSettings()
  {
    module.settingsCache = {};

    app.broker.subscribe('settings.updated.production.**', (message) =>
    {
      module.settingsCache[message._id.replace('production.', '')] = message.value;
    });

    app[module.config.settingsId].findValues({_id: /^production/}, 'production.', (err, settings) =>
    {
      if (err)
      {
        module.error(err, 'Failed to cache settings.');
      }
      else if (settings)
      {
        module.settingsCache = settings;
      }
    });
  }
};
