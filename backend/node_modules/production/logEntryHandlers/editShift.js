// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, prodLine, logEntry, done) =>
{
  const mongoose = app[module.config.mongooseId];
  const ProdShiftOrder = mongoose.model('ProdShiftOrder');
  const ProdDowntime = mongoose.model('ProdDowntime');

  const changes = logEntry.data;
  const personnelChanged = changes.master !== undefined
    || changes.leader !== undefined
    || changes.operator !== undefined
    || changes.operators !== undefined;

  step(
    function getModelsStep()
    {
      module.getProdData('shift', logEntry.prodShift, this.parallel());

      if (personnelChanged)
      {
        ProdShiftOrder.find({prodShift: logEntry.prodShift}, this.parallel());
        ProdDowntime.find({prodShift: logEntry.prodShift}, this.parallel());
      }
    },
    function swapToCachedModelsStep(err, prodShift, prodShiftOrders, prodDowntimes)
    {
      if (err)
      {
        module.error(err, 'Failed to find models while editing shift.', {
          prodShiftId: logEntry.prodShift,
          prodLogEntryId: logEntry._id
        });

        return this.done(done, err);
      }

      const cachedProdShiftOrders = [];
      const cachedProdDowntimes = [];

      if (Array.isArray(prodShiftOrders))
      {
        module.swapToCachedProdData(prodShiftOrders, cachedProdShiftOrders);
      }

      if (Array.isArray(prodDowntimes))
      {
        module.swapToCachedProdData(prodDowntimes, cachedProdDowntimes);
      }

      setImmediate(this.next(), prodShift, cachedProdShiftOrders, cachedProdDowntimes);
    },
    function updateModelsStep(prodShift, prodShiftOrders, prodDowntimes)
    {
      prodShift.set(changes);
      prodShift.save(this.parallel());

      if (!personnelChanged)
      {
        return;
      }

      const personnelChanges = {};

      ['master', 'leader', 'operator', 'operators'].forEach(personnelProperty =>
      {
        if (changes[personnelProperty] !== undefined)
        {
          personnelChanges[personnelProperty] = changes[personnelProperty];
        }
      });

      prodShiftOrders.forEach(pso =>
      {
        pso.set(personnelChanges);
        pso.save(this.parallel());
      });

      prodDowntimes.forEach(dt =>
      {
        dt.set(personnelChanges);
        dt.save(this.parallel());
      });
    },
    done
  );
};
