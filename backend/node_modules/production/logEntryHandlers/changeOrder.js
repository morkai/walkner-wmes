// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const util = require('./util');

module.exports = (app, module, prodLine, logEntry, done) =>
{
  const {
    ProdShiftOrder,
    ProdDowntime
  } = module;

  step(
    function getShiftForPersonnelDataIfNeeded()
    {
      if (logEntry.data.master !== undefined)
      {
        return;
      }

      module.getProdData('shift', logEntry.prodShift, this.next());
    },
    function copyPersonnelData(err, prodShift)
    {
      if (err)
      {
        return module.error(err, 'Failed to find prod shift to copy personnel data.', {
          prodShiftId: logEntry.prodShift,
          prodLogEntryId: logEntry._id
        });
      }

      if (prodShift)
      {
        logEntry.data.master = prodShift.master;
        logEntry.data.leader = prodShift.leader;
        logEntry.data.operator = prodShift.operator;
        logEntry.data.operators = prodShift.operators;
      }
    },
    function findOrdersAndDowntimesToFinish()
    {
      const conditions = {
        startedAt: {$gt: Date.now() - 5 * 24 * 3600 * 1000},
        prodLine: prodLine._id,
        finishedAt: null
      };

      ProdShiftOrder.find(conditions).exec(this.parallel());
      ProdDowntime.find(conditions).exec(this.parallel());
    },
    function finishOrdersAndDowntimes(err, prodShiftOrders, prodDowntimes)
    {
      if (err)
      {
        return module.error(err, 'Failed to find unfinished orders and downtimes for prod line.', {
          prodLineId: prodLine._id,
          prodLogEntryId: logEntry._id
        });
      }

      if (prodShiftOrders.length === 0 && prodDowntimes.length === 0)
      {
        return;
      }

      module.info('Finishing bugged prod shift orders and prod downtimes.', {
        prodLineId: prodLine._id,
        prodLogEntryId: logEntry._id,
        orderCount: prodShiftOrders.length,
        downtimeCount: prodDowntimes.length
      });

      const steps = [];

      prodDowntimes.forEach(prodDowntime =>
      {
        steps.push(function()
        {
          finishBugged('prod downtime', prodDowntime, this.next());
        });
      });

      prodShiftOrders.forEach(prodShiftOrder =>
      {
        steps.push(function()
        {
          finishBugged('prod shift order', prodShiftOrder, this.next());
        });
      });

      steps.push(this.next());

      step(steps);
    },
    function fillOfflineEntryIfNeeded(err)
    {
      if (err)
      {
        module.error(err, 'Failed to finish bugged prod shift orders and/or prod downtimes.', {
          prodLogEntryId: logEntry._id
        });
      }

      if (util.isOfflineEntry(logEntry))
      {
        util.fillOrderData(app, module, logEntry, this.next());
      }
    },
    function saveNewPso(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const newProdShiftOrder = new ProdShiftOrder(logEntry.data);

      newProdShiftOrder.copyOperationData();
      newProdShiftOrder.save(this.next());
    },
    function getShiftData(err, newProdShiftOrder)
    {
      if (err && err.code !== 11000)
      {
        module.error(err, 'Failed to save a new prod shift order.', {
          prodLogEntryId: logEntry._id
        });

        return this.skip(err);
      }

      module.getProdData('shift', logEntry.prodShift, this.parallel());
      module.getProdShiftOrders(logEntry.prodShift, this.parallel());

      // New PSO is NULL if it already existed.
      if (newProdShiftOrder)
      {
        setImmediate(this.parallel(), null, newProdShiftOrder);
      }
      else
      {
        module.getProdData('order', logEntry.prodShiftOrder, this.parallel());
      }
    },
    function recalcShift(err, prodShift, allProdShiftOrders, prodShiftOrder)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (prodShiftOrder)
      {
        module.setProdData(prodShiftOrder);
      }

      if (prodLine.isNew || !prodShift || !prodShiftOrder)
      {
        return this.skip();
      }

      const oldNextOrders = prodShift.getNextOrders();
      const newNextOrders = oldNextOrders.filter(next => next.orderNo !== prodShiftOrder.orderId);

      if (newNextOrders.length !== oldNextOrders.length)
      {
        prodShift.nextOrder = newNextOrders;
      }

      prodShift.recalcOrderData(allProdShiftOrders);
      prodShift.save(this.group());

      prodLine.set({
        prodShiftOrder: prodShiftOrder._id,
        prodDowntime: null
      });

      prodLine.save(this.group());
    },
    function(err)
    {
      if (err)
      {
        module.error(err, 'Failed to save prod line after changing the prod shift order.', {
          prodLineId: prodLine._id,
          prodShiftOrderId: logEntry.prodShiftOrder,
          prodLogEntryId: logEntry._id
        });

        return this.skip(err);
      }
    },
    done
  );

  function finishBugged(type, buggedProdModel, done)
  {
    step(
      function()
      {
        module.getProdData(null, buggedProdModel._id, this.parallel());

        ProdShiftOrder
          .findOne({
            prodLine: buggedProdModel.prodLine,
            startedAt: {$gt: buggedProdModel.startedAt},
            date: buggedProdModel.date
          })
          .select({startedAt: 1})
          .sort({startedAt: 1})
          .lean()
          .exec(this.parallel());
      },
      function(err, cachedProdModel, nextPso) // eslint-disable-line handle-callback-err
      {
        if (cachedProdModel)
        {
          buggedProdModel = cachedProdModel;
        }

        if (nextPso)
        {
          buggedProdModel.finishedAt = new Date(nextPso.startedAt.getTime() - 1);
        }
        else
        {
          buggedProdModel.finishedAt = new Date(buggedProdModel.date.getTime() + (8 * 3600 * 1000) - 1);
        }

        if (buggedProdModel.recalcDurations)
        {
          buggedProdModel.recalcDurations(true, this.next());
        }
        else
        {
          buggedProdModel.save(this.next());
        }
      },
      function(err)
      {
        if (err)
        {
          module.error(err, `Failed to save finished, bugged ${type}.`, {
            prodLineId: prodLine._id,
            prodLogEntryId: logEntry._id,
            prodModelId: buggedProdModel._id
          });
        }
        else
        {
          module.info(`Finished bugged ${type}.`, {
            prodLineId: prodLine._id,
            prodLogEntryId: logEntry._id,
            prodShiftId: buggedProdModel.prodShift,
            prodModelId: buggedProdModel._id
          });
        }

        return done();
      }
    );
  }
};
