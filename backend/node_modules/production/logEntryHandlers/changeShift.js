// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');

module.exports = (app, module, prodLine, logEntry, done) =>
{
  const {
    ProdShift,
    ProdShiftOrder,
    ProdDowntime
  } = module;

  step(
    function findOrdersAndDowntimesToFinishStep()
    {
      const conditions = {
        startedAt: {$gt: Date.now() - 7 * 24 * 3600 * 1000},
        prodLine: prodLine._id,
        finishedAt: null
      };

      ProdShiftOrder.find(conditions).exec(this.parallel());
      ProdDowntime.find(conditions).exec(this.parallel());
    },
    function finishOrdersAndDowntimesStep(err, prodShiftOrders, prodDowntimes)
    {
      if (err)
      {
        return module.error(err, 'Failed to find unfinished orders and downtimes for prod line.', {
          prodLineId: prodLine._id,
          prodLogEntryId: logEntry._id
        });
      }

      if (prodShiftOrders.length === 0 && prodDowntimes.length === 0)
      {
        return;
      }

      module.info('Finishing bugged prod shift orders and prod downtimes.', {
        prodLineId: prodLine._id,
        prodLogEntryId: logEntry._id,
        orderCount: prodShiftOrders.length,
        downtimeCount: prodDowntimes.length
      });

      step(
        function()
        {
          for (let i = 0, l = prodDowntimes.length; i < l; ++i)
          {
            finishBugged('prod downtime', prodDowntimes[i], this.group());
          }
        },
        function()
        {
          for (let i = 0, l = prodShiftOrders.length; i < l; ++i)
          {
            finishBugged('prod shift order', prodShiftOrders[i], this.group());
          }
        },
        this.next()
      );
    },
    function findProdShiftsToRecalcStep()
    {
      ProdShift
        .find({
          $or: [
            {shutdown: -1, prodLine: prodLine._id},
            {
              prodLine: prodLine._id,
              date: moment(logEntry.data.startedProdShift.date).subtract(8, 'hours').toDate()
            }
          ]
        })
        .exec(this.next());
    },
    function recalcProdShiftsStep(err, prodShifts)
    {
      if (err)
      {
        return module.error(err, 'Failed to find shifts to recalc.', {
          prodLineId: prodLine._id,
          prodLogEntryId: logEntry._id
        });
      }

      const cachedProdShiftModels = [];

      module.swapToCachedProdData(prodShifts, cachedProdShiftModels);

      for (let i = 0; i < cachedProdShiftModels.length; ++i)
      {
        cachedProdShiftModels[i].recalcTimes(this.group());
      }
    },
    function createProdShiftStep(err)
    {
      if (err)
      {
        module.error(err, 'Failed to recalc shift times.', {
          prodLineId: prodLine._id,
          prodLogEntryId: logEntry._id
        });
      }

      const prodShift = new ProdShift(logEntry.data.startedProdShift);

      prodShift.idle = -1;
      prodShift.working = -1;
      prodShift.downtime = -1;
      prodShift.startup = -1;
      prodShift.shutdown = -1;

      prodShift.save(this.next());
    },
    function handleCreatedProdShiftStep(err, prodShift)
    {
      if (err && err.code !== 11000)
      {
        module.error(err, 'Failed to save a new prod shift.', {
          prodLineId: prodLine._id,
          prodLogEntryId: logEntry._id,
          prodShiftId: logEntry.prodShift
        });

        return done(err);
      }

      if (!err)
      {
        module.setProdData(prodShift);
      }

      if (prodLine.isNew || !prodShift)
      {
        return done();
      }

      prodLine.set({
        prodShift: prodShift._id,
        prodShiftOrder: null,
        prodDowntime: null
      });

      prodLine.save(err =>
      {
        if (err)
        {
          module.error(err, 'Failed to save prod line after changing the shift.', {
            prodLineId: prodLine._id,
            prodLogEntryId: logEntry._id
          });
        }

        done(err);
      });
    }
  );

  function finishBugged(type, buggedProdModel, done)
  {
    const _id = buggedProdModel._id;

    module.getProdData(null, _id, (err, cachedProdModel) =>
    {
      if (!err && cachedProdModel)
      {
        buggedProdModel = cachedProdModel;
      }

      buggedProdModel.finishedAt = new Date(buggedProdModel.date.getTime() + (8 * 3600 * 1000) - 1);

      if (buggedProdModel.recalcDurations)
      {
        buggedProdModel.recalcDurations(true, finalizeBugged.bind(null, type, buggedProdModel, done));
      }
      else
      {
        buggedProdModel.save(finalizeBugged.bind(null, type, buggedProdModel, done));
      }
    });
  }

  function finalizeBugged(type, prodModel, done, err)
  {
    if (err)
    {
      module.error(err, `Failed to save finished, bugged ${type}.`, {
        prodLineId: prodLine._id,
        prodLogEntryId: logEntry._id,
        prodModelId: prodModel._id
      });
    }
    else
    {
      module.info(`Finished bugged ${type}.`, {
        prodLineId: prodLine._id,
        prodLogEntryId: logEntry._id,
        prodShiftId: prodModel.prodShift,
        prodModelId: prodModel._id
      });
    }

    return done();
  }
};
