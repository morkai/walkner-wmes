// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = function(app, productionModule, prodLine, logEntry, done)
{
  const mongoose = app[productionModule.config.mongooseId];
  const Order = mongoose.model('Order');
  const ProdShiftOrder = mongoose.model('ProdShiftOrder');

  step(
    function()
    {
      productionModule.getProdData('order', logEntry.data._id, this.next());
    },
    function(err, prodShiftOrder)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to get the prod shift order to finish.', {
          prodShiftOrderId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.skip(err);
      }

      if (!prodShiftOrder)
      {
        productionModule.warn(`Couldn't find prod shift order to finish.`, {
          prodShiftOrderId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.skip();
      }

      if (prodShiftOrder.finishedAt
        && prodShiftOrder.finishedAt <= Date.parse(logEntry.data.finishedAt))
      {
        productionModule.warn('Tried to finish an already finished prod shift order.', {
          prodShiftOrderId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.skip();
      }

      this.prodShiftOrder = prodShiftOrder;

      Order.findById(prodShiftOrder.orderId, {operations: 1}).lean().exec(this.next());
    },
    function(err, order)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (order)
      {
        ProdShiftOrder.copyOperationData(this.prodShiftOrder, order.operations);
      }
      else
      {
        productionModule.warn('Order for prod shift order not found.', {
          orderId: this.prodShiftOrder.orderId,
          prodShiftOrderId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });
      }

      this.prodShiftOrder.finishedAt = logEntry.data.finishedAt;

      this.prodShiftOrder.recalcDurations(false, this.parallel());

      this.prodShiftOrder.recalcCycleTime(this.parallel());
    },
    function(err)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to recalculate prod shift order.', {
          prodShiftOrderId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });
      }

      this.prodShiftOrder.save(this.next());
    },
    done
  );
};
