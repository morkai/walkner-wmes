// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const util = require('./util');

module.exports = function(app, productionModule, prodLine, logEntry, done)
{
  step(
    function getProdDowntimeModelStep()
    {
      productionModule.getProdData('downtime', logEntry.data._id, this.next());
    },
    function getProdShiftOrderModelStep(err, prodDowntime)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to find downtime to delete.', {
          prodDowntimeId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.done(done, err);
      }

      if (!prodDowntime)
      {
        productionModule.warn('Downtime not found for deletion.', {
          prodDowntimeId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.done(done, null);
      }

      const next = this.next();
      const orderId = prodDowntime.prodShiftOrder;

      if (orderId)
      {
        productionModule.getProdData('order', orderId, function(err, prodShiftOrder)
        {
          if (err)
          {
            productionModule.error(err, 'Failed to find order while deleting downtime.', {
              prodShiftOrderId: orderId,
              prodDowntimeId: logEntry.data._id,
              prodLogEntryId: logEntry._id
            });
          }

          next(err, prodDowntime, prodShiftOrder);
        });
      }
      else
      {
        next(null, prodDowntime, null);
      }
    },
    function deleteProdDowntimeStep(err, prodDowntime, prodShiftOrder)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to find order while deleting downtime.', {
          prodShiftOrderId: prodDowntime.prodShiftOrder,
          prodDowntimeId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.done(done, err);
      }

      this.prodDowntime = prodDowntime;
      this.prodShiftOrder = prodShiftOrder;

      prodDowntime.remove(this.next());
    },
    function recalcOrderDurationsStep(err)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to delete downtime.', {
          prodDowntimeId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });

        return this.skip(err);
      }

      if (!productionModule.recreating)
      {
        app.broker.publish('prodDowntimes.deleted.' + this.prodDowntime._id, {
          _id: this.prodDowntime._id,
          rid: this.prodDowntime.rid,
          prodLine: this.prodDowntime.prodLine,
          prodShift: this.prodDowntime.prodShift,
          prodShiftOrder: this.prodDowntime.prodShiftOrder
        });
      }

      if (this.prodShiftOrder)
      {
        this.prodShiftOrder.recalcDurations(true, this.next());
      }
    },
    function handleRecalcDurationsResultStep(err)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to recalc order durations after deleting downtime.', {
          prodShiftOrderId: this.prodShiftOrder._id,
          prodDowntimeId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });
      }
    },
    util.createRecalcShiftTimesStep(productionModule, logEntry),
    done
  );
};
