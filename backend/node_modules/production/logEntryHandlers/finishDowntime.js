// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = function(app, productionModule, prodLine, logEntry, done)
{
  const ProdLogEntry = app[productionModule.config.mongooseId].model('ProdLogEntry');

  productionModule.getProdData('downtime', logEntry.data._id, function(err, prodDowntime)
  {
    if (err)
    {
      productionModule.error(err, 'Failed to get prod downtime to finish.', {
        prodDowntimeId: logEntry.data._id,
        prodLogEntryId: logEntry._id
      });

      return done(err);
    }


    if (!prodDowntime)
    {
      productionModule.warn(`Couldn't find prod downtime to finish.`, {
        prodDowntimeId: logEntry.data._id,
        prodLogEntryId: logEntry._id
      });

      return done();
    }

    finishDowntime(prodDowntime);
  });

  function finishDowntime(prodDowntime)
  {
    if (prodDowntime.finishedAt && prodDowntime.finishedAt <= Date.parse(logEntry.data.finishedAt))
    {
      productionModule.warn('Tried to finish an already finished prod downtime.', {
        prodDowntimeId: logEntry.data._id,
        prodLogEntryId: logEntry._id
      });

      return done();
    }

    prodDowntime.finishedAt = logEntry.data.finishedAt;

    const downtimeReason = app[productionModule.config.downtimeReasonsId].modelsById[prodDowntime.reason];
    let corroborated = null;
    const changes = {};

    if (!productionModule.recreating
      && prodDowntime.status === 'undecided'
      && downtimeReason
      && downtimeReason.auto)
    {
      corroborated = {
        status: 'confirmed',
        corroborator: {
          id: null,
          ip: '127.0.0.1',
          cname: 'LOCALHOST',
          label: 'System'
        },
        corroboratedAt: new Date(logEntry.savedAt.getTime() + 1)
      };

      changes.date = corroborated.corroboratedAt;
      changes.user = corroborated.corroborator;
      changes.data = {status: [prodDowntime.status, corroborated.status]};
      changes.comment = '';

      prodDowntime.changes.push(changes);
      prodDowntime.set(corroborated);

      corroborated._id = prodDowntime._id;

      const createdAt = new Date(logEntry.createdAt.getTime() + 1);
      const corroborateLogEntry = new ProdLogEntry({
        _id: ProdLogEntry.generateId(createdAt, logEntry.prodShift),
        type: 'corroborateDowntime',
        data: corroborated,
        division: logEntry.division,
        subdivision: logEntry.subdivision,
        mrpControllers: logEntry.mrpControllers,
        prodFlow: logEntry.prodFlow,
        workCenter: logEntry.workCenter,
        prodLine: logEntry.prodLine,
        prodShift: logEntry.prodShift,
        prodShiftOrder: logEntry.prodShiftOrder,
        creator: corroborated.corroborator,
        createdAt: createdAt,
        savedAt: corroborated.corroboratedAt,
        todo: false
      });
      corroborateLogEntry.save(function(err)
      {
        if (err)
        {
          productionModule.error(err, 'Failed to create a log entry during an auto corroboration of the downtime.', {
            prodDowntimeId: logEntry.data._id,
            prodLogEntryId: logEntry._id
          });
        }
      });
    }

    prodDowntime.save(function(err)
    {
      if (err)
      {
        productionModule.error(err, 'Failed to save prod downtime after changing the finish time.', {
          prodDowntimeId: logEntry.data._id,
          prodLogEntryId: logEntry._id
        });
      }
      else
      {
        app.broker.publish('prodDowntimes.finished.' + prodLine._id + '.' + prodDowntime._id, logEntry.data);
      }

      if (corroborated)
      {
        corroborated.changes = changes;

        app.broker.publish('prodDowntimes.corroborated.' + prodLine._id + '.' + prodDowntime._id, corroborated);
      }

      return done(err);
    });
  }
};
