// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const step = require('h5.step');
const logEntryHandlers = require('./logEntryHandlers');

module.exports = (app, module, creator, logEntryStream, done) =>
{
  const {
    orgUnits,
    ProdLogEntry
  } = module;

  if (_.isString(logEntryStream))
  {
    logEntryStream = logEntryStream.trim().split('\n');
  }

  if (!Array.isArray(logEntryStream) || !logEntryStream.length)
  {
    return done();
  }

  const logEntryList = [];
  const logEntrySet = new Set();
  const savedAt = new Date();
  const lastLogEntryIndex = logEntryStream.length - 1;
  let lastLogEntryWithInvalidSecretKey = null;

  logEntryStream.forEach((logEntryJson, i) =>
  {
    if (!logEntryJson.trim().length)
    {
      return;
    }

    try
    {
      const logEntry = prepareProdLogEntry(logEntryJson, i, savedAt);

      if (!logEntrySet.has(logEntry._id))
      {
        logEntryList.push(logEntry);
        logEntrySet.add(logEntry._id);
      }
    }
    catch (err)
    {
      module.warn(err, 'Invalid log entry.', {logEntryJson});
    }
  });

  if (logEntryList.length === 0)
  {
    return done(null, lastLogEntryWithInvalidSecretKey);
  }

  const insertSteps = [];
  const batchSize = 50;

  for (let i = 0, l = Math.ceil(logEntryList.length / batchSize); i < l; ++i)
  {
    insertSteps.push(createInsertStep(i));
  }

  insertSteps.push(function finalizeStep(err)
  {
    if (err && err.code !== 11000)
    {
      module.error(err, `Error while saving log entries.`, {
        count: logEntryList.length,
        first: logEntryList[0],
        last: logEntryList.length === 1 ? null : logEntryList[logEntryList.length - 1]
      });
    }

    done();

    if (!module.recreating)
    {
      app.broker.publish('production.logEntries.saved');
    }
  });

  step(insertSteps);

  function prepareProdLogEntry(logEntryJson, i, savedAt)
  {
    const logEntry = JSON.parse(logEntryJson);

    if (!_.isObject(logEntry))
    {
      throw new Error('TYPE');
    }

    if (!_.isFunction(logEntryHandlers[logEntry.type]))
    {
      throw new Error('UNKNOWN_HANDLER');
    }

    if (!_.isString(logEntry.secretKey)
      || logEntry.secretKey !== module.secretKeys[logEntry.prodLine])
    {
      if (i === lastLogEntryIndex)
      {
        lastLogEntryWithInvalidSecretKey = logEntry;
      }

      throw new Error('SECRET_KEY');
    }

    if (!logEntry.creator)
    {
      logEntry.creator = creator;
    }
    else
    {
      logEntry.creator.ip = creator.ip;
    }

    logEntry.savedAt = savedAt;
    logEntry.todo = true;

    return new ProdLogEntry(orgUnits.fix.prodLogEntry(logEntry)).toObject();
  }

  function createInsertStep(i)
  {
    return function insertStep(err)
    {
      if (err && err.code !== 11000)
      {
        module.error(err, `Error while saving log entries.`, {
          count: logEntryList.length,
          step: i,
          first: logEntryList[0],
          last: logEntryList.length === 1 ? null : logEntryList[logEntryList.length - 1]
        });
      }

      ProdLogEntry.collection.insertMany(
        logEntryList.slice(i * batchSize, i * batchSize + batchSize),
        {ordered: false},
        this.next()
      );
    };
  }
};
