// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhOrder: WhOrder,
    OldWhUser: WhUser,
    OldWhSetCart: WhSetCart
  } = module;

  const whOrder = await WhOrder.findById(data.whOrderId).session(session).exec();

  if (!whOrder)
  {
    throw app.createError(`Order not found.`, 'INPUT', 400);
  }

  const func = whOrder.funcs.find(f => f._id === data.funcId);

  if (!func)
  {
    throw app.createError(`Function not found.`, 'INPUT', 400);
  }

  const newValue = data.newValue;
  const oldValue = func.picklist;

  func.picklist = newValue;
  func.carts = [];
  func.problemArea = '';
  func.comment = '';
  func.finishedAt = null;

  const distStatus = func._id === 'packer' ? 'packStatus' : 'fifoStatus';

  switch (newValue)
  {
    case 'pending':
      whOrder[distStatus] = 'pending';
      func.status = 'picklist';
      func.pickup = 'pending';

      if (func._id === 'fmx')
      {
        whOrder.resetFunc('platformer');
      }
      break;

    case 'require':
      whOrder[distStatus] = 'pending';
      func.status = 'pickup';
      func.pickup = 'pending';

      if (func._id === 'fmx')
      {
        whOrder.resetFunc('platformer');
      }
      break;

    case 'ignore':
      func.status = 'finished';
      func.pickup = 'ignore';
      func.finishedAt = new Date();

      if (distStatus === 'packStatus')
      {
        whOrder.packStatus = 'ignored';
      }
      else
      {
        const fmx = whOrder.funcs.find(f => f._id === 'fmx').pickup;
        const kitter = whOrder.funcs.find(f => f._id === 'kitter').pickup;

        whOrder.fifoStatus = fmx === 'ignore' && kitter === 'ignore' ? 'ignored' : 'pending';

        if (whOrder.fifoStatus === 'ignored')
        {
          throw app.createError('Cannot ignore FIFO pickup.', 'FIFO_IGNORED', 400);
        }
      }

      if (func._id === 'fmx')
      {
        whOrder.resetFunc('platformer', {
          status: 'finished',
          picklist: 'ignore',
          pickup: 'ignore'
        });
      }
      break;

    default:
      throw app.createError(`Invalid picklist status.`, 'INPUT', 400);
  }

  whOrder.finalizeOrder();

  const now = new Date();
  const event = {
    type: 'picklist',
    user,
    time: now,
    data: {
      func: func._id,
      oldValue,
      newValue,
      whUser: func.user,
      orders: WhEvent.orders([whOrder]),
      lines: WhEvent.lines(whOrder)
    }
  };

  const [setCartsResults, eventsResults] = await Promise.all([
    WhSetCart.updateByFunc(whOrder, func._id),
    WhEvent.record(event, session),
    func.user && newValue === 'ignore'
      ? WhUser.collection.updateOne({_id: func.user.id}, {$set: {lastPickupAt: now}}, {session})
      : null,
    whOrder.save()
  ]);

  const setResults = await whOrder.finalizeSet(setCartsResults);

  await session.commitTransaction();

  const leanWhOrder = whOrder.toJSON();

  return {
    response: {
      order: leanWhOrder
    },
    results: [
      setCartsResults,
      eventsResults,
      setResults
    ],
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: [leanWhOrder]}
    }]
  };
};
