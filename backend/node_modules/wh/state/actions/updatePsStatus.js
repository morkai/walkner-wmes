// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.detached = true;

exports.session = false;

exports.execute = async (app, module, {data}) =>
{
  const {
    PaintShopOrder,
    OldWhOrder: WhOrder
  } = module;

  const whOrders = await WhOrder
    .find({order: data.orderNo})
    .select({
      _id: 1,
      psStatus: 1,
      drilling: 1,
      order: 1
    })
    .lean()
    .exec();

  if (!whOrders.length)
  {
    return;
  }

  const ids = [];
  const updated = [];
  let psStatus = 'unknown';
  let drilling = false;
  let painted = false;

  const potentiallyInvalidDrilledUnpainted = whOrders.some(whOrder =>
  {
    return !data.psStatus
      && data.drillStatus
      && data.drillStatus !== whOrder.psStatus
      && whOrder.drilling === false;
  });

  if (potentiallyInvalidDrilledUnpainted)
  {
    const psOrder = await PaintShopOrder
      .findOne({order: data.orderNo})
      .select({_id: 1})
      .lean()
      .exec();

    painted = !!psOrder;

    module.debug('Checked for potentially invalid drilled unpainted order.', {
      orderNo: data.orderNo,
      drillStatus: data.drillStatus,
      painted
    });
  }

  whOrders.forEach(whOrder =>
  {
    if (data.psStatus)
    {
      if (data.psStatus === whOrder.psStatus)
      {
        return;
      }

      psStatus = whOrder.psStatus = data.psStatus;
      drilling = whOrder.drilling = false;
    }
    else if (data.drillStatus)
    {
      if (data.drillStatus === whOrder.psStatus)
      {
        return;
      }

      if (whOrder.drilling === false && painted)
      {
        return;
      }

      psStatus = whOrder.psStatus = data.drillStatus;
      drilling = whOrder.drilling = true;
    }
    else
    {
      return;
    }

    ids.push(whOrder._id);
    updated.push(whOrder);
  });

  if (!ids.length)
  {
    return;
  }

  await WhOrder.collection.updateMany({_id: {$in: ids}}, {$set: {psStatus, drilling}});

  return {
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated}
    }, {
      topic: `${WhOrder.TOPIC_PREFIX}.updated.psStatus`,
      message: {updated}
    }]
  };
};
