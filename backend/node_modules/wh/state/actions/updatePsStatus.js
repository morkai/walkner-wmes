// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.detached = true;

exports.session = false;

exports.execute = async (app, module, {data}) =>
{
  const {
    Order,
    OldWhOrder: WhOrder
  } = module;

  const [whOrders, sapOrder] = await Promise.all([
    WhOrder
      .find({order: data.orderNo})
      .select({
        _id: 1,
        psStatus: 1,
        drilling: 1,
        order: 1
      })
      .lean()
      .exec(),
    Order
      .findById(data.orderNo)
      .select({
        psStatus: 1,
        drillStatus: 1
      })
      .lean()
      .exec()
  ]);

  if (!whOrders.length || !sapOrder)
  {
    return;
  }

  const ids = [];
  const updated = [];
  let psStatus = 'unknown';
  let drilling = false;

  if (sapOrder.psStatus === 'unknown')
  {
    psStatus = sapOrder.drillStatus;
    drilling = psStatus !== 'unknown';
  }
  else
  {
    psStatus = sapOrder.psStatus;
  }

  whOrders.forEach(whOrder =>
  {
    if (whOrder.psStatus === psStatus && whOrder.drilling === drilling)
    {
      return;
    }

    whOrder.psStatus = psStatus;
    whOrder.drilling = drilling;

    ids.push(whOrder._id);
    updated.push(whOrder);
  });

  if (!ids.length)
  {
    return;
  }

  await WhOrder.collection.updateMany({_id: {$in: ids}}, {$set: {psStatus, drilling}});

  return {
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated}
    }, {
      topic: `${WhOrder.TOPIC_PREFIX}.updated.psStatus`,
      message: {updated}
    }]
  };
};
