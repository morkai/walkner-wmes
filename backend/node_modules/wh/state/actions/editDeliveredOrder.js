// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhDeliveredOrder: WhDeliveredOrder,
    OldWhLine: WhLine,
    OldWhEvent: WhEvent
  } = module;

  const deliveredOrder = await WhDeliveredOrder
    .findById(data._id)
    .lean()
    .session(session)
    .exec();

  if (!deliveredOrder)
  {
    throw app.createError('Order not found.', 'INPUT', 400);
  }

  if (typeof data.qtyTodo !== 'number')
  {
    data.qtyTodo = deliveredOrder.qtyTodo;
  }

  if (typeof data.qtyDone !== 'number')
  {
    data.qtyDone = deliveredOrder.qtyDone;
  }

  if (typeof data.blocked !== 'boolean')
  {
    data.blocked = deliveredOrder.status === 'blocked';
  }

  const qtyTodo = Math.max(1, Math.floor(data.qtyTodo));
  const qtyDone = Math.min(qtyTodo, Math.max(0, Math.floor(data.qtyDone)));
  const qtyRemaining = qtyTodo - qtyDone;
  const update = {
    _id: deliveredOrder._id,
    status: qtyRemaining === 0 ? 'done' : 'todo'
  };

  if (deliveredOrder.qtyDone !== qtyDone
    || deliveredOrder.qtyDone !== qtyDone
    || deliveredOrder.qtyDone !== qtyDone)
  {
    update.qtyDone = qtyDone;
    update.qtyTodo = qtyTodo;
    update.qtyRemaining = qtyRemaining;
  }

  if (update.status === 'todo' && data.blocked)
  {
    update.status = 'blocked';
  }

  await WhLine.lockLines([deliveredOrder.line]);

  await WhDeliveredOrder.collection.updateOne({_id: deliveredOrder._id}, {$set: update}, {session});

  const event = {
    type: 'deliveredOrderEdited',
    user,
    time: new Date(),
    data: {
      orders: [{
        whOrder: deliveredOrder.whOrder,
        sapOrder: deliveredOrder.sapOrder,
        date: deliveredOrder.date,
        set: deliveredOrder.set
      }],
      lines: [deliveredOrder.line],
      oldDeliveredOrder: _.pick(deliveredOrder, Object.keys(update)),
      newDeliveredOrder: update
    }
  };

  const [lineResult, eventsResult] = await Promise.all([
    WhLine.recount(deliveredOrder.line, false, true, session),
    WhEvent.record(event, session)
  ]);

  await session.commitTransaction();

  return {
    response: update,
    results: [lineResult, eventsResult],
    messages: [{
      topic: `${WhDeliveredOrder.TOPIC_PREFIX}.updated`,
      message: {updated: [update]}
    }]
  };
};
