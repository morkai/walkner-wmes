// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const {ObjectId} = require('mongoose').Types;
const moment = require('moment');

module.exports = async (app, module, {data, user, session}) =>
{
  const {
    OldWhOrder: WhOrder,
    OldWhEvent: WhEvent,
    OldWhDowntime: WhDowntime,
    OldWhUser: WhUser,
    OldWhLine: WhLine
  } = module;

  const {
    whUser,
    downtimeReason,
    downtimeComment,
    personnelId
  } = data;

  if (whUser.func === 'packer' || whUser.func === 'platformer')
  {
    throw app.createError(`Func cannot start new sets.`, 'NO_PENDING_ORDERS', 400);
  }

  const now = new Date();
  const minDowntimeDuration = (module.state.settings.minPickupDowntime || 120) * 1000;
  const maxDowntimeDuration = (module.state.settings.maxPickupDowntime || 480) * 1000;
  const downtimeDuration = whUser.lastPickupAt ? now.getTime() - whUser.lastPickupAt.getTime() : 0;
  const downtime = downtimeDuration > minDowntimeDuration && downtimeDuration < maxDowntimeDuration;

  if (downtime && !downtimeReason)
  {
    return {
      response: {
        result: 'pickDowntimeReason',
        startedAt: whUser.lastPickupAt,
        personnelId,
        user: whUser
      }
    };
  }

  const availableLines = await findAvailableLines();

  if (!availableLines.size)
  {
    throw app.createError('No valid, pending orders.', 'NO_PENDING_ORDERS', 400);
  }

  const pendingOrder = await findNextPendingOrder(availableLines);

  const [setOrders, nextSetId] = await Promise.all([
    findMorePendingOrders(pendingOrder),
    findNextSetId(pendingOrder.date)
  ]);

  const withPicklist = {$in: [], $set: {}};
  const withoutPicklist = {$in: [], $set: {}};
  const event = {
    type: 'newSetStarted',
    time: now,
    user,
    data: {
      whUser: WhEvent.whUser(whUser),
      orders: null,
      lines: WhEvent.lines(setOrders[0]),
      downtime: null
    }
  };

  let downtimeId = null;

  if (downtimeReason)
  {
    downtimeId = new ObjectId();

    event.data.downtime = {
      id: downtimeId.toString(),
      reason: downtimeReason
    };
  }

  const mrps = new Set();

  setOrders.forEach(whOrder =>
  {
    const picklistDone = whOrder.picklistDone === 'success' || whOrder.picklistDone === 'progress';
    const {$in, $set} = picklistDone ? withPicklist : withoutPicklist;

    mrps.add(whOrder.mrp);
    $in.push(whOrder._id);

    $set.status = whOrder.status = 'started';
    $set.set = whOrder.set = nextSetId;
    $set.startedAt = whOrder.startedAt = now;
    $set.picklistFunc = whOrder.picklistFunc = whUser.func;
    $set.users = whOrder.users = [whUser._id];

    if (!picklistDone)
    {
      $set.picklistDone = whOrder.picklistDone = 'pending';
    }

    const func = whOrder.funcs.find(f => f._id === whUser.func);
    const funcI = whOrder.funcs.indexOf(func);

    $set[`funcs.${funcI}.user`] = func.user = event.data.whUser;
    $set[`funcs.${funcI}.startedAt`] = func.startedAt = now;
    $set[`funcs.${funcI}.status`] = func.status = 'picklist';
  });

  event.data.orders = WhEvent.orders(setOrders);

  const whOrdersOps = [];

  [withPicklist, withoutPicklist].forEach(({$in, $set}) =>
  {
    if ($in.length)
    {
      whOrdersOps.push({
        updateMany: {
          filter: {_id: {$in}},
          update: {$set}
        }
      });
    }
  });

  await WhLine.lockLines(setOrders[0].lines);

  const [eventsResults, downtimeResults, lineResults] = await Promise.all([
    WhEvent.record([event], session),
    WhDowntime.createDowntime({
      _id: downtimeId,
      reason: downtimeReason,
      startedAt: whUser.lastPickupAt,
      user: event.data.whUser,
      comment: downtimeComment,
      session
    }),
    WhLine.startNewSet(setOrders, session),
    WhUser.collection.updateOne({_id: whUser._id}, {$set: {lastPickupAt: now}}, {session}),
    WhOrder.collection.bulkWrite(whOrdersOps, {session})
  ]);

  await session.commitTransaction();

  setImmediate(async () =>
  {
    try
    {
      await module.state.printLabels(setOrders, 1, whUser.func);
    }
    catch (err)
    {
      module.error(err, `Failed to print labels after starting a new set.`);
    }
  });

  return {
    response: {
      result: 'newSetStarted',
      orders: setOrders,
      user: whUser
    },
    results: [
      eventsResults,
      downtimeResults,
      lineResults
    ],
    messages: [
      {
        topic: `${WhOrder.TOPIC_PREFIX}.updated`,
        message: {updated: setOrders}
      },
      {
        topic: 'old.wh.newSetStarted',
        message: {
          date: pendingOrder.date,
          set: nextSetId,
          mrps: Array.from(mrps)
        }
      }
    ]
  };

  async function findAvailableLines()
  {
    const maxSetsPerLine = module.state.settings.maxSetsPerLine || 2;
    const allLines = await WhLine.find().lean().exec();
    const redirLines = new Map();
    const availableLines = new Map();

    allLines.forEach(line =>
    {
      if (line.redirLine)
      {
        redirLines.set(line._id, line.redirLine);
      }

      if (line.pickup.sets < maxSetsPerLine)
      {
        availableLines.set(line._id, line);
      }
    });

    availableLines.forEach(line =>
    {
      const redirLine = redirLines.get(line);

      if (redirLine && !availableLines.has(redirLine))
      {
        availableLines.delete(line);
      }
    });

    return availableLines;
  }

  async function findNextPendingOrder(availableLines)
  {
    const {ignorePsStatus, enabledMrps} = module.state.settings;
    let {availableTimeThreshold} = module.state.settings;

    if (!availableTimeThreshold)
    {
      availableTimeThreshold = 0;
    }
    else
    {
      availableTimeThreshold *= 60 * 1000;
    }

    const lineIds = Array.from(availableLines.keys());
    const conditions = {
      status: 'pending',
      date: {
        $gte: moment.utc().startOf('day').subtract(7, 'days').toDate()
      },
      'lines._id': {$in: lineIds}
    };

    if (Array.isArray(ignorePsStatus) && ignorePsStatus.length)
    {
      conditions.psStatus = {$nin: ignorePsStatus};
    }

    if (Array.isArray(enabledMrps) && enabledMrps.length)
    {
      conditions.mrp = {$in: enabledMrps};
    }

    const pendingLines = await WhOrder
      .aggregate([
        {$match: conditions},
        {$group: {
          _id: '$lines._id',
          startTime: {$min: '$startTime'}
        }}
      ])
      .hint({status: 1, date: -1})
      .exec();

    if (!pendingLines.length)
    {
      throw app.createError('No valid, pending orders.', 'NO_PENDING_ORDERS', 400);
    }

    const candidateLines = new Map();

    pendingLines.forEach(pendingLine =>
    {
      pendingLine._id.forEach(lineId =>
      {
        const availableLine = availableLines.get(lineId);

        if (!availableLine)
        {
          return;
        }

        if (!candidateLines.has(lineId))
        {
          const availableTime = availableLine.pickup.time + availableLine.components.time;

          candidateLines.set(lineId, {
            startTime: Number.MAX_SAFE_INTEGER,
            availableTime,
            adjustedAvailableTime: availableTime < availableTimeThreshold ? 0 : availableTime,
            line: availableLine
          });
        }

        const candidateLine = candidateLines.get(lineId);

        candidateLine.startTime = Math.min(candidateLine.startTime, pendingLine.startTime.getTime());
      });
    });

    const sortedCandidates = Array.from(candidateLines.values()).sort((a, b) =>
    {
      let cmp = a.adjustedAvailableTime - b.adjustedAvailableTime;

      if (!cmp)
      {
        cmp = a.startTime - b.startTime;

        if (!cmp)
        {
          cmp = a.availableTime - b.availableTime;

          if (!cmp)
          {
            cmp = a.line._id.localeCompare(b.line._id, undefined, {numeric: true, ignorePunctuation: true});
          }
        }
      }

      return cmp;
    });

    conditions['lines._id'] = sortedCandidates[0].line._id;

    const whOrder = await WhOrder
      .findOne(conditions)
      .sort({startTime: 1})
      .lean()
      .hint({status: 1, 'lines._id': 1, startTime: 1})
      .session(session)
      .exec();

    if (!whOrder)
    {
      throw app.createError('No valid, pending orders.', 'NO_PENDING_ORDERS', 400);
    }

    return whOrder;
  }

  async function findMorePendingOrders(pendingOrder)
  {
    const whSettings = module.state.settings;

    const groupDuration = (whSettings.groupDuration || 2) * 3600 * 1000;
    const minSetDuration = (whSettings.minSetDuration || 120) * 60 * 1000;
    const maxSetDuration = (whSettings.maxSetDuration || 120) * 60 * 1000;
    const maxSetDifference = (whSettings.maxSetDifference || 120) * 60 * 1000;
    const maxSetSize = whSettings.maxSetSize || 5;

    const conditions = {
      status: 'pending',
      date: pendingOrder.date,
      line: pendingOrder.line
    };

    if (Array.isArray(whSettings.ignorePsStatus) && whSettings.ignorePsStatus.length)
    {
      conditions.psStatus = {$nin: whSettings.ignorePsStatus};
    }

    const whOrders = await WhOrder
      .find(conditions)
      .sort({startTime: 1})
      .lean()
      .session(session)
      .exec();

    const setOrders = [];
    let setDuration = 0;

    while (whOrders.length && setOrders.length < maxSetSize)
    {
      const whOrder = whOrders.shift();
      const orderDuration = whOrder.finishTime - whOrder.startTime;

      // Stop: the time difference between orders is too big.
      if (setOrders.length
        && (whOrder.startTime - setOrders[setOrders.length - 1].finishTime > maxSetDifference))
      {
        break;
      }

      // Order fits in the group's boundaries or it's the first order.
      if (setOrders.length === 0
        || (setDuration + orderDuration <= groupDuration))
      {
        setDuration += orderDuration;

        setOrders.push(whOrder);

        continue;
      }

      // Min set duration exceeded, don't extend.
      if (setDuration > minSetDuration)
      {
        break;
      }

      // Max set duration exceeded, ignore.
      if (setDuration + orderDuration > maxSetDuration)
      {
        continue;
      }

      // Extend set.
      setDuration += orderDuration;

      setOrders.push(whOrder);
    }

    return setOrders;
  }

  async function findNextSetId(date)
  {
    const result = await WhOrder
      .aggregate([
        {$match: {date}},
        {$group: {_id: null, set: {$max: '$set'}}}
      ])
      .session(session)
      .exec();

    if (result && result.length)
    {
      return (result[0].set || 0) + 1;
    }

    return 1;
  }
};
