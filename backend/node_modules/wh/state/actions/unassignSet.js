// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhOrder: WhOrder,
    OldWhEvent: WhEvent
  } = module;

  const {
    date,
    set,
    func
  } = data;

  const funcI = WhOrder.FUNCS_IDX[func];

  if (funcI == null)
  {
    throw app.createError('Invalid func.', 'INPUT', 400);
  }

  const now = new Date();

  const whOrders = await WhOrder
    .find({date, set})
    .sort({startTime: 1})
    .lean()
    .session(session)
    .exec();

  if (!whOrders.length)
  {
    throw app.createError('Invalid set.', 'INPUT', 400);
  }

  if (whOrders.every(o => o.funcs[funcI].status === 'finished'))
  {
    throw app.createError('Already finished.', 'FINISHED', 400);
  }

  if (whOrders.some(o => o.distStatus !== 'pending'))
  {
    throw app.createError('Already delivered.', 'DELIVERED', 400);
  }

  const whUser = whOrders[0].funcs[funcI].user;

  if (!whUser)
  {
    throw app.createError('Already unassigned.', 'UNASSIGNED', 400);
  }

  const event = {
    type: 'unassignedFromSet',
    user,
    time: now,
    data: {
      whUser: {...whUser, func},
      orders: WhEvent.orders(whOrders),
      lines: WhEvent.lines(whOrders[0])
    }
  };

  const whOrdersOps = [];

  whOrders.forEach(whOrder =>
  {
    const func = whOrder.funcs[funcI];
    const $set = {
      users: new Set(),
      [`funcs.${funcI}.user`]: null
    };

    func.user = null;

    whOrder.funcs.forEach(f =>
    {
      if (f.user)
      {
        $set.users.add(f.user.id);
      }
    });

    $set.users = whOrder.users = Array.from($set.users);

    whOrdersOps.push({
      updateOne: {
        filter: {_id: whOrder._id},
        update: {$set}
      }
    });
  });

  const [eventsResults] = await Promise.all([
    WhEvent.record(event, session),
    WhOrder.collection.bulkWrite(whOrdersOps, {session})
  ]);

  await session.commitTransaction();

  return {
    response: {
      result: 'unassignedFromSet',
      orders: whOrders.map(o => ({
        _id: o._id,
        funcs: o.funcs,
        users: o.users
      }))
    },
    results: [
      eventsResults
    ],
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: whOrders}
    }]
  };
};
