// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const continueSet = require('./continueSet');
const assignSet = require('./assignSet');
const startNewSet = require('./startNewSet');

module.exports = async (app, module, {data, user, whUser, session}) =>
{
  const {
    OldWhOrder: WhOrder
  } = module;

  const {
    date,
    downtimeReason,
    downtimeComment,
    personnelId
  } = data;

  const funcIndex = WhOrder.FUNCS.indexOf(whUser.func);

  if (funcIndex === -1)
  {
    throw app.createError('Invalid function.', 'INVALID_FUNC', 400);
  }

  const findAssignedOrder = WhOrder
    .findOne({
      status: 'started',
      [`funcs.${funcIndex}.user.id`]: whUser._id,
      [`funcs.${funcIndex}.status`]: {$nin: ['problem', 'finished']}
    })
    .sort({group: 1, line: 1, startTime: 1})
    .lean()
    .session(session)
    .exec();

  const activeOrderConditions = {
    status: 'started',
    [`funcs.${funcIndex}.user`]: {$type: 'null'}
  };

  if (whUser.func === 'platformer')
  {
    activeOrderConditions[`funcs.${WhOrder.FUNCS_IDX.fmx}.pickup`] = 'success';
    activeOrderConditions[`funcs.${WhOrder.FUNCS_IDX.kitter}.status`] = 'finished';
  }
  else if (whUser.func === 'packer')
  {
    activeOrderConditions.picklistDone = 'success';
  }

  const findActiveOrder = WhOrder
    .findOne(activeOrderConditions)
    .sort({group: 1, line: 1, startTime: 1})
    .lean()
    .session(session)
    .exec();

  const [assignedOrder, activeOrder] = await Promise.all([findAssignedOrder, findActiveOrder]);

  if (assignedOrder)
  {
    return await continueSet(app, module, {
      data: {assignedOrder, whUser},
      user,
      session
    });
  }

  if (activeOrder)
  {
    return await assignSet(app, module, {
      data: {
        activeOrder,
        whUser,
        downtimeReason,
        downtimeComment,
        personnelId
      },
      user,
      session
    });
  }

  return await startNewSet(app, module, {
    data: {
      date,
      whUser,
      downtimeReason,
      downtimeComment,
      personnelId
    },
    user,
    session
  });
};
