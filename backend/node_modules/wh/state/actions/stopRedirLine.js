// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const {ObjectId} = require('mongoose').Types;
const jsonDeepEqual = require('util/jsonDeepEqual');

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhLine: WhLine,
    OldWhOrder: WhOrder,
    OldWhSetCart: WhSetCart,
    OldWhDeliveredOrder: WhDeliveredOrder
  } = module;

  const linesResult = {
    added: [],
    updated: []
  };
  const deliveredOrdersResult = {
    added: [],
    updated: []
  };
  const setCartsResult = {
    updated: []
  };
  const ordersResult = {
    updated: []
  };

  const [sourceLine, targetLine] = await redirLines(String(data.sourceLine));

  await Promise.all([
    data.redirDelivered ? redirDeliveredOrders(sourceLine, targetLine) : null,
    redirSetCarts(sourceLine, targetLine),
    redirPickupOrders(sourceLine, targetLine)
  ]);

  const linesOps = [];
  const deliveredOrdersOps = [];
  const setCartsOps = [];
  const ordersOps = [];

  linesResult.added.forEach(document => linesOps.push({
    insertOne: {document}
  }));

  linesResult.updated.forEach(update => linesOps.push({
    updateOne: {
      filter: {_id: update._id},
      update: {$set: update}
    }
  }));

  deliveredOrdersResult.added.forEach(document => deliveredOrdersOps.push({
    insertOne: {document}
  }));

  deliveredOrdersResult.updated.forEach(update => deliveredOrdersOps.push({
    updateOne: {
      filter: {_id: update._id},
      update: {$set: update}
    }
  }));

  setCartsResult.updated.forEach(update => setCartsOps.push({
    updateOne: {
      filter: {_id: update._id},
      update: {$set: update}
    }
  }));

  ordersResult.updated.forEach(update => ordersOps.push({
    updateOne: {
      filter: {_id: update._id},
      update: {$set: update}
    }
  }));

  const [eventsResult] = await Promise.all([
    WhEvent.record({
      type: 'lineRedirStopped',
      user,
      time: new Date(),
      data: {
        lines: [sourceLine._id, targetLine._id],
        redirDelivered: !!data.redirDelivered
      }
    }, session),
    WhLine.collection.bulkWrite(linesOps, {session}),
    !deliveredOrdersOps.length ? null : WhDeliveredOrder.collection.bulkWrite(deliveredOrdersOps, {session}),
    !setCartsOps.length ? null : WhSetCart.collection.bulkWrite(setCartsOps, {session}),
    !ordersOps.length ? null : WhOrder.collection.bulkWrite(ordersOps, {session})
  ]);

  const [sourceLineResult, targetLineResult] = await Promise.all([
    WhLine.recount(sourceLine._id, true, true, session),
    WhLine.recount(targetLine._id, true, true, session)
  ]);

  if (linesResult.updated.length)
  {
    Object.assign(linesResult.updated[0], sourceLineResult.updated[0]);
  }
  else
  {
    linesResult.updated.push(sourceLineResult.updated[0]);
  }

  if (linesResult.added.length)
  {
    Object.assign(linesResult.added[0], targetLineResult.updated[0]);
  }
  else
  {
    linesResult.updated.push(targetLineResult.updated[0]);
  }

  await session.commitTransaction();

  return {
    response: {},
    results: [
      eventsResult
    ],
    messages: [
      {topic: `${WhDeliveredOrder.TOPIC_PREFIX}.updated`, message: deliveredOrdersResult},
      {topic: `${WhSetCart.TOPIC_PREFIX}.updated`, message: setCartsResult},
      {topic: `${WhOrder.TOPIC_PREFIX}.updated`, message: ordersResult},
      {topic: `${WhLine.TOPIC_PREFIX}.updated`, message: linesResult}
    ]
  };

  async function redirLines(sourceLineId)
  {
    await WhLine.lockLines([sourceLineId]);

    const sourceLine = await WhLine
      .findOne({_id: sourceLineId})
      .lean()
      .session(session)
      .exec();

    if (!sourceLine)
    {
      throw app.createError('Unknown source line.', 'UNKNOWN_SOURCE_LINE', 400);
    }

    if (!sourceLine.redirLine)
    {
      throw app.createError('Source line not redirected', 'LINE_NOT_REDIRECTED', 400);
    }

    await WhLine.lockLines([sourceLine.redirLine]);

    const targetLine = await WhLine
      .findOne({_id: sourceLine.redirLine})
      .lean()
      .session(session)
      .exec();

    if (!targetLine)
    {
      throw app.createError('Unknown target line.', 'UNKNOWN_TARGET_LINE', 400);
    }

    linesResult.updated.push({
      _id: sourceLine._id,
      redirLine: null
    });

    return [sourceLine, targetLine];
  }

  async function redirDeliveredOrders(sourceLine, targetLine)
  {
    const targetDeliveredOrders = await WhDeliveredOrder
      .find({
        line: targetLine._id,
        redirLine: sourceLine._id,
        status: {$in: ['todo', 'blocked']}
      })
      .lean()
      .session(session)
      .exec();

    targetDeliveredOrders.forEach(targetDeliveredOrder =>
    {
      if (targetDeliveredOrder.qtyDone === 0)
      {
        deliveredOrdersResult.updated.push({
          _id: targetDeliveredOrder._id,
          line: sourceLine._id,
          redirLine: null
        });
      }
      else
      {
        const sourceDeliveredOrder = new WhDeliveredOrder({
          ...targetDeliveredOrder,
          _id: new ObjectId(),
          qtyTodo: targetDeliveredOrder.qtyTodo - targetDeliveredOrder.qtyDone,
          qtyDone: 0,
          qtyRemaining: targetDeliveredOrder.qtyTodo - targetDeliveredOrder.qtyDone,
          line: sourceLine._id,
          redirLine: null
        });

        deliveredOrdersResult.added.push(sourceDeliveredOrder);

        deliveredOrdersResult.updated.push({
          _id: targetDeliveredOrder._id,
          status: 'done',
          qtyTodo: targetDeliveredOrder.qtyDone,
          qtyRemaining: 0
        });
      }
    });
  }

  async function redirSetCarts(sourceLine, targetLine)
  {
    const setCarts = await WhSetCart
      .find({
        status: {$in: ['completing', 'completed']},
        lines: targetLine._id,
        redirLines: sourceLine._id
      })
      .select({
        line: 1,
        lines: 1,
        redirLine: 1,
        redirLines: 1
      })
      .hint({status: 1, date: -1})
      .lean()
      .session(session)
      .exec();

    setCarts.forEach(setCart =>
    {
      if (setCart.lines.length === 1)
      {
        setCart.line = sourceLine._id;
        setCart.lines = [sourceLine._id];
        setCart.redirLine = null;
        setCart.redirLines = [];
      }
      else
      {
        const i = setCart.redirLines.findIndex(l => l === sourceLine._id);

        setCart.lines[i] = sourceLine._id;
        setCart.redirLines[i] = sourceLine._id;

        if (jsonDeepEqual(setCart.lines, setCart.redirLines))
        {
          setCart.redirLine = null;
          setCart.redirLines = [];
        }
      }

      setCartsResult.updated.push(setCart);
    });
  }

  async function redirPickupOrders(sourceLine, targetLine)
  {
    const orders = await WhOrder
      .find({
        distStatus: 'pending',
        'lines._id': targetLine._id,
        redirLines: sourceLine._id
      })
      .select({
        line: 1,
        lines: 1,
        redirLine: 1,
        redirLines: 1
      })
      .lean()
      .session(session)
      .exec();

    orders.forEach(order =>
    {
      if (order.lines.length === 1)
      {
        order.line = sourceLine._id;
        order.lines[0]._id = sourceLine._id;
        order.redirLine = null;
        order.redirLines = [];
      }
      else
      {
        const i = order.redirLines.findIndex(l => l === sourceLine._id);

        order.lines[i]._id = sourceLine._id;
        order.redirLines[i] = sourceLine._id;

        if (jsonDeepEqual(order.lines.map(l => l._id), order.redirLines))
        {
          order.redirLine = null;
          order.redirLines = [];
        }
      }

      ordersResult.updated.push(order);
    });
  }
};
