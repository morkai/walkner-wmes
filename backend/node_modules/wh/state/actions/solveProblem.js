// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.detached = true;

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhOrder: WhOrder,
    OldWhSetCart: WhSetCart,
    OldWhLine: WhLine
  } = module;

  const whOrder = await WhOrder.findById(data.whOrderId).session(session).exec();

  if (!whOrder)
  {
    throw app.createError(`Order not found.`, 'INPUT', 400);
  }

  if (whOrder.status !== 'problem')
  {
    throw app.createError('Invalid order status.', 'STATE', 400);
  }

  if (data.funcId === 'lp10')
  {
    if (whOrder.picklistDone !== 'failure')
    {
      throw app.createError('Invalid picklist status.', 'STATE', 400);
    }

    whOrder.status = 'pending';
    whOrder.picklistDone = 'success';
    whOrder.picklistFunc = null;
    whOrder.set = null;

    whOrder.funcs.forEach(func =>
    {
      func.status = 'pending';
      func.user = null;
      func.startedAt = null;
    });
  }
  else
  {
    if (!Array.isArray(data.carts) || !data.carts.length)
    {
      throw app.createError('Invalid carts.', 'INPUT', 400);
    }

    const func = whOrder.funcs.find(f => f._id === data.funcId);

    if (!func)
    {
      throw app.createError(`Function not found.`, 'INPUT', 400);
    }

    func.status = 'finished';
    func.pickup = 'success';
    func.carts = data.carts;
    func.finishedAt = new Date();
    func.problemArea = '';
    func.comment = '';

    whOrder.finalizeOrder();
  }

  const [setCartsResults] = await Promise.all([
    data.funcId === 'lp10' ? null : WhSetCart.updateByFunc(whOrder, data.funcId),
    whOrder.save()
  ]);

  const event = {
    type: 'problemSolved',
    time: new Date(),
    user,
    data: {
      func: data.funcId,
      orders: WhEvent.orders([whOrder]),
      lines: WhEvent.lines(whOrder),
      setCarts: WhEvent.setCarts(setCartsResults, whOrder)
    }
  };

  const [lineResults, setResults, eventsResults] = await Promise.all([
    WhLine.recountPickup(whOrder.lineId, session),
    whOrder.finalizeSet(setCartsResults),
    WhEvent.record(event, session)
  ]);

  await session.commitTransaction();

  return {
    results: [
      eventsResults,
      setCartsResults,
      lineResults,
      setResults
    ],
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: [whOrder.toJSON()]}
    }]
  };
};
