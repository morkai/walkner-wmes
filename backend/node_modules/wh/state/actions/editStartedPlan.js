// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const shifts = require('util/shifts');

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhLine: WhLine,
    OldWhEvent: WhEvent
  } = module;

  if (typeof data.line !== 'string' || data.line.length > 50)
  {
    throw app.createError('Invalid line.', 'INPUT', 400);
  }

  const newStartedPlan = moment.utc(data.newValue, 'YYYY-MM-DD');

  if (!newStartedPlan.isValid())
  {
    throw app.createError('Invalid date format.', 'INPUT', 400);
  }

  const currentPlan = shifts.getCurrentDate(true);

  if (newStartedPlan.isBefore(currentPlan))
  {
    throw app.createError('Date must be at least equal to the current day.', 'INPUT', 400);
  }

  await WhLine.lockLines([data.line]);

  const whLine = await WhLine
    .findById(data.line)
    .select({_id: 1, startedPlan: 1})
    .lean()
    .session(session)
    .exec();

  if (!whLine)
  {
    throw app.createError('Line not found.', 'INPUT', 400);
  }

  const event = {
    type: 'startedPlanEdited',
    user,
    time: new Date(),
    data: {
      lines: [whLine._id],
      oldStartedPlan: whLine.startedPlan,
      newStartedPlan: newStartedPlan.toDate()
    }
  };

  if (data.whUser)
  {
    event.data.whUser = WhEvent.whUser(data.whUser);
  }

  const [eventsResult] = await Promise.all([
    WhEvent.record(event, session),
    WhLine.collection.updateOne(
      {_id: whLine._id},
      {$set: {startedPlan: event.data.newStartedPlan}},
      {session}
    )
  ]);

  await session.commitTransaction();

  return {
    response: {
      line: whLine._id,
      oldStartedPlan: event.data.oldStartedPlan,
      newStartedPlan: event.data.newStartedPlan
    },
    results: [eventsResult],
    messages: [{
      topic: `${WhLine.TOPIC_PREFIX}.updated`,
      message: {updated: [{
        _id: whLine._id,
        startedPlan: event.data.newStartedPlan
      }]}
    }]
  };
};
