// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhOrder: WhOrder,
    OldWhEvent: WhEvent,
    OldWhSetCart: WhSetCart,
    OldWhLine: WhLine
  } = module;

  const whOrder = await WhOrder
    .findById(data.whOrderId)
    .session(session)
    .exec();

  if (!whOrder)
  {
    throw app.createError(`Order not found.`, 'ORDER_NOT_FOUND', 400);
  }

  const newValue = data.newValue;
  const oldValue = whOrder.picklistDone;
  const oldStatus = whOrder.status;

  whOrder.picklistDone = newValue;
  whOrder.distStatus = 'pending';
  whOrder.fifoStatus = 'pending';
  whOrder.packStatus = 'pending';

  if (newValue === 'failure')
  {
    whOrder.status = 'problem';
    whOrder.problem = '';
  }
  else
  {
    whOrder.status = 'started';
    whOrder.problem = '';
  }

  let picklistFunc = null;

  whOrder.funcs.forEach(func =>
  {
    if (whOrder.picklistFunc === func._id)
    {
      picklistFunc = func;
    }

    if (newValue === 'success')
    {
      if (picklistFunc === func)
      {
        func.status = 'picklist';
        func.startedAt = new Date();
      }
      else if (func.user)
      {
        func.status = 'picklist';
      }
    }
    else if (picklistFunc === func)
    {
      func.status = 'picklist';
    }
    else
    {
      func.status = 'pending';
      func.startedAt = null;
    }

    func.finishedAt = null;
    func.picklist = 'pending';
    func.pickup = 'pending';
    func.carts = [];
    func.problemArea = '';
  });

  const event = {
    type: 'picklistDone',
    user,
    time: new Date(),
    data: {
      func: picklistFunc && picklistFunc._id || null,
      oldValue,
      newValue,
      whUser: picklistFunc && picklistFunc.user || null,
      orders: WhEvent.orders([whOrder]),
      lines: WhEvent.lines(whOrder)
    }
  };

  const [setCartsResults, eventsResults] = await Promise.all([
    WhSetCart.deleteByWhOrder(whOrder),
    WhEvent.record(event, session),
    whOrder.save()
  ]);

  const [lineResults, setResults] = await Promise.all([
    whOrder.status === 'problem' || oldStatus === 'problem' ? WhLine.recountPickupByWhOrder(whOrder) : null,
    whOrder.finalizeSet(setCartsResults)
  ]);

  await session.commitTransaction();

  const leanWhOrder = whOrder.toJSON();

  return {
    response: {
      order: leanWhOrder
    },
    results: [
      setCartsResults,
      eventsResults,
      lineResults,
      setResults
    ],
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: [leanWhOrder]}
    }]
  };
};
