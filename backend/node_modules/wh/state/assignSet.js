// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = async (app, module, {data, user, session}) =>
{
  const {
    OldWhOrder: WhOrder,
    OldWhEvent: WhEvent
  } = module;

  const {whUser, activeOrder} = data;

  const whOrders = await WhOrder
    .find({
      date: activeOrder.date,
      set: activeOrder.set
    })
    .sort({startTime: 1})
    .lean()
    .session(session)
    .exec();

  const $set = {};

  whOrders.forEach(whOrder =>
  {
    $set.users = whOrder.users = whOrder.users.concat([whUser._id]);

    const func = whOrder.funcs.find(f => f._id === whUser.func);
    const funcI = whOrder.funcs.indexOf(func);

    $set[`funcs.${funcI}.user`] = func.user = {id: whUser._id, label: whUser.label};
    $set[`funcs.${funcI}.startedAt`] = func.startedAt = new Date();
    $set[`funcs.${funcI}.status`] = func.status = 'picklist';
  });

  await WhOrder.collection.updateMany({_id: {$in: whOrders.map(o => o._id)}}, {$set}, {session});

  const {messages} = await WhEvent.record(whOrders.map(o => ({
    type: 'assignedToSet',
    user,
    time: new Date(),
    order: o._id,
    data: {
      set: o.set,
      user: whUser
    }
  })));

  await session.commitTransaction();

  messages.push({
    topic: `${WhOrder.TOPIC_PREFIX}.updated`,
    message: {updated: whOrders}
  });

  setImmediate(async () =>
  {
    try
    {
      await module.state.printLabels(whOrders, 1, whUser.func);
    }
    catch (err)
    {
      module.error(err, `Failed to print labels after set assignment.`);
    }
  });

  return {
    response: {
      result: 'assignedToSet',
      orders: whOrders,
      user: whUser
    },
    messages
  };
};
