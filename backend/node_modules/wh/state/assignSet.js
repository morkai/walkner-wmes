// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = async (app, module, {data, user, session}) =>
{
  const {
    OldWhOrder: WhOrder,
    OldWhEvent: WhEvent,
    OldWhDowntime: WhDowntime,
    OldWhUser: WhUser
  } = module;

  const now = new Date();
  const {
    whUser,
    activeOrder,
    downtimeReason,
    downtimeComment,
    personnelId
  } = data;
  const minDowntimeDuration = (module.state.settings.minPickupDowntime || 120) * 1000;
  const downtime = whUser.lastPickupAt && (now.getTime() - whUser.lastPickupAt.getTime() > minDowntimeDuration);

  if (downtime && !downtimeReason)
  {
    return {
      response: {
        result: 'pickDowntimeReason',
        startedAt: whUser.lastPickupAt,
        personnelId,
        user: whUser
      }
    };
  }

  const whOrders = await WhOrder
    .find({
      date: activeOrder.date,
      set: activeOrder.set
    })
    .sort({startTime: 1})
    .lean()
    .session(session)
    .exec();

  const $set = {};
  const $in = [];
  const events = [];

  whOrders.forEach(whOrder =>
  {
    $in.push(whOrder._id);

    $set.users = whOrder.users = whOrder.users.concat([whUser._id]);

    const func = whOrder.funcs.find(f => f._id === whUser.func);
    const funcI = whOrder.funcs.indexOf(func);

    $set[`funcs.${funcI}.user`] = func.user = {id: whUser._id, label: whUser.label};
    $set[`funcs.${funcI}.startedAt`] = func.startedAt = new Date();
    $set[`funcs.${funcI}.status`] = func.status = 'picklist';

    events.push({
      type: 'assignedToSet',
      user,
      time: now,
      order: whOrder._id,
      data: {
        set: whOrder.set,
        user: whUser
      }
    });
  });

  const [eventsResults, downtimeResults] = await Promise.all([
    WhEvent.record(events),
    WhDowntime.createDowntime({
      reason: downtimeReason,
      startedAt: whUser.lastPickupAt,
      user: {id: whUser._id, label: whUser.label},
      comment: downtimeComment,
      session
    }),
    WhUser.collection.updateOne({_id: whUser._id}, {$set: {lastPickupAt: now}}, {session}),
    WhOrder.collection.updateMany({_id: {$in}}, {$set}, {session})
  ]);

  await session.commitTransaction();

  setImmediate(async () =>
  {
    try
    {
      await module.state.printLabels(whOrders, 1, whUser.func);
    }
    catch (err)
    {
      module.error(err, `Failed to print labels after set assignment.`);
    }
  });

  return {
    response: {
      result: 'assignedToSet',
      orders: whOrders,
      user: whUser
    },
    messages: [...eventsResults.messages, ...downtimeResults.messages, {
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: whOrders}
    }]
  };
};
