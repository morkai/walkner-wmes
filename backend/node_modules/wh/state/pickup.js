// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhOrder: WhOrder,
    OldWhUser: WhUser,
    OldWhSetCart: WhSetCart,
    OldWhLine: WhLine
  } = module;

  const whOrder = await WhOrder.findById(data.whOrderId).session(session).exec();

  if (!whOrder)
  {
    throw app.createError(`Order not found.`, 'INPUT', 400);
  }

  const func = whOrder.funcs.find(f => f._id === data.funcId);

  if (!func)
  {
    throw app.createError(`Function not found.`, 'INPUT', 400);
  }

  const now = new Date();
  const newValue = data.newValue;
  const oldValue = func.pickup;
  const event = {
    type: 'pickup',
    user,
    time: now,
    data: {
      func: func._id,
      oldValue,
      newValue,
      whUser: func.user,
      orders: WhEvent.orders([whOrder]),
      lines: WhEvent.lines(whOrder),
      setCarts: null,
      problemArea: null,
      comment: null
    }
  };

  switch (newValue)
  {
    case 'pending':
    {
      func.status = 'pickup';
      func.pickup = newValue;
      func.carts = [];
      func.problemArea = '';
      func.comment = '';
      func.finishedAt = null;

      break;
    }

    case 'success':
    {
      const carts = !Array.isArray(data.carts) ? [] : data.carts.filter(v => typeof v === 'number');

      if (!carts.length)
      {
        throw app.createError('Invalid carts.', 'INPUT', 400);
      }

      func.status = 'finished';
      func.pickup = newValue;
      func.carts = carts;
      func.problemArea = '';
      func.comment = '';
      func.finishedAt = now;

      break;
    }

    case 'failure':
    {
      if (typeof data.problemArea !== 'string' || !data.problemArea.length)
      {
        throw app.createError('Invalid problem area.', 'INPUT', 400);
      }

      if (typeof data.comment !== 'string')
      {
        throw app.createError('Invalid comment.', 'INPUT', 400);
      }

      func.status = 'problem';
      func.pickup = newValue;
      func.carts = [];
      func.problemArea = data.problemArea;
      func.comment = data.comment;
      func.finishedAt = now;

      event.data.problemArea = data.problemArea;
      event.data.comment = data.comment;

      break;
    }

    default:
      throw app.createError(`Invalid picklist status.`, 'INPUT', 400);
  }

  const oldStatus = whOrder.status;

  whOrder.finalizeOrder();

  const [setCartsResults] = await Promise.all([
    WhSetCart.updateByFunc(whOrder, func._id),
    func.user && (newValue === 'success' || newValue === 'failure')
      ? WhUser.collection.updateOne({_id: func.user.id}, {$set: {lastPickupAt: now}}, {session})
      : null,
    whOrder.save()
  ]);

  event.data.setCarts = WhEvent.setCarts(setCartsResults, whOrder);

  const [lineResults, setResults, eventsResults] = await Promise.all([
    whOrder.status === 'problem' || oldStatus === 'problem' ? WhLine.recountPickupByWhOrder(whOrder) : null,
    whOrder.finalizeSet(setCartsResults),
    WhEvent.record(event, session)
  ]);

  await session.commitTransaction();

  const leanWhOrder = whOrder.toJSON();

  return {
    response: {
      order: leanWhOrder
    },
    results: [
      setCartsResults,
      eventsResults,
      lineResults,
      setResults
    ],
    messages: [{
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: [leanWhOrder]}
    }]
  };
};
