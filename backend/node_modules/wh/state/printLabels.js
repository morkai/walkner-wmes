// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const fs = require('fs');
const step = require('h5.step');
const moment = require('moment');

module.exports = async (app, module, whOrders, labelQty, userFunc) =>
{
  const {
    settings,
    html2pdf,
    Printer,
    Order,
    OldWhOrder: WhOrder
  } = module;

  return new Promise((resolve, reject) =>
  {
    if (!WhOrder.FUNCS.includes(userFunc))
    {
      return reject(app.createError(`Unknown user function.`, 'PRINT_FAILURE'));
    }

    step(
      function()
      {
        fs.readFile(`${__dirname}/../templates/label.tpl.prn`, 'utf8', this.parallel());

        Printer
          .findOne({tags: `wh/cart/${userFunc}`})
          .lean()
          .exec(this.parallel());

        Order
          .find({_id: {$in: whOrders.map(o => o.order)}})
          .select({nc12: 1, qty: 1})
          .lean()
          .exec(this.parallel());

        settings.findById('wh.printing.barcodeData', this.parallel());
      },
      function(err, template, printer, sapOrders, barcodeDataSetting)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to find print data: ${err.message}`,
            'PRINT_FAILURE'
          ));
        }

        if (!printer)
        {
          return this.skip(app.createError(`No wh/cart/${userFunc} printer!`, 'PRINT_FAILURE'));
        }

        const barcodeData = barcodeDataSetting ? barcodeDataSetting.value : '12nc';
        const zpl = whOrders.map(whOrder =>
        {
          const sapOrder = sapOrders.find(o => o._id === whOrder.order) || {
            nc12: '000000000000',
            qty: 0
          };

          return compileZpl(template, barcodeData, {
            labelQty,
            time: moment.utc(whOrder.startTime).format('DD.MM.YYYY, HH:mm'),
            line: whOrder.line,
            order: whOrder.order,
            nc12: sapOrder.nc12,
            qtyPlan: whOrder.qty,
            qtyTodo: sapOrder.qty
          });
        });

        html2pdf.printZpl(zpl.join('\r\n'), {printer}, this.next());
      },
      function(err)
      {
        if (err)
        {
          return this.skip(app.createError(
            `Failed to print labels: ${err.message}`,
            'PRINT_FAILURE'
          ));
        }
      },
      function(err)
      {
        if (err)
        {
          return reject(err);
        }

        resolve();
      }
    );
  });
};

function compileZpl(zpl, barcodeData, data)
{
  const qtyPlan = Math.max(1, Math.min(data.qtyPlan, 9999)).toString();
  const templateData = {
    DLE: '\u0010',
    TIME: data.time,
    LINE: e(data.line),
    ORDER_NO: data.order,
    NC12: data.nc12,
    QTY_PLAN: qtyPlan,
    QTY_TODO: data.qtyTodo,
    BARCODE_X: 0,
    BARCODE_DATA: '',
    LABEL_QTY: data.labelQty
  };

  encodeBarcodeData(templateData, barcodeData === 'orderNo' ? data.order : data.nc12, qtyPlan);

  Object.keys(templateData).forEach(key =>
  {
    zpl = zpl.replace(new RegExp('\\$\\{' + key + '\\}', 'g'), templateData[key]);
  });

  return zpl;
}

function encodeBarcodeData(templateData, id, qty)
{
  let barcodeX = [];
  let barcodeData = '>';

  if (id.length === 9)
  {
    barcodeX = [0, 170, 140, 110, 110];
    barcodeData += `;${id.substring(0, 8)}>7${encodeCodeC(id.substring(8, 9))}`;
  }
  else if (id.length === 7)
  {
    barcodeX = [0, 102, 75, 45, 45];
    barcodeData += `:${id}>7`;
  }
  else if (id.length === 12)
  {
    barcodeX = [0, 140, 110, 80, 80];
    barcodeData += `;${id}>7`;
  }
  else
  {
    templateData.BARCODE_X = 192;
    templateData.BARCODE_DATA = '>:?>7737373>6?';

    return templateData;
  }

  barcodeData += `737373`;

  if (qty.length === 4)
  {
    barcodeData += `>5${qty}`;
  }
  else
  {
    barcodeData += encodeCodeC(qty);
  }

  templateData.BARCODE_X = barcodeX[qty.length];
  templateData.BARCODE_DATA = barcodeData;

  return templateData;
}

function encodeCodeC(n)
{
  return n.toString().split('').map(s => (parseInt(s, 10) + 16).toString()).join('');
}

function e(v)
{
  return (v || '').replace('~', '\\7e');
}
