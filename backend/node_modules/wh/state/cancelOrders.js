// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhOrder: WhOrder,
    OldWhSetCart: WhSetCart
  } = module;

  const conditions = {
    status: {$ne: 'cancelled'}
  };

  if (data.orders)
  {
    conditions._id = {$in: data.orders};
  }
  else
  {
    conditions.set = data.set;
    conditions.date = data.date;
  }

  const whOrders = await WhOrder
    .find(conditions)
    .session(session)
    .exec();

  if (!whOrders.length)
  {
    return;
  }

  const time = new Date();
  const $set = {
    status: 'cancelled',
    finishedAt: time
  };
  const events = [];

  for (const whOrder of whOrders)
  {
    Object.assign(whOrder, $set);

    events.push({
      type: 'orderCancelled',
      time,
      user,
      order: whOrder._id,
      data: {
        date: data.date,
        orders: data.orders || null,
        set: data.set || null
      }
    });
  }

  const [eventsResults] = await Promise.all([
    WhEvent.record(events, session),
    WhOrder.collection.updateMany({_id: {$in: whOrders.map(o => o._id)}}, {$set}, {session})
  ]);

  const messages = [...eventsResults.messages, {
    topic: `${WhOrder.TOPIC_PREFIX}.updated`,
    message: {updated: whOrders}
  }];

  await session.commitTransaction();

  return {
    response: {
      orders: whOrders
    },
    messages
  };
};
