// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const continueOrder = require('./continueOrder');
const assignSet = require('./assignSet');
const startNewSet = require('./startNewSet');

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    User,
    OldWhUser: WhUser,
    OldWhOrder: WhOrder
  } = module;

  let whUserId = data.whUserId;

  if (!whUserId)
  {
    const personnelUser = await User
      .findOne({
        $or: [
          {personellId: data.personnelId},
          {card: data.personnelId},
          {cardUid: data.personnelId}
        ]
      })
      .select({_id: 1})
      .lean()
      .session(session)
      .exec();

    if (!personnelUser)
    {
      throw app.createError('User not found.', 'USER_NOT_FOUND', 400);
    }

    whUserId = personnelUser._id.toString();
  }

  const whUser = await WhUser
    .findById(whUserId)
    .lean()
    .session(session)
    .exec();

  if (!whUser)
  {
    throw app.createError('WH user not found.', 'USER_NOT_FOUND', 400);
  }

  const funcIndex = WhOrder.FUNCS.indexOf(whUser.func);

  const findAssignedOrder = WhOrder
    .findOne({
      date: data.date,
      status: 'started',
      [`funcs.${funcIndex}.user.id`]: whUser._id,
      [`funcs.${funcIndex}.status`]: {$nin: ['problem', 'finished']}
    })
    .sort({group: 1, line: 1, startTime: 1})
    .lean()
    .session(session)
    .exec();

  const findActiveOrder = WhOrder
    .findOne({
      date: data.date,
      status: 'started',
      [`funcs.${funcIndex}.user`]: {$type: 'null'}
    })
    .sort({group: 1, line: 1, startTime: 1})
    .lean()
    .session(session)
    .exec();

  const [assignedOrder, activeOrder] = await Promise.all([findAssignedOrder, findActiveOrder]);

  if (assignedOrder)
  {
    return await continueOrder(app, module, {
      data: {assignedOrder, whUser},
      user,
      session
    });
  }

  if (activeOrder)
  {
    return await assignSet(app, module, {
      data: {
        activeOrder,
        whUser,
        downtimeReason: data.downtimeReason,
        downtimeComment: data.downtimeComment,
        personnelId: data.personnelId
      },
      user,
      session
    });
  }

  return await startNewSet(app, module, {
    data: {
      date: data.date,
      whUser,
      downtimeReason: data.downtimeReason,
      downtimeComment: data.downtimeComment,
      personnelId: data.personnelId
    },
    user,
    session
  });
};
