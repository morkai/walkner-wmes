// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhOrder: WhOrder,
    OldWhSetCart: WhSetCart
  } = module;

  const conditions = {};

  if (data.orders)
  {
    conditions._id = {$in: data.orders};
  }
  else
  {
    conditions.set = data.set;
    conditions.date = data.date;
  }

  const whOrders = await WhOrder
    .find(conditions)
    .session(session)
    .exec();

  if (!whOrders.length)
  {
    return {response: {orders: whOrders}};
  }

  const $set = {
    status: 'pending',
    problem: '',
    set: null,
    startedAt: null,
    finishedAt: null,
    picklistFunc: null,
    picklistDone: null,
    users: [],
    funcs: whOrders[0].funcs.map(func =>
    {
      return {
        _id: func._id,
        user: null,
        startedAt: null,
        finishedAt: null,
        status: 'pending',
        picklist: 'pending',
        pickup: 'pending',
        carts: [],
        problemArea: '',
        comment: ''
      };
    })
  };
  const events = [];
  const time = new Date();

  for (const whOrder of whOrders)
  {
    Object.assign(whOrder, $set);

    events.push({
      type: 'orderReset',
      time,
      user,
      order: whOrder._id,
      data: {
        date: data.date,
        orders: data.orders || null,
        set: data.set || null
      }
    });
  }

  const [eventsResults] = await Promise.all([
    WhEvent.record(events, session),
    WhOrder.collection.updateMany({_id: {$in: whOrders.map(o => o._id)}}, {$set}, {session})
  ]);

  let messages = [...eventsResults.messages, {
    topic: `${WhOrder.TOPIC_PREFIX}.updated`,
    message: {updated: whOrders}
  }];

  if (data.orders)
  {
    for (const whOrder of whOrders)
    {
      const setCartsResults = await WhSetCart.deleteByWhOrder(whOrder);

      messages = [...messages, ...setCartsResults.messages];
    }
  }
  else
  {
    const setCartsResults = await WhSetCart.deleteBySet(data.date, data.set, session);

    messages = [...messages, ...setCartsResults.messages];
  }

  await session.commitTransaction();

  return {
    response: {
      orders: whOrders
    },
    messages
  };
};
