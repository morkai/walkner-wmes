'use strict';

const locks = require('util/locks');

module.exports = async (app, module, serialNumber) =>
{
  const {
    OldWhLine: WhLine,
    OldWhDeliveredOrder: WhDeliveredOrder
  } = module;

  const releaseLock = await locks.createAsync(`${WhLine.TOPIC_PREFIX}.${serialNumber.prodLine}`);

  let session = null;

  try
  {
    session = await WhLine.startSession();
    session.startTransaction();

    let whDeliveredOrder = null;
    let whLine = null;

    const deliveredOrderResult = await WhDeliveredOrder.collection.findOneAndUpdate(
      {
        sapOrder: serialNumber.orderNo,
        line: serialNumber.prodLine,
        qtyRemaining: {$gt: 0}
      },
      {$inc: {
        qtyDone: 1,
        qtyRemaining: -1
      }},
      {
        projection: {
          qtyDone: 1,
          qtyRemaining: 1,
          pceTime: 1,
          line: 1
        },
        sort: {startTime: 1},
        returnOriginal: false,
        session
      }
    );

    whDeliveredOrder = deliveredOrderResult.value;

    if (whDeliveredOrder)
    {
      const lineResult = await WhLine.collection.findOneAndUpdate(
        {_id: serialNumber.prodLine},
        {$inc: {
          'components.qty': -1,
          'components.time': deliveredOrderResult.value.pceTime * -1
        }},
        {
          projection: {
            components: 1
          },
          returnOriginal: false,
          session
        }
      );

      whLine = lineResult.value;
    }

    await session.commitTransaction();

    if (whDeliveredOrder)
    {
      app.broker.publish(`${WhDeliveredOrder.TOPIC_PREFIX}.updated`, {
        updated: [whDeliveredOrder]
      });
    }

    if (whLine)
    {
      app.broker.publish(`${WhLine.TOPIC_PREFIX}.updated`, {
        updated: [whLine]
      });
    }
  }
  catch (err)
  {
    await module.state.abortTransaction(session);

    module.error(err, `Failed to update line after SN check.`, {serialNumber});

    module.state.scheduleLineRecount(serialNumber.prodLine);
  }

  if (session)
  {
    session.endSession();
  }

  releaseLock();
};
