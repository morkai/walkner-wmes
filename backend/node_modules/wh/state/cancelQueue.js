// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {
    OldWhOrder: WhOrder,
    OldWhCancelQueue: WhCancelQueue
  } = module;

  let hasMore = false;
  let inProgress = false;

  app.broker.subscribe(`app.started`, cancelNext);
  app.broker.subscribe(`${WhCancelQueue.TOPIC_PREFIX}.updated`, message =>
  {
    if (message.added && message.added.length)
    {
      cancelNext();
    }
  });

  async function cancelNext()
  {
    if (inProgress)
    {
      hasMore = true;

      return;
    }

    inProgress = true;

    try
    {
      const ordersToCancel = await WhCancelQueue
        .find({})
        .limit(2)
        .exec();

      if (!ordersToCancel.length)
      {
        return;
      }

      if (ordersToCancel.length === 2)
      {
        hasMore = true;
      }

      await cancelSapOrder(ordersToCancel[0]._id);

      await WhCancelQueue.collection.deleteOne({_id: ordersToCancel[0]._id});
    }
    catch (err)
    {
      module.error(err, 'Failed to handle cancel queue.');
    }
    finally
    {
      inProgress = false;

      if (hasMore)
      {
        hasMore = false;

        setImmediate(cancelNext);
      }
    }
  }

  async function cancelSapOrder(sapOrder)
  {
    const whOrders = await WhOrder
      .find({
        order: sapOrder,
        status: {$ne: 'cancelled'},
        distStatus: 'pending'
      })
      .select({_id: 1, order: 1})
      .hint({order: 1})
      .lean()
      .exec();

    for (const whOrder of whOrders)
    {
      await cancelWhOrder({
        action: 'resetOrders',
        data: {
          cancel: true,
          orders: [whOrder._id]
        }
      });
    }
  }

  function cancelWhOrder(input)
  {
    return new Promise((resolve, reject) =>
    {
      module.state.act(input, (err, result) =>
      {
        if (err)
        {
          reject(err);
        }
        else
        {
          resolve(result);
        }
      });
    });
  }
};
