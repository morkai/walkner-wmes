// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.session = true;

exports.execute = async (app, module, {data, user, session}) =>
{
  const {
    OldWhEvent: WhEvent,
    OldWhOrder: WhOrder,
    OldWhSetCart: WhSetCart
  } = module;

  const whOrder = await WhOrder.findById(data.whOrderId).session(session).exec();

  if (!whOrder)
  {
    throw app.createError(`Order not found.`, 'INPUT', 400);
  }

  const func = whOrder.funcs.find(f => f._id === data.funcId);

  if (!func)
  {
    throw app.createError(`Function not found.`, 'INPUT', 400);
  }

  const newValue = data.newValue;
  const oldValue = func.picklist;

  func.picklist = newValue;
  func.carts = [];
  func.problemArea = '';
  func.comment = '';
  func.finishedAt = null;

  switch (newValue)
  {
    case 'pending':
      func.status = 'picklist';
      func.pickup = 'pending';

      whOrder.finalize();
      break;

    case 'require':
      func.status = 'pickup';
      func.pickup = 'pending';
      break;

    case 'ignore':
      func.status = 'finished';
      func.pickup = 'ignore';
      func.finishedAt = new Date();

      whOrder.finalize();
      break;

    default:
      throw app.createError(`Invalid picklist status.`, 'INPUT', 400);
  }

  const events = [{
    type: 'picklist',
    user,
    time: new Date(),
    order: whOrder._id,
    data: {
      oldValue,
      newValue,
      func: func._id,
      user: func.user
    }
  }];

  const [setCartsResults, eventsResults] = await Promise.all([
    WhSetCart.updateByFunc(whOrder, func._id),
    WhEvent.record(events, session),
    whOrder.save()
  ]);

  await session.commitTransaction();

  const leanWhOrder = whOrder.toJSON();

  return {
    response: {
      order: leanWhOrder
    },
    messages: [...setCartsResults.messages, ...eventsResults.messages, {
      topic: `${WhOrder.TOPIC_PREFIX}.updated`,
      message: {updated: [leanWhOrder]}
    }]
  };
};
