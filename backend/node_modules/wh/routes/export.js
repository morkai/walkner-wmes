// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const dateFormatter = require('util/dateFormatter');

module.exports = (app, module, req, res, next) =>
{
  const {
    express,
    OldWhEvent: WhEvent
  } = module;

  req.rql.sort = {time: 1};

  express.crud.exportRoute(app, {
    filename: 'WMES_WH_EVENTS',
    freezeRows: 1,
    freezeColumns: 2,
    columns: {
      time: 'datetime',
      type: 20,
      user: 20,
      whman: 20,
      func: 10,
      oldStatus: 10,
      newStatus: 10,
      lines: 10,
      orders: 10,
      carts: 10,
      dlvKind: 10,
      sets: 10,
      qty: 10,
      problemArea: 10,
      oldStartedPlan: 'date+utc',
      newStartedPlan: 'date+utc',
      duration: 'integer',
      redirDelivered: 10,
      redirReason: 10
    },
    model: WhEvent,
    serializeRow
  }, req, res, next);

  function serializeRow(doc)
  {
    const {data} = doc;
    const sets = new Set();
    const orders = new Set();

    if (Array.isArray(data.orders))
    {
      data.orders.forEach(order =>
      {
        if (order.sapOrder)
        {
          sets.add(`${dateFormatter.formatDateUtc(order.date)}-${order.set || '?'}`);
          orders.add(order.sapOrder);
        }
      });
    }

    let oldStatus = data.oldValue || '';
    let newStatus = data.newValue || '';
    let qty = data.qty || '';

    if (doc.type === 'deliveredOrderEdited')
    {
      if (data.oldDeliveredOrder.status)
      {
        oldStatus = data.oldDeliveredOrder.status;
      }

      if (data.newDeliveredOrder.status)
      {
        newStatus = data.newDeliveredOrder.status;
      }

      if (typeof data.newDeliveredOrder.qtyDone === 'number')
      {
        qty = data.oldDeliveredOrder.qtyDone + '/' + data.oldDeliveredOrder.qtyTodo
          + ' ➜ '
          + data.newDeliveredOrder.qtyDone + '/' + data.newDeliveredOrder.qtyTodo;
      }
    }
    else if (data.type === 'deliveredOrderRedired')
    {
      qty = '';

      if (data.sourceQtyTodo)
      {
        qty += data.sourceQtyDone + '/' + data.sourceQtyTodo + ' ➜ ';
      }

      qty += data.targetQtyDone + '/' + data.targetQtyTodo;
    }

    return {
      time: doc.time,
      type: doc.type,
      user: doc.user ? doc.user.label : '',
      whman: data.whUser ? data.whUser.label : '',
      func: data.func || (data.whUser && data.whUser.func) || '',
      oldStatus,
      newStatus,
      lines: Array.isArray(data.lines) && data.lines.length ? `${data.lines.join(';')};` : '',
      orders: orders.size ? `${Array.from(orders).join(';')};` : '',
      carts: Array.isArray(data.setCarts) && data.setCarts.length ? `${data.setCarts.map(c => c.cart).join(';')};` : '',
      dlvKind: data.kind || '',
      sets: sets.size ? `${Array.from(sets).join(';')};` : '',
      qty,
      problemArea: data.problemArea || '',
      oldStartedPlan: data.oldStartedPlan,
      newStartedPlan: data.newStartedPlan,
      duration: data.duration ? Math.ceil(data.duration / 1000) : null,
      redirDelivered: typeof data.redirDelivered === 'boolean' ? (data.redirDelivered ? '1' : '0') : '',
      redirReason: data.redirReason && data.redirReason.label || ''
    };
  }
};
