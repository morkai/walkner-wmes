// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');

module.exports = (app, module) =>
{
  const {
    updater,
    settings,
    express,
    user,
    WhEvent,
    WhOrder,
    WhUser
  } = module;

  const canView = user.auth('LOCAL', 'WH:VIEW');
  const canUpdate = user.auth('LOCAL', 'WH:VIEW');
  const canManage = user.auth('WH:MANAGE', 'WH:MANAGE:USERS');

  // Apps
  ['wh-pickup', 'wh-problems', 'wh-kitter', 'wh-packer'].forEach(appId =>
  {
    express.get(`/${appId}`, canView, (req, res) =>
    {
      res.format({
        'text/html': function()
        {
          res.render('index', updater.getAppTemplateData(appId, req));
        }
      });
    });
  });

  // Settings
  express.get('/wh/settings', canView, settings.browseRoute('wh'));
  express.put('/wh/settings/:id', canManage, settings.updateRoute);

  // Plans
  express.post('/wh/plans/:id;generate', canManage, generateRoute);
  express.post('/wh/plans/:id;act', canUpdate, actRoute);

  // Events
  express.get(
    '/wh/events',
    canView,
    express.crud.browseRoute.bind(null, app, WhEvent)
  );

  // Orders
  express.get(
    '/wh/orders',
    canView,
    prepareCurrentDate,
    express.crud.browseRoute.bind(null, app, WhOrder)
  );
  express.get('/wh/orders/:id', canView, express.crud.readRoute.bind(null, app, WhOrder));

  // Users
  express.get('/wh/users', canView, express.crud.browseRoute.bind(null, app, WhUser));
  express.post('/wh/users', canManage, express.crud.addRoute.bind(null, app, WhUser));
  express.get('/wh/users/:id', canView, express.crud.readRoute.bind(null, app, WhUser));
  express.put('/wh/users/:id', canManage, express.crud.editRoute.bind(null, app, WhUser));
  express.delete('/wh/users/:id', canManage, express.crud.deleteRoute.bind(null, app, WhUser));

  function prepareCurrentDate(req, res, next)
  {
    req.rql.selector.args.forEach(function(term)
    {
      if (term.name !== 'eq' || term.args[0] !== 'date')
      {
        return;
      }

      const date = term.args[1];

      if (date === 'current')
      {
        const m = moment();

        if (m.hours() < 17)
        {
          m.startOf('day').subtract(1, 'days');
        }
        else
        {
          m.startOf('day').add(1, 'days');
        }

        term.args[1] = moment.utc(m.format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate();
      }
      else if (/^[0-9]+-[0-9]+-[0-9]+$/.test(date))
      {
        term.args[1] = moment.utc(date, 'YYYY-MM-DD').toDate();
      }
    });

    next();
  }

  function generateRoute(req, res)
  {
    app.broker.publish('wh.generator.requested', {
      date: req.params.id
    });

    res.sendStatus(204);
  }

  function actRoute(req, res, next)
  {
    if (!req.body.data)
    {
      req.body.data = {};
    }

    req.body.user = user.createUserInfo(req.session.user, req);
    req.body.data.date = moment.utc(req.params.id, 'YYYY-MM-DD').toDate();

    module.state.act(req.body, (err, result) =>
    {
      if (err)
      {
        return next(err);
      }

      if (result)
      {
        res.json(result);
      }
      else
      {
        res.sendStatus(204);
      }
    });
  }
};
