// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const fs = require('fs');
const _ = require('lodash');
const step = require('h5.step');
const request = require('request');

exports.DEFAULT_CONFIG = {
  expressId: 'express',
  twilioId: 'twilio',
  secretKey: null,
  remoteSenderUrl: null,
  smsPath: null
};

exports.onModuleSetUp = (app, {module, setUpModule}) =>
{
  if (setUpModule.name === module.config.expressId)
  {
    setUpModule.config.noSessionPatterns.push(req => req.url === '/sms;send');
  }
};

exports.start = (app, module) =>
{
  app.onModuleReady(module.config.expressId, setUpRoutes);

  /**
   * @param {(string|Array.<string>)} to
   * @param {string} text
   * @param {function((Error|null), Object)} done
   * @returns {undefined}
   */
  module.send = function(to, text, done)
  {
    let smsOptions;

    if (arguments.length > 2)
    {
      smsOptions = {
        to: to,
        text: text
      };
    }
    else
    {
      smsOptions = to;
      done = text;
    }

    if (typeof smsOptions.to === 'string')
    {
      smsOptions.to = [smsOptions.to];
    }

    if (!Array.isArray(smsOptions.to) || !smsOptions.to.length)
    {
      return setImmediate(done, new Error('No recipients.'));
    }

    if (app[module.config.twilioId])
    {
      sendThroughTwilio(smsOptions, done);
    }
    else if (module.config.remoteSenderUrl)
    {
      sendThroughRemote(smsOptions, done);
    }
    else if (!_.isEmpty(module.config.smsPath))
    {
      sendThroughFile(smsOptions, done);
    }
    else
    {
      module.info('Not sending SMS.', {smsOptions});

      setImmediate(done);
    }
  };

  function sendThroughRemote(body, done)
  {
    const options = {
      url: module.config.remoteSenderUrl,
      method: 'POST',
      json: true,
      body: {...body, secretKey: module.config.secretKey}
    };

    request(options, (err, res) =>
    {
      if (!err && res && res.statusCode !== 204)
      {
        err = new Error(`Invalid response status. Expected 204, got: ${res.statusCode}.`);
      }

      if (err)
      {
        module.error(err, `Failed to send SMS.`, {
          mode: 'remote',
          smsOptions: _.omit(options.body, ['secretKey'])
        });

        return done(err);
      }

      module.debug(`Sent SMS.`, {
        mode: 'remote',
        smsOptions: _.omit(options.body, ['secretKey'])
      });

      return done();
    });
  }

  function sendThroughFile(smsOptions, done)
  {
    step(
      function openFileStep()
      {
        const smsFileName = 'WMES_'
          + Math.round(Date.now() + Math.random() * 99999999).toString(36).toUpperCase()
          + '.sms';

        fs.open(path.join(module.config.smsPath, smsFileName), 'wx+', this.next());
      },
      function writeFileStep(err, fd)
      {
        if (err)
        {
          return this.done(done, err);
        }

        this.fd = fd;

        const contents = smsOptions.to.join('') + ',' + smsOptions.text;

        fs.write(fd, contents, 0, 'utf8', this.next());
      },
      function closeFileStep(err)
      {
        const fd = this.fd;
        this.fd = null;

        if (err)
        {
          fs.close(fd, () => {});

          module.error(err, `Failed to send SMS.`, {
            mode: 'file',
            smsOptions: _.omit(smsOptions, ['secretKey'])
          });

          return done(err);
        }

        module.debug(`Sent SMS.`, {
          mode: 'file',
          smsOptions: _.omit(smsOptions, ['secretKey'])
        });

        fs.close(fd, done);
      }
    );
  }

  function sendThroughTwilio(smsOptions, done)
  {
    const twilio = app[module.config.twilioId];

    step(
      function()
      {
        smsOptions.to.forEach(to =>
        {
          twilio.sms({...smsOptions, to, body: smsOptions.text}, this.group());
        });
      },
      function(err)
      {
        if (err)
        {
          module.error(err, `Failed to send SMS.`, {
            mode: 'twilio',
            smsOptions: _.omit(smsOptions, ['secretKey'])
          });

          return done(err);
        }

        module.debug(`Sent SMS.`, {
          mode: 'twilio',
          smsOptions: _.omit(smsOptions, ['secretKey'])
        });

        done();
      }
    );
  }

  function setUpRoutes()
  {
    const express = app[module.config.expressId];

    express.options('/sms;send', (req, res) =>
    {
      res.set('Access-Control-Allow-Origin', '*');
      res.set('Access-Control-Allow-Headers', req.headers['access-control-request-headers']);
      res.end();
    });

    express.post('/sms;send', (req, res, next) =>
    {
      res.set('Access-Control-Allow-Origin', '*');
      res.set('Access-Control-Allow-Headers', req.headers['access-control-request-headers']);

      if (module.config.secretKey !== null && req.body.secretKey !== module.config.secretKey)
      {
        return next(app.createError('INVALID_SECRET_KEY', 401));
      }

      module.send(req.body, (err) =>
      {
        if (err)
        {
          return next(err);
        }

        res.sendStatus(204);
      });
    });
  }
};
