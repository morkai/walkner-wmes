// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const crypto = require('crypto');
const _ = require('lodash');
const uuid = require('uuid/v4');
const moment = require('moment');

module.exports = (app, module) =>
{
  const {express, user, License, LicensePing} = module;

  const canView = user.auth('DICTIONARIES:VIEW');
  const canManage = user.auth('LICENSES:MANAGE');

  express.get('/licenses', canView, express.crud.browseRoute.bind(null, app, License));

  express.post('/licenses',
    canManage,
    prepareLicenseForAdd,
    generateLicenseKey,
    express.crud.addRoute.bind(null, app, License)
  );

  express.get('/licenses/:id', canView, express.crud.readRoute.bind(null, app, License));

  express.put(
    '/licenses/:id',
    canManage,
    prepareLicenseForEdit,
    generateLicenseKey,
    express.crud.editRoute.bind(null, app, License)
  );

  express.post('/licenses/:id;ping', pingRoute);

  express.delete('/licenses/:id', canManage, express.crud.deleteRoute.bind(null, app, License));

  function pingRoute(req, res, next)
  {
    const uuid = req.params.id;
    const encryptedUuid = req.body.uuid || '';
    let decryptedUuid = null;

    try
    {
      decryptedUuid = crypto.privateDecrypt(
        module.licenseEdKey,
        Buffer.from(encryptedUuid, 'base64')
      ).toString('utf8');
    }
    catch (err) {} // eslint-disable-line no-empty

    if (decryptedUuid === null || uuid !== decryptedUuid)
    {
      res.statusCode = 400;

      return next(new Error('INVALID_INPUT'));
    }

    License.findById(uuid, {_id: 1}).lean().exec((err, license) =>
    {
      if (err)
      {
        return next(err);
      }

      delete req.body.uuid;

      const ip = req.ip;

      if (!license)
      {
        saveLicensePing(uuid, ip, false, req.body);

        return res.status(404).send('UNKNOWN_LICENSE');
      }

      const conditions = {
        uuid: license._id,
        pingedAt: {$gte: moment().subtract(8, 'hours').toDate()},
        granted: true,
        ip: {$ne: ip}
      };

      LicensePing.findOne(conditions, {ip: 1}).lean().exec((err, licensePing) =>
      {
        if (err)
        {
          return next(err);
        }

        if (licensePing)
        {
          res.status(400).send('DUPLICATE_LICENSE');
        }
        else
        {
          res.end();
        }

        saveLicensePing(uuid, ip, !licensePing, req.body);
      });
    });
  }

  function saveLicensePing(uuid, ip, granted, meta)
  {
    const licensePing = new LicensePing({
      uuid: uuid,
      pingedAt: new Date(),
      ip: ip,
      granted: granted,
      meta: meta
    });

    licensePing.save((err) =>
    {
      if (err)
      {
        module.error(err, `Failed to save a new ping.`, {licensePing});
      }
      else
      {
        module.info(`${licensePing.granted ? 'Granted' : 'Denied'} access.`, {licensePing});
      }
    });
  }

  function prepareLicenseForAdd(req, res, next)
  {
    if (_.isEmpty(req.body._id))
    {
      req.body._id = uuid().toUpperCase();
    }

    prepareLicenseDate(req.body);

    return next();
  }

  function prepareLicenseForEdit(req, res, next)
  {
    req.body._id = req.params.id;

    prepareLicenseDate(req.body);

    return next();
  }

  function prepareLicenseDate(license)
  {
    if (_.isString(license.date) && /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(license.date))
    {
      license.date = moment(license.date, 'YYYY-MM-DD').toDate();
    }
  }

  function generateLicenseKey(req, res, next)
  {
    try
    {
      req.body.key = module.generateLicenseKey(req.body);
    }
    catch (err)
    {
      res.status(400);

      return next(err);
    }

    return next();
  }
};
