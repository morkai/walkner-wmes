// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

exports.name = 'WhOrder';

exports.setUp = (app, mongoose) =>
{
  const whOrderSchema = new mongoose.Schema({
    v: Number,
    status: {
      type: String,
      enum: [
        'pending', // Initial status
        'started', // qtyPickup > 0 && qtyPickup < qtyPlan
        'completed', // qtyPickup >= qtyPlan && qtyDelivery < qtyPlan
        'delivered', // qtyDelivery => qtyPlan
        'problem', // problems.length > 0
        'cancelled' // Manually cancelled
      ],
      default: 'pending'
    },
    plan: Date,
    sapOrder: String,
    nc12: String,
    name: String,
    mrp: String,
    line: String,
    lines: [{
      _id: String,
      qtyPlan: Number,
      pceTime: Number,
      startTime: Date,
      finishTime: Date
    }],
    redirLine: String,
    redirLines: [String],
    qtyTodo: Number,
    qtyPlan: Number,
    qtyPickup: Number,
    qtyDelivery: Number,
    startTime: Date,
    finishTime: Date,
    problems: [{
      _id: ObjectId,
      cause: String,
      data: {},
      comment: String
    }]
  }, {
    id: false,
    minimize: false,
    versionKey: false
  });

  whOrderSchema.statics.TOPIC_PREFIX = 'wh.orders';
  whOrderSchema.statics.BROWSE_LIMIT = 100;

  whOrderSchema.statics.generateKey = function(whOrder)
  {
    return `${whOrder.date.getTime()}:${whOrder.orderNo}:${whOrder.line}`;
  };

  whOrderSchema.statics.createFromLineOrder = function(lineOrder, date)
  {
    throw new Error('TODO');
    return {
      _id: null,
      v: 0,
      whStatus: 'pending',
      psStatus: lineOrder.psStatus,
      problem: {
        cause: null,
        data: {},
        comment: ''
      },
      orderNo: lineOrder.orderNo,
      mrp: lineOrder.mrp,
      line: lineOrder.line,
      date,
      qtyPlan: lineOrder.quantity,
      qtyPickup: 0,
      qtyDelivery: 0,
      pceTime: lineOrder.pceTime,
      startTime: lineOrder.startAt,
      finishTime: lineOrder.finishAt
    };
  };

  mongoose.model(exports.name, whOrderSchema);
};
