// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const contentDisposition = require('content-disposition');

module.exports = async (app, module, req, res, next) =>
{
  const {
    Suggestion
  } = module;

  try
  {
    const {modelId, attachmentId} = req.params;
    const changeI = req.query.change >= 0 ? parseInt(req.query.change, 10) : -1;
    const fields = {[changeI === -1 ? 'attachments' : 'changes']: 1};

    const model = await Suggestion
      .findById(modelId)
      .select(fields)
      .exec();

    if (!model)
    {
      return next(app.createError('Model not found.', 'NOT_FOUND', 404));
    }

    let attachment = null;

    if (changeI === -1)
    {
      attachment = model.attachments.find(a => a._id === attachmentId);
    }
    else if (model.changes[changeI] && model.changes[changeI].data.attachments)
    {
      const {added, edited, deleted} = model.changes[changeI].data.attachments[1];

      attachment = (added || []).find(a => a._id === attachmentId);
      attachment = attachment || (edited || []).find(a => a._id === attachmentId);
      attachment = attachment || (deleted || []).find(a => a._id === attachmentId);
    }

    if (!attachment)
    {
      return next(app.createError('Attachment not found.', 'NOT_FOUND', 404));
    }

    if (changeI === -1
      && attachment.type.startsWith('image/')
      && attachment.type !== 'image/gif'
      && !attachment.meta.width
      && !attachment.meta.height)
    {
      await module.attachments.optimizeImage(attachment, model);
    }

    const min = req.query.min === '1' && attachment.meta.min;
    const filePath = path.join(module.config.attachmentsDest, attachment._id) + (min ? '_min' : '');
    const disposition = req.query.download === '1' ? 'attachment' : 'inline';

    if (attachment.type.includes('image/'))
    {
      res.set('Cache-Control', 'max-age=604800, public');
    }

    res.type(attachment.type);
    res.append('Content-Disposition', contentDisposition(attachment.file, {type: disposition}));
    res.sendFile(filePath);
  }
  catch (err)
  {
    next(err);
  }
};
