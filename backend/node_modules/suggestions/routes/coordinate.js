// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {
    user,
    Suggestion
  } = module;

  const sessionUser = req.session.user;
  const body = req.body;
  const updater = user.createUserInfo(sessionUser, req);

  step(
    function findStep()
    {
      Suggestion.findById(req.params.id).exec(this.next());
    },
    function applyChangesStep(err, suggestion)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!suggestion)
      {
        return this.skip(app.createError('Suggestion not found.', 'INPUT', 404));
      }

      const coordSection = suggestion.coordSections.find(s => s._id === body._id);

      if (!coordSection)
      {
        return this.skip(app.createError('Coordinating section not found.', 'INPUT', 400));
      }

      if (!user.isAllowedTo(sessionUser, 'SUGGESTIONS:MANAGE')
        && !coordSection.users.some(c => c.id === sessionUser._id))
      {
        return this.skip(app.createError('Forbidden.', 'AUTH', 403));
      }

      const input = {
        coordSections: []
      };

      suggestion.coordSections.forEach(coordSection =>
      {
        if (coordSection._id !== body._id)
        {
          input.coordSections.push(coordSection.toObject());

          return;
        }

        input.coordSections.push({
          ...coordSection.toObject(),
          status: body.status,
          user: body.user,
          comment: body.comment || '',
          time: new Date()
        });
      });

      if (suggestion.status === 'new' && input.coordSections.every(({status}) => status !== 'pending'))
      {
        input.status = 'accepted';
      }

      this.usersToNotify = suggestion.applyChanges(input, updater);

      if (this.usersToNotify)
      {
        suggestion.save(this.next());
      }
    },
    function sendResponseStep(err, suggestion)
    {
      if (err)
      {
        return next(err);
      }

      if (suggestion)
      {
        res.json(suggestion);

        app.broker.publish('suggestions.edited', {
          model: suggestion,
          user: updater,
          notify: this.usersToNotify
        });
      }
      else
      {
        res.json({_id: req.params.id});
      }
    }
  );
};
