// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module, req, res, next) =>
{
  const {
    express,
    Suggestion
  } = module;

  prepareObserverFilter(req);
  prepareKomFilter(req);

  express.crud.browseRoute(app, Suggestion, req, res, next);
};

function prepareObserverFilter({session, query, rql})
{
  const observer = query['observers.user.id'];

  if (observer !== 'mine' && observer !== 'unseen')
  {
    return;
  }

  rql.selector.args = rql.selector.args.filter(term => term.args[0] !== 'observers.user.id');

  if (observer === 'mine')
  {
    rql.selector.args.push({
      name: 'eq',
      args: ['observers.user.id', session.user._id]
    });
  }
  else
  {
    rql.selector.args.push({
      name: 'elemMatch',
      args: [
        'observers',
        {name: 'eq', args: ['user.id', session.user._id]},
        {name: 'eq', args: ['notify', true]}
      ]
    });
  }
}

function prepareKomFilter({query, rql})
{
  if (!query.status || typeof query.status !== 'string' || !query.status.includes('kom'))
  {
    return;
  }

  let kom = false;

  rql.selector.args = rql.selector.args.filter(term =>
  {
    if (term.args[0] !== 'status')
    {
      return true;
    }

    if (term.args[1] === 'kom')
    {
      kom = true;

      return false;
    }

    if (Array.isArray(term.args[1]) && term.args[1].includes('kom'))
    {
      kom = true;

      term.args[1] = term.args[1].filter(v => v !== 'kom');

      return term.args[1].length > 0;
    }

    return false;
  });

  if (kom)
  {
    rql.selector.args.push({
      name: 'eq',
      args: ['kom', true]
    });
  }
}
