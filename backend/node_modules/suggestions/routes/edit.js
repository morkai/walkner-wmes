// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const locks = require('util/locks');

module.exports = async (app, module, req, res, next) =>
{
  const {
    user,
    Suggestion
  } = module;

  const sessionUser = req.session.user;
  const updater = user.createUserInfo(sessionUser, req);
  let body = req.body;

  if (!sessionUser.loggedIn)
  {
    body = _.pick(body, ['comment']);
  }

  const releaseLock = await locks.createAsync(`suggestions/${req.params.id}`);

  try
  {
    const suggestion = await Suggestion.findById(req.params.id).exec();

    if (!suggestion)
    {
      throw app.createError('Not found.', 'NOT_FOUND', 404);
    }

    module.attachments.prepareInput(body, suggestion);

    body.subscribers = Suggestion.prepareSubscribers(body.subscribers);

    if ((body.status && body.status !== suggestion.status) || Array.isArray(body.coordSections))
    {
      _.defaults(body, {
        status: suggestion.status,
        coordSections: suggestion.coordSections.toObject()
      });

      const oldCoordSections = new Map();

      suggestion.coordSections.forEach(coordSection =>
      {
        oldCoordSections.set(coordSection._id, coordSection.toObject());
      });

      body.coordSections.forEach(newCoordSection =>
      {
        const oldCoordSection = oldCoordSections.get(newCoordSection._id);

        if (!oldCoordSection)
        {
          return;
        }

        newCoordSection.status = oldCoordSection.status;
        newCoordSection.user = oldCoordSection.user;
        newCoordSection.time = oldCoordSection.time;
        newCoordSection.comment = oldCoordSection.comment;
      });

      if (body.status === 'new' && suggestion.status !== 'new')
      {
        body.coordSections.forEach(coordSection =>
        {
          coordSection.status = 'pending';
          coordSection.user = null;
          coordSection.time = null;
          coordSection.comment = '';
        });
      }

      if (body.status === 'new' && body.coordSections.every(({status}) => status !== 'pending'))
      {
        body.status = 'accepted';
      }
      else if (body.status === 'accepted' && body.coordSections.some(({status}) => status === 'pending'))
      {
        body.status = 'new';
      }
    }

    if (suggestion.kom && body.status !== 'finished')
    {
      body.kom = false;
    }

    const notify = suggestion.applyChanges(body, updater);

    if (notify)
    {
      await suggestion.save();

      res.json(suggestion);

      app.broker.publish('suggestions.edited', {
        model: suggestion,
        user: updater,
        notify
      });
    }
    else
    {
      res.json({_id: req.params.id});
    }
  }
  catch (err)
  {
    next(err);
  }
  finally
  {
    releaseLock();
  }
};
