// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (app, module) =>
{
  const {
    user,
    Suggestion
  } = module;

  app.broker.subscribe('suggestions.deleted', onModelDeleted);

  async function onModelDeleted({model, user: sessionUser})
  {
    try
    {
      const resolutionId = model._id.toString();
      const suggestions = await Suggestion
        .find({'resolutions._id': resolutionId})
        .exec();

      for (const suggestion of suggestions)
      {
        await removeResolution(suggestion, resolutionId, user.createUserInfo(sessionUser));
      }
    }
    catch (err)
    {
      module.error(err, 'Failed to remove resolution after entry deletion.', {
        deletedId: model._id
      });
    }
  }

  async function removeResolution(suggestion, resolutionId, updater)
  {
    const input = {
      resolutions: suggestion.resolutions.filter(r => r._id !== resolutionId)
    };

    const notify = suggestion.applyChanges(input, updater);

    if (notify)
    {
      await suggestion.save();

      app.broker.publish('suggestions.edited', {
        model: suggestion,
        user: updater,
        notify
      });
    }
  }
};
