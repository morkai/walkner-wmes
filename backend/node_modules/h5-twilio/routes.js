// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const {twiml, webhook} = require('twilio');

const CLEAR_TIMEOUT_STATUS = {
  completed: true,
  sent: true,
  delivered: true
};

module.exports = (app, module) =>
{
  const {express, TwilioRequest, TwilioResponse} = module;

  express.options('/twilio', (req, res) =>
  {
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Headers', 'Content-Type');
    res.end();
  });

  express.post('/twilio', (req, res, next) =>
  {
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Headers', 'Content-Type');

    const body = req.body;

    if (!_.isObject(body)
      || !_.isFunction(module[body.operation])
      || !_.isObject(body.options))
    {
      return next(app.createError('INVALID_INPUT', 400));
    }

    if (module.config.secretKey !== null && body.secretKey !== module.config.secretKey)
    {
      return next(app.createError('INVALID_SECRET_KEY', 401));
    }

    module[body.operation](body.options, (err) =>
    {
      if (err)
      {
        module.error(err, 'Operation failed.', {
          operation: body.operation,
          options: body.options
        });

        return next(err);
      }

      module.info('Executed operation', {
        operation: body.operation,
        options: body.options
      });

      res.sendStatus(204);
    });
  });

  express.get('/twilio/:id', (req, res, next) =>
  {
    TwilioRequest.findById(req.params.id).exec((err, twilioRequest) =>
    {
      if (err)
      {
        return next(err);
      }

      if (!twilioRequest)
      {
        return next(app.createError('NOT_FOUND', 400));
      }

      const twimlResponse = twilioRequest.operation === 'say'
        ? new twiml.VoiceResponse()
        : new twiml.MessagingResponse();

      twilioRequest.buildTwiml(twimlResponse);

      res.type('text/xml');
      res.send(twimlResponse.toString());

      TwilioRequest.updateStatus(twilioRequest._id, 'requested', (err) =>
      {
        if (err)
        {
          module.error(err, 'Failed to update a status of request [requested]', {requestId: twilioRequest._id});
        }
      });
    });
  });

  express.post('/twilio/:id', webhook(module.config.authToken), (req, res) =>
  {
    res.sendStatus(204);

    const status = req.body.CallStatus || req.body.MessageStatus;

    if (status)
    {
      TwilioRequest.updateStatus(req.params.id, status, (err) =>
      {
        if (err)
        {
          module.error(err, 'Failed to update a status of request.', {
            requestId: req.params.id,
            status
          });
        }
      });

      if (CLEAR_TIMEOUT_STATUS[status])
      {
        module.clearTimeout(req.params.id);
      }
    }

    const twilioResponse = new TwilioResponse({
      request: req.params.id,
      createdAt: new Date(),
      payload: req.body
    });

    twilioResponse.save((err) =>
    {
      if (err)
      {
        module.error(err, 'Failed to save a response.', {requestId: req.params.id});
      }
    });
  });
};
