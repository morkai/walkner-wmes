// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {User, PasswordResetRequest} = module;

  step(
    function findRequestStep()
    {
      PasswordResetRequest.findById(req.params.id, this.next());
    },
    function validateRequestStep(err, passwordResetRequest)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!passwordResetRequest)
      {
        return this.skip(app.createError('REQUEST_NOT_FOUND', 404));
      }

      if ((Date.now() - passwordResetRequest.createdAt.getTime()) > 3600 * 24 * 1000)
      {
        return this.skip(app.createError('REQUEST_EXPIRED', 400));
      }

      this.passwordResetRequest = passwordResetRequest;
    },
    function findUserStep()
    {
      User.findById(this.passwordResetRequest.user, this.next());
    },
    function validateUserStep(err, userModel)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (!userModel)
      {
        return this.skip(app.createError('USER_NOT_FOUND', 400));
      }

      this.user = userModel;
    },
    function updatePasswordStep()
    {
      this.user.password = this.passwordResetRequest.password;
      this.user.save(this.next());
    },
    function sendResponseStep(err)
    {
      if (err)
      {
        return next(err);
      }

      res.redirect(303, '/');

      if (this.passwordResetRequest)
      {
        const passwordResetRequest = this.passwordResetRequest;

        passwordResetRequest.remove(err =>
        {
          if (err)
          {
            module.error(err, 'Failed to remove the password reset request.', {
              passwordResetRequestId: passwordResetRequest._id
            });
          }
        });
      }

      this.passwordResetRequest = null;
      this.user = null;
    }
  );
};
