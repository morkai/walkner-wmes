// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const bcrypt = require('bcrypt');
const request = require('request');

const selfRoute = require('./self');
const anonymizeRoute = require('./anonymize');
const loginRoute = require('./login');
const logoutRoute = require('./logout');
const requestPasswordResetRoute = require('./requestPasswordReset');
const confirmPasswordResetRoute = require('./confirmPasswordReset');
const redirectAddressUpdateRoute = require('./redirectAddressUpdate');
const loginAddressUpdateRoute = require('./loginAddressUpdate');

module.exports = (app, module) =>
{
  const {settings, user, express, User} = module;

  const canView = user.auth('USERS:VIEW');
  const canBrowse = user.auth.apply(user, module.config.browsePrivileges);
  const canManage = user.auth('USERS:MANAGE');

  if (settings)
  {
    express.get(
      '/users/settings',
      canBrowse,
      (req, res, next) =>
      {
        req.rql.selector = {
          name: 'regex',
          args: ['_id', '^users\\.']
        };

        next();
      },
      express.crud.browseRoute.bind(null, app, settings.Setting)
    );
    express.put('/users/settings/:id', canManage, remoteApi, settings.updateRoute);
  }

  express.get('/users', canBrowse, remoteApi, express.crud.browseRoute.bind(null, app, User));
  express.post('/users', canManage, remoteApi, checkLogin, hashPassword, express.crud.addRoute.bind(null, app, User));
  express.get('/users/self', remoteApi, selfRoute.bind(null, app, module));
  express.get('/users/:id', canViewDetails, remoteApi, express.crud.readRoute.bind(null, app, User));
  express.put(
    '/users/:id',
    canEdit,
    restrictSpecial,
    checkLogin,
    hashPassword,
    express.crud.editRoute.bind(null, app, User)
  );
  express.delete('/users/:id', canManage, remoteApi, restrictSpecial, express.crud.deleteRoute.bind(null, app, User));

  express.post('/users/:id/anonymize', user.auth('SUPER'), remoteApi, anonymizeRoute.bind(null, app, module));

  express.post('/login', remoteApi, loginRoute.bind(null, app, module));
  express.get('/logout', logoutRoute.bind(null, app, module));

  express.post('/resetPassword/request', remoteApi, hashPassword, requestPasswordResetRoute.bind(null, app, module));
  express.get('/resetPassword/:id', remoteApi, confirmPasswordResetRoute.bind(null, app, module));

  express.get('/addressUpdate/redirect', redirectAddressUpdateRoute.bind(null, app, module));
  express.get('/addressUpdate/login', loginAddressUpdateRoute.bind(null, app, module));

  function canViewDetails(req, res, next)
  {
    if (req.session.user && req.params.id === req.session.user._id)
    {
      next();
    }
    else
    {
      canView(req, res, next);
    }
  }

  function canEdit(req, res, next)
  {
    const sessionUser = req.session.user;

    if (sessionUser && req.params.id === sessionUser._id)
    {
      if (!sessionUser.privileges
        || (!sessionUser.privileges.includes('USERS:MANAGE') && !sessionUser.privileges.includes('SUPER')))
      {
        req.body = _.pick(req.body, [
          '_id',
          'login', 'email', 'password', 'password2',
          'firstName', 'lastName', 'sex', 'mobile', 'personellId',
          'mrps', 'preferences'
        ]);
      }

      next();
    }
    else
    {
      canManage(req, res, next);
    }
  }

  function restrictSpecial(req, res, next)
  {
    if (req.params.id === user.root._id || req.params.id === user.guest._id)
    {
      return res.sendStatus(400);
    }

    return next();
  }

  function checkLogin(req, res, next)
  {
    const rawLogin = req.body.login;

    if (!_.isString(rawLogin) || !req.body.active)
    {
      return next();
    }

    const login = req.body.login = rawLogin.trim();
    const conditions = {
      login,
      active: true
    };

    if (req.body._id)
    {
      conditions._id = {$ne: req.body._id};
    }

    User.findOne(conditions, {_id: 1}).lean().exec((err, userModel) =>
    {
      if (err)
      {
        return next(err);
      }

      if (userModel)
      {
        return next(app.createError('LOGIN_USED', 400));
      }

      next();
    });
  }

  function hashPassword(req, res, next)
  {
    if (!_.isObject(req.body))
    {
      return next();
    }

    const password = req.body.password;

    if (!_.isString(password) || password.length === 0)
    {
      return next();
    }

    bcrypt.hash(password, 10, function(err, hash)
    {
      if (err)
      {
        return next(err);
      }

      req.body.passwordText = password;
      req.body.password = hash;

      next();
    });
  }

  function remoteApi(req, res, next)
  {
    if (module.config.remoteApiUrl && module.config.remoteApiKey)
    {
      return redirectToRemoteApi(req, res, next);
    }

    next();
  }

  function redirectToRemoteApi(req, res, next)
  {
    const url = new URL(req.url, module.config.remoteApiUrl);
    const apiUrl = new URL(module.config.remoteApiUrl);

    apiUrl.pathname = url.pathname;
    apiUrl.search = url.search;

    const apiReq = {
      method: req.method,
      url: apiUrl.toString(),
      headers: {
        'x-api-key': module.config.remoteApiKey
      }
    };

    ['user-agent', 'accept', 'accept-language', 'content-type'].forEach(header =>
    {
      if (req.headers[header])
      {
        apiReq.headers[header] = req.headers[header];
      }
    });

    if (req.is('application/json'))
    {
      apiReq.body = JSON.stringify(req.body);
    }
    else if (req.is('text/plain'))
    {
      apiReq.body = req.body;
    }

    request(apiReq, (err, apiRes, body) =>
    {
      if (err)
      {
        return next(err);
      }

      if (url.pathname === '/login' && apiRes.statusCode < 300)
      {
        try
        {
          req.user = JSON.parse(body);
        }
        catch (err)
        {
          return next(err);
        }

        return loginRoute(app, module, req, res, next);
      }

      res.status(apiRes.statusCode);
      res.type(apiRes.headers['content-type'] || 'application/json');
      res.end(body);
    });
  }
};

