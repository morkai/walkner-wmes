// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const bcrypt = require('bcrypt');

const selfRoute = require('./self');
const anonymizeRoute = require('./anonymize');
const loginRoute = require('./login');
const logoutRoute = require('./logout');
const requestPasswordResetRoute = require('./requestPasswordReset');
const confirmPasswordResetRoute = require('./confirmPasswordReset');
const redirectAddressUpdateRoute = require('./redirectAddressUpdate');
const loginAddressUpdateRoute = require('./loginAddressUpdate');
const loginInRoute = require('./loginIn');
const loginAsCheckRoute = require('./loginAsCheck');
const loginAsLoginRoute = require('./loginAsLogin');

module.exports = (app, module) =>
{
  const {user, express, User} = module;
  const settings = app[module.config.settingsId];
  const remoteApi = app[module.config.remoteApiId];

  const canView = user.auth('USERS:VIEW');
  const canBrowse = user.auth.apply(user, module.config.browsePrivileges);
  const canManage = user.auth('USERS:MANAGE');

  const redirectToRemoteApi = remoteApi
    ? remoteApi.createRedirect({responseHandler: handleLoginResponse})
    : (req, res, next) => next();

  if (settings)
  {
    express.get('/users/settings', canBrowse, redirectToRemoteApi, settings.browseRoute('users'));
    express.put('/users/settings/:id', canManage, redirectToRemoteApi, settings.updateRoute);
  }

  express.get(
    '/users',
    canBrowse,
    redirectToRemoteApi,
    express.crud.browseRoute.bind(null, app, User)
  );
  express.post(
    '/users',
    canManage,
    redirectToRemoteApi,
    checkLogin,
    hashPassword,
    express.crud.addRoute.bind(null, app, User)
  );
  express.get('/users/self', selfRoute.bind(null, app, module));
  express.get('/users/:id', canViewDetails, redirectToRemoteApi, express.crud.readRoute.bind(null, app, User));
  express.put(
    '/users/:id',
    canEdit,
    redirectToRemoteApi,
    restrictSpecial,
    checkLogin,
    hashPassword,
    express.crud.editRoute.bind(null, app, User)
  );
  express.delete(
    '/users/:id',
    canManage,
    redirectToRemoteApi,
    restrictSpecial,
    express.crud.deleteRoute.bind(null, app, User)
  );

  express.post(
    '/users/:id/anonymize',
    user.auth('SUPER'),
    redirectToRemoteApi,
    anonymizeRoute.bind(null, app, module)
  );

  express.post('/login', redirectToRemoteApi, loginRoute.bind(null, app, module));
  express.get('/logout', logoutRoute.bind(null, app, module));

  express.get('/loginIn/:app', user.auth('USER'), loginInRoute.bind(null, app, module));
  express.post('/loginAs', loginAsCheckRoute.bind(null, app, module));
  express.get('/loginAs', loginAsLoginRoute.bind(null, app, module));

  express.post(
    '/resetPassword/request',
    redirectToRemoteApi,
    hashPassword,
    requestPasswordResetRoute.bind(null, app, module)
  );
  express.get(
    '/resetPassword/:id',
    redirectToRemoteApi,
    confirmPasswordResetRoute.bind(null, app, module)
  );

  express.get('/addressUpdate/redirect', redirectAddressUpdateRoute.bind(null, app, module));
  express.get('/addressUpdate/login', loginAddressUpdateRoute.bind(null, app, module));

  function canViewDetails(req, res, next)
  {
    if (req.session.user && req.params.id === req.session.user._id)
    {
      next();
    }
    else
    {
      canView(req, res, next);
    }
  }

  function canEdit(req, res, next)
  {
    const sessionUser = req.session.user;

    if (sessionUser && req.params.id === sessionUser._id)
    {
      if (!sessionUser.privileges
        || (!sessionUser.privileges.includes('USERS:MANAGE') && !sessionUser.privileges.includes('SUPER')))
      {
        req.body = _.pick(req.body, [
          '_id',
          'login', 'email', 'password', 'password2',
          'firstName', 'lastName', 'sex', 'mobile', 'personellId',
          'mrps', 'preferences'
        ]);
      }

      next();
    }
    else
    {
      canManage(req, res, next);
    }
  }

  function restrictSpecial(req, res, next)
  {
    if (req.params.id === user.root._id || req.params.id === user.guest._id)
    {
      return res.sendStatus(400);
    }

    return next();
  }

  function checkLogin(req, res, next)
  {
    const rawLogin = req.body.login;

    if (!_.isString(rawLogin) || !req.body.active)
    {
      return next();
    }

    const login = req.body.login = rawLogin.trim();
    const conditions = {
      login,
      active: true
    };

    if (req.body._id)
    {
      conditions._id = {$ne: req.body._id};
    }

    User.findOne(conditions, {_id: 1}).lean().exec((err, userModel) =>
    {
      if (err)
      {
        return next(err);
      }

      if (userModel)
      {
        return next(app.createError('LOGIN_USED', 400));
      }

      next();
    });
  }

  function hashPassword(req, res, next)
  {
    if (!_.isObject(req.body))
    {
      return next();
    }

    const password = req.body.password;

    if (!_.isString(password) || password.length === 0)
    {
      return next();
    }

    bcrypt.hash(password, 10, function(err, hash)
    {
      if (err)
      {
        return next(err);
      }

      req.body.passwordText = password;
      req.body.password = hash;

      next();
    });
  }

  function handleLoginResponse({url, apiRes, body}, req, res, next)
  {
    if (url.pathname === '/login' && apiRes.statusCode < 300)
    {
      try
      {
        req.user = JSON.parse(body.toString());
      }
      catch (err)
      {
        return next(err);
      }

      loginRoute(app, module, req, res, next);

      return true;
    }

    return false;
  }
};

