// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const crypto = require('crypto');
const _ = require('lodash');
const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {mailSender, user, User, PasswordResetRequest} = module;

  if (!mailSender)
  {
    return next(app.createError('No mail/sender module.', 'MISSING_DEPENDENCIES', 500));
  }

  const body = req.body;

  if (!_.isString(body.subject)
    || !_.isString(body.text)
    || !_.isString(body.login)
    || !_.isString(body.passwordText))
  {
    return next(app.createError('Invalid input.', 'INPUT', 400));
  }

  step(
    function findUserStep()
    {
      const property = /^.*?@.*?\.[a-zA-Z]+$/.test(body.login) ? 'email' : 'login';
      const conditions = {
        [property]: new RegExp(`^${_.escapeRegExp(body.login)}$`, 'i')
      };

      if (User.schema.path('active'))
      {
        conditions.active = true;
      }

      User
        .find(conditions)
        .select({login: 1, email: 1})
        .lean()
        .exec(this.next());
    },
    function validateUserStep(err, users)
    {
      if (err)
      {
        return this.skip(err);
      }

      if (users.length === 0)
      {
        return this.skip(app.createError(
          `Password reset failed: user not found.`, 'NOT_FOUND', 400
        ));
      }

      if (users.length > 1)
      {
        return this.skip(app.createError(
          `Password reset failed: many matching users found.`, 'MANY_MATCHES', 400
        ));
      }

      if (!/^.*?@.*?\.[a-zA-Z]+$/.test(users[0].email))
      {
        return this.skip(app.createError(
          `Password reset failed: user doesn't have a valid e-mail`, 'INVALID_EMAIL', 400
        ));
      }

      this.user = users[0];
    },
    function generateIdStep()
    {
      crypto.pseudoRandomBytes(32, this.next());
    },
    function createPasswordResetRequestStep(err, idBytes)
    {
      if (err)
      {
        return this.skip(err);
      }

      this.passwordResetRequest = new PasswordResetRequest({
        _id: idBytes.toString('hex').toUpperCase(),
        createdAt: new Date(),
        creator: user.createUserInfo(req.session.user, req),
        user: this.user._id,
        password: body.password
      });
      this.passwordResetRequest.save(this.next());
    },
    function sendEmailStep(err)
    {
      if (err)
      {
        return this.skip(err);
      }

      const subject = body.subject;
      const text = body.text
        .replace(/\{REQUEST_ID\}/g, this.passwordResetRequest._id)
        .replace(/\{LOGIN\}/g, this.user.login)
        .replace(/\{PASSWORD\}/g, body.passwordText);

      mailSender.send(this.user.email, subject, text, this.next());
    },
    function sendResponseStep(err)
    {
      if (err)
      {
        return next(err);
      }

      return res.sendStatus(204);
    }
  );
};
