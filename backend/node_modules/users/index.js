// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const {formatDateTime} = require('util/dateFormatter');
const login = require('./login');

exports.DEFAULT_CONFIG = {
  mongooseId: 'mongoose',
  expressId: 'express',
  userId: 'user',
  sioId: 'sio',
  companiesId: 'companies',
  settingsId: 'settings',
  mailSenderId: 'mail/sender',
  remoteApiId: 'remoteApi',
  syncHandler: null,
  syncOptions: {},
  emailGenerator: null,
  browsePrivileges: ['USERS:VIEW'],
  office365: null,
  loginIn: {},
  loginAs: {}
};

exports.models = [
  require('user/models/user'),
  require('./models/passwordResetRequest')
];

exports.recordTopics = {
  debug: ['users.login', 'users.logout'],
  info: ['users.synced'],
  warning: ['users.loginFailure']
};

exports.republishTopics = ['users.syncFailed', 'users.presence.updated'];

exports.userPrivileges = ['SUPER', 'USERS:VIEW', 'USERS:MANAGE'];

exports.optionalModules = {
  'mongoose user express': [
    require('./office365'),
    require('./routes')
  ],
  'mongoose user sio': require('./commands'),
  'mongoose settings': require('./presenceChecker')
};

exports.setUp = (app, {config}) =>
{
  if (config.office365)
  {
    const passport = require('passport');

    app.broker.subscribe('express.beforeMiddleware').setLimit(1).on('message', ({module}) =>
    {
      module.app.use(passport.initialize());
    });
  }
};

exports.start = (app, module) =>
{
  module.loginAs = new Map();

  module.login = login.bind(null, app, module);

  module.syncing = false;

  module.syncUsers = syncUsers;

  app.broker.subscribe('app.started', scheduleNextUserSync).setLimit(1);

  function scheduleNextUserSync()
  {
    const m = moment().add(30, 'seconds');
    const h = m.hours();
    const s = moment().startOf('day');

    if (h < 5)
    {
      s.hours(5).minutes(30);
    }
    else if (h >= 18)
    {
      s.add(1, 'days').hours(5).minutes(30);
    }
    else
    {
      s.hours(18);
    }

    module.info(`Next sync at ${formatDateTime(s.toDate())}.`);

    setTimeout(module.syncUsers, s.diff());
  }

  async function syncUsers(user)
  {
    const {syncHandler, syncOptions} = module.config;

    if (!syncHandler || module.syncing)
    {
      console.log(syncHandler);
      return;
    }

    module.info('Syncing...');

    module.syncing = true;

    try
    {
      const stats = await syncHandler(app, module, syncOptions);

      module.info('Synced.', {stats});

      app.broker.publish('users.synced', stats);
    }
    catch (err)
    {
      module.error(err, `Failed to sync.`);

      app.broker.publish('users.syncFailed', {user, error: err.message});
    }

    module.syncing = false;

    if (!user)
    {
      scheduleNextUserSync();
    }
  }
};
