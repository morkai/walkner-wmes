// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const min = require('./min');

exports.DEFAULT_CONFIG = {
  expressId: 'express',
  updaterId: 'updater',
  mongooseId: 'mongoose',
  userId: 'user',
  orgUnitsId: 'orgUnits',
  productionId: 'production'
};

exports.models = [
  require('prodShifts/models/prodShift'),
  require('prodShiftOrders/models/prodShiftOrder'),
  require('prodDowntimes/models/prodDowntime'),
  require('planning/models/plan')
];

exports.republishTopics = [
  'heff.updated.**'
];

exports.optionalModules = {
  'express updater mongoose user orgUnits production': require('./routes')
};

exports.start = (app, module) =>
{
  const UPDATE_TYPES = [
    'changeShift',
    'changeOrder',
    'finishOrder',
    'correctOrder',
    'startDowntime',
    'finishDowntime',
    'changeQuantitiesDone',
    'changeQuantityDone',
    'changeWorkerCount'
  ];

  app.broker.subscribe('production.synced.**', async (message) =>
  {
    if (!_.intersection(message.types, UPDATE_TYPES).length)
    {
      return;
    }

    if (message.finishedPso && message.finishedPso.length)
    {
      const production = app[module.config.productionId];

      message = {
        ...message,
        finishedPso: message.finishedPso.map(psoId =>
        {
          const pso = production.getCachedProdData(psoId);

          if (pso)
          {
            return min.prodShiftOrder(pso);
          }

          return psoId;
        })
      };
    }

    app.broker.publish(`heff.updated.${message.prodLine}`, message);
  });

  app.broker.subscribe('hourlyPlans.quantitiesPlanned', message =>
  {
    const prodLineState = app[module.config.productionId].getProdLineState(message.prodLine);

    if (!prodLineState)
    {
      return;
    }

    const prodShift = prodLineState.prodShift;

    if (!prodShift || !Array.isArray(prodShift.quantitiesDone))
    {
      return;
    }

    app.broker.publish(`heff.updated.${message.prodLine}`, {
      prodLine: message.prodLine,
      prodShift: {
        _id: prodShift._id,
        date: prodShift.date,
        quantitiesDone: prodShift.quantitiesDone
      }
    });
  });

  async function fetchFinishedProdShiftOrders(psoIds)
  {
    try
    {

    }
    catch (err)
    {
      module.error(err, 'Failed to find finished PSOs.');

      return psoIds;
    }
  }
};
