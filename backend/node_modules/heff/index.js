// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');

exports.DEFAULT_CONFIG = {
  expressId: 'express',
  updaterId: 'updater',
  mongooseId: 'mongoose',
  fteId: 'fte',
  userId: 'user',
  orgUnitsId: 'orgUnits',
  productionId: 'production'
};

exports.models = [
  require('prodShifts/models/prodShift')
];

exports.republishTopics = ['heff.reload.**'];

exports.optionalModules = {
  'express updater mongoose fte user orgUnits production': require('./routes')
};

exports.start = (app, module) =>
{
  app.broker.subscribe('production.synced.**', (message) =>
  {
    if (_.includes(message.types, 'changeQuantitiesDone')
      || _.includes(message.types, 'changeShift'))
    {
      notifyReloadLine(message.prodLine);
    }
  });

  app.broker.subscribe('hourlyPlans.quantitiesPlanned', (message) =>
  {
    notifyReloadLine(message.prodLine);
  });

  function notifyReloadLine(oldProdLine)
  {
    const newProdLine = app[module.config.orgUnitsId].fix.prodLine(oldProdLine);

    notifyReloadLineIfAvailable(oldProdLine);

    if (newProdLine !== oldProdLine)
    {
      notifyReloadLineIfAvailable(newProdLine);
    }
  }

  function notifyReloadLineIfAvailable(prodLine)
  {
    const prodLineState = app[module.config.productionId].getProdLineState(prodLine);

    if (!prodLineState
      || !prodLineState.prodShift
      || !Array.isArray(prodLineState.prodShift.quantitiesDone))
    {
      return;
    }

    app.broker.publish(`heff.reload.${prodLine}`, {
      prodLine: prodLine,
      quantitiesDone: prodLineState.prodShift.quantitiesDone
    });
  }
};
