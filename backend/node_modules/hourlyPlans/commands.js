// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const _ = require('lodash');
const canManage = require('./canManage');

module.exports = (app, module) =>
{
  const {user, divisions, sio, HourlyPlan} = module;

  const queues = new Map();

  sio.sockets.on('connection', (socket) =>
  {
    socket.on('hourlyPlans.findOrCreate', findOrCreate.bind(null, socket));
    socket.on('hourlyPlans.updateCount', updateCount.bind(null, socket));
    socket.on('hourlyPlans.updatePlan', updatePlan.bind(null, socket));
    socket.on('hourlyPlans.updateCounts', updateCounts.bind(null, socket));
  });

  function findOrCreate(socket, data, reply)
  {
    if (!_.isFunction(reply))
    {
      reply = function() {};
    }

    const userData = socket.handshake.user;

    if (!canManage(userData))
    {
      return reply(new Error('AUTH'));
    }

    if (!_.isObject(data))
    {
      return reply(new Error('INPUT'));
    }

    const shiftMoment = moment(data.date);

    if (!shiftMoment.isValid()
      || !_.isString(data.division)
      || !divisions.modelsById[data.division]
      || !_.isNumber(data.shift))
    {
      return reply(new Error('INPUT'));
    }

    shiftMoment.startOf('day');

    if (shiftMoment.valueOf() > moment().startOf('day').add(7, 'days').valueOf())
    {
      return reply(new Error('INPUT'));
    }

    if (data.shift === 3)
    {
      shiftMoment.hours(22);
    }
    else if (data.shift === 2)
    {
      shiftMoment.hours(14);
    }
    else
    {
      data.shift = 1;

      shiftMoment.hours(6);
    }

    const condition = {
      division: data.division,
      date: shiftMoment.toDate(),
      shift: data.shift
    };

    HourlyPlan.findOne(condition, (err, hourlyPlan) =>
    {
      if (err)
      {
        return reply(err);
      }

      if (hourlyPlan)
      {
        return reply(canManage(userData, hourlyPlan) ? null : new Error('AUTH'), hourlyPlan._id.toString());
      }

      const creator = user.createUserInfo(userData, socket);

      HourlyPlan.createForShift(condition, creator, (err, hourlyPlan) =>
      {
        if (hourlyPlan)
        {
          app.broker.publish('hourlyPlans.created', {
            user: userData,
            model: _.pick(hourlyPlan, ['_id', 'division', 'date', 'shift'])
          });
        }

        return reply(err, hourlyPlan ? hourlyPlan._id.toString() : null);
      });
    });
  }

  function scheduleUpdate(id, reply, update)
  {
    if (!queues.has(id))
    {
      queues.set(id, []);
    }

    queues.get(id).push({update, reply});

    updateNext(id);
  }

  function updateNext(id)
  {
    const queue = queues.get(id);

    if (!queue)
    {
      return;
    }

    if (queue.length === 0)
    {
      return queues.delete(id);
    }

    const next = queue.shift();

    next.update(err =>
    {
      next.reply(err);

      setImmediate(updateNext, id);
    });
  }

  function updateCount(socket, data, reply)
  {
    if (!_.isFunction(reply))
    {
      reply = function() {};
    }

    if (!_.isObject(data)
      || !_.isString(data._id)
      || !_.isNumber(data.flowIndex)
      || !_.isNumber(data.newValue))
    {
      return reply(new Error('INPUT'));
    }

    scheduleUpdate(data._id, reply, (done) =>
    {
      const userData = socket.handshake.user;

      HourlyPlan.findById(data._id, {createdAt: 1}).lean().exec((err, hourlyPlan) =>
      {
        if (err)
        {
          return done(err);
        }

        if (hourlyPlan === null)
        {
          return done(new Error('UNKNOWN'));
        }

        if (!canManage(userData, hourlyPlan))
        {
          return done(new Error('AUTH'));
        }

        const update = {$set: {
          updatedAt: new Date(),
          updater: user.createUserInfo(userData, socket)
        }};
        let field = 'flows.' + data.flowIndex;

        if (_.isNumber(data.hourIndex))
        {
          field += '.hours.' + data.hourIndex;
        }
        else
        {
          field += '.level';
        }

        update.$set[field] = data.newValue;

        HourlyPlan.collection.updateOne({_id: hourlyPlan._id}, update, (err) =>
        {
          if (err)
          {
            return done(err);
          }

          done();

          app.broker.publish(`hourlyPlans.updated.${data._id}`, data);
        });
      });
    });
  }

  function updatePlan(socket, data, reply)
  {
    if (!_.isFunction(reply))
    {
      reply = function() {};
    }

    if (!_.isObject(data)
      || !_.isString(data._id)
      || !_.isBoolean(data.newValue)
      || !_.isNumber(data.flowIndex))
    {
      return reply(new Error('INPUT'));
    }

    const userData = socket.handshake.user;

    if (!canManage(userData))
    {
      return reply(new Error('AUTH'));
    }

    scheduleUpdate(data._id, reply, done =>
    {
      HourlyPlan.findById(data._id, {createdAt: 1}).lean().exec((err, hourlyPlan) =>
      {
        if (err)
        {
          return done(err);
        }

        if (hourlyPlan === null)
        {
          return done(new Error('UNKNOWN'));
        }

        if (!canManage(userData, hourlyPlan))
        {
          return done(new Error('AUTH'));
        }

        const update = {
          $set: {
            updatedAt: new Date(),
            updater: user.createUserInfo(userData, socket)
          }
        };

        update.$set[`flows.${data.flowIndex}.noPlan`] = data.newValue;

        if (data.newValue)
        {
          update.$set[`flows.${data.flowIndex}.level`] = 0;
          update.$set[`flows.${data.flowIndex}.hours`] = [
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0
          ];
        }

        HourlyPlan.collection.updateOne({_id: hourlyPlan._id}, update, (err) =>
        {
          if (err)
          {
            return done(err);
          }

          done();

          app.broker.publish(`hourlyPlans.updated.${data._id}`, data);
        });
      });
    });
  }

  function updateCounts(socket, data, reply)
  {
    if (!_.isFunction(reply))
    {
      reply = function() {};
    }

    if (!_.isObject(data)
      || !_.isString(data._id)
      || !_.isArray(data.newValues)
      || !_.isNumber(data.flowIndex))
    {
      return reply(new Error('INPUT'));
    }

    const userData = socket.handshake.user;

    if (!canManage(userData))
    {
      return reply(new Error('AUTH'));
    }

    scheduleUpdate(data._id, reply, (done) =>
    {
      HourlyPlan.findById(data._id, {createdAt: 1}).lean().exec((err, hourlyPlan) =>
      {
        if (err)
        {
          return done(err);
        }

        if (hourlyPlan === null)
        {
          return done(new Error('UNKNOWN'));
        }

        if (!canManage(userData, hourlyPlan))
        {
          return done(new Error('AUTH'));
        }

        const update = {
          $set: {
            updatedAt: new Date(),
            updater: user.createUserInfo(userData, socket)
          }
        };

        const newValues = new Array(24);

        for (let i = 0; i < 24; ++i)
        {
          const newValue = data.newValues[i];

          newValues[i] = !_.isNumber(newValue) || newValue < 0 ? 0 : newValue;
        }

        data.newValues = newValues;

        update.$set[`flows.${data.flowIndex}.hours`] = data.newValues;

        HourlyPlan.collection.updateOne({_id: hourlyPlan._id}, update, (err) =>
        {
          if (err)
          {
            return done(err);
          }

          done();

          app.broker.publish(`hourlyPlans.updated.${data._id}`, data);
        });
      });
    });
  }
};
