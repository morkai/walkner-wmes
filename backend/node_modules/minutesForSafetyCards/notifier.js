// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const fs = require('fs');
const _ = require('lodash');
const step = require('h5.step');
const ejs = require('ejs');
const moment = require('moment');
const {ObjectId} = require('mongoose').Types;

module.exports = (app, module) =>
{
  const {mailSender, User} = module;
  const logger = module.logger.create({submodule: 'notifier'});

  const emailTemplateFile = `${__dirname}/templates/notifier.email.pl.ejs`;
  const renderEmail = ejs.compile(fs.readFileSync(emailTemplateFile, 'utf8'), {
    cache: true,
    filename: emailTemplateFile,
    compileDebug: false,
    rmWhitespace: true
  });

  app.broker.subscribe('minutesForSafetyCards.added', ({model}) => notify(model));
  app.broker.subscribe('minutesForSafetyCards.edited', ({model}) => notify(model));

  function notify(card)
  {
    if (!card.confirmer)
    {
      return;
    }

    const modifiedPaths = card.lastModifiedPaths();

    if (!modifiedPaths.includes('_id') && !modifiedPaths.includes('confirmer'))
    {
      return;
    }

    if (modifiedPaths.includes('_id') && card.confirmer.id === card.creator.id)
    {
      return;
    }

    if (modifiedPaths.includes('confirmer') && card.confirmer.id === card.updater.id)
    {
      return;
    }

    step(
      function()
      {
        const userIds = [new ObjectId(card.confirmer.id)];

        User
          .find({_id: {$in: userIds}}, {email: 1})
          .lean()
          .exec(this.next());
      },
      function(err, recipients)
      {
        if (err)
        {
          return this.skip(err);
        }

        this.recipients = recipients
          .filter((recipient) => _.isString(recipient.email) && recipient.email.includes('@'))
          .map((recipient) => recipient.email);

        if (!this.recipients.length)
        {
          return this.skip();
        }

        const mailOptions = {
          to: this.recipients,
          replyTo: this.recipients,
          subject: `[WMES] [Minutki] ${card.subject}`,
          html: renderEmail({
            urlPrefix: app.options.emailUrlPrefix,
            card: {
              ...card.toJSON(),
              date: moment(card.date).format('LL')
            }
          })
        };

        mailSender.send(mailOptions, this.next());
      },
      function(err)
      {
        if (err)
        {
          logger.error(err, `Failed to notify.`, {
            card: card.rid,
            recipients: this.recipients || []
          });
        }
        else if (this.recipients.length)
        {
          logger.info(`Notified.`, {
            card: card.rid,
            recipients: this.recipients
          });
        }
        else
        {
          logger.info(`No one to notify.`, {
            card: card.rid
          });
        }
      }
    );
  }
};
