// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const countReport = require('./countReport');

module.exports = (app, module) =>
{
  const {
    user,
    reports,
    express,
    MinutesForSafetyCard
  } = module;

  const canView = user.auth();
  const canManage = user.auth();

  express.get(
    '/minutesForSafetyCards',
    canView,
    prepareForBrowse,
    express.crud.browseRoute.bind(null, app, MinutesForSafetyCard)
  );

  express.get('/minutesForSafetyCards;rid', canView, findByRidRoute);

  express.post(
    '/minutesForSafetyCards',
    canManage,
    prepareForAdd,
    express.crud.addRoute.bind(null, app, MinutesForSafetyCard)
  );

  express.get(
    '/minutesForSafetyCards/:id',
    canView,
    express.crud.readRoute.bind(null, app, {
      model: MinutesForSafetyCard,
      idProperty: req => /^[0-9]+$/.test(req.params.id) ? 'rid' : '_id'
    })
  );

  express.put(
    '/minutesForSafetyCards/:id',
    canManage,
    prepareForEdit,
    express.crud.editRoute.bind(null, app, MinutesForSafetyCard)
  );

  express.delete(
    '/minutesForSafetyCards/:id',
    canManage,
    express.crud.deleteRoute.bind(null, app, MinutesForSafetyCard)
  );

  express.get(
    '/minutesForSafetyCards/reports/count',
    canView,
    reports.helpers.sendCachedReport.bind(null, 'minutesForSafetyCards/count'),
    countReportRoute
  );

  express.get('/r/mfs/:filter', redirectRoute);

  function prepareForBrowse(req, res, next)
  {
    if (!req.session || !req.session.user)
    {
      return next();
    }

    req.rql.selector.args.forEach(term =>
    {
      if (term.name === 'eq' && term.args[0] === 'users' && term.args[1] === 'mine')
      {
        term.args[1] = req.session.user._id;
      }
    });

    next();
  }

  function prepareForAdd(req, res, next)
  {
    const body = req.body;

    body.createdAt = new Date();
    body.creator = user.createUserInfo(req.session.user, req);
    body.creator.id = body.creator.id.toString();

    return next();
  }

  function prepareForEdit(req, res, next)
  {
    const body = req.body;

    body.updatedAt = new Date();
    body.updater = user.createUserInfo(req.session.user, req);
    body.updater.id = body.updater.id.toString();

    return next();
  }

  function findByRidRoute(req, res, next)
  {
    const rid = parseInt(req.query.rid, 10);

    if (isNaN(rid) || rid <= 0)
    {
      return res.sendStatus(400);
    }

    MinutesForSafetyCard.findOne({rid: rid}, {_id: 1}).lean().exec((err, doc) =>
    {
      if (err)
      {
        return next(err);
      }

      if (doc)
      {
        return res.json(doc._id);
      }

      return res.sendStatus(404);
    });
  }

  function countReportRoute(req, res, next)
  {
    const query = req.query;
    const options = {
      fromTime: reports.helpers.getTime(query.from) || null,
      toTime: reports.helpers.getTime(query.to) || null,
      interval: reports.helpers.getInterval(query.interval, 'month'),
      sections: _.isEmpty(query.sections) ? [] : query.sections.split(','),
      owner: _.isEmpty(query.owner) ? null : query.owner,
      confirmer: _.isEmpty(query.confirmer) ? null : query.confirmer
    };

    reports.helpers.generateReport(
      app,
      reports,
      countReport,
      'minutesForSafetyCards/count',
      req.reportHash,
      options,
      (err, reportJson) =>
      {
        if (err)
        {
          return next(err);
        }

        res.type('json');
        res.send(reportJson);
      }
    );
  }

  function redirectRoute(req, res, next)
  {
    if (/^[0-9]+$/.test(req.params.filter))
    {
      req.params.rid = req.params.filter;

      redirectToDetailsRoute(req, res, next);
    }
    else
    {
      redirectToListRoute(req, res, next);
    }
  }

  function redirectToListRoute(req, res)
  {
    let url = '/#minutesForSafetyCards';

    if (req.params.filter === 'mine')
    {
      url += '?sort(-date)&limit(-1337)&users=mine';
    }

    res.redirect(url);
  }

  function redirectToDetailsRoute(req, res, next)
  {
    MinutesForSafetyCard.findOne({rid: parseInt(req.params.rid, 10)}, {_id: 1}).lean().exec((err, card) =>
    {
      if (err)
      {
        return next(err);
      }

      if (card)
      {
        return res.redirect(`/#minutesForSafetyCards/${card._id}`);
      }

      res.sendStatus(404);
    });
  }
};
